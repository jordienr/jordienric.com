'use strict';

var re = require('react');
var Au = require('react-dom');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var re__default = /*#__PURE__*/_interopDefault(re);
var Au__default = /*#__PURE__*/_interopDefault(Au);

function V(n){this.content=n;}V.prototype={constructor:V,find:function(n){for(var e=0;e<this.content.length;e+=2)if(this.content[e]===n)return e;return -1},get:function(n){var e=this.find(n);return e==-1?void 0:this.content[e+1]},update:function(n,e,t){var r=t&&t!=n?this.remove(t):this,i=r.find(n),s=r.content.slice();return i==-1?s.push(t||n,e):(s[i+1]=e,t&&(s[i]=t)),new V(s)},remove:function(n){var e=this.find(n);if(e==-1)return this;var t=this.content.slice();return t.splice(e,2),new V(t)},addToStart:function(n,e){return new V([n,e].concat(this.remove(n).content))},addToEnd:function(n,e){var t=this.remove(n).content.slice();return t.push(n,e),new V(t)},addBefore:function(n,e,t){var r=this.remove(e),i=r.content.slice(),s=r.find(n);return i.splice(s==-1?i.length:s,0,e,t),new V(i)},forEach:function(n){for(var e=0;e<this.content.length;e+=2)n(this.content[e],this.content[e+1]);},prepend:function(n){return n=V.from(n),n.size?new V(n.content.concat(this.subtract(n).content)):this},append:function(n){return n=V.from(n),n.size?new V(this.subtract(n).content.concat(n.content)):this},subtract:function(n){var e=this;n=V.from(n);for(var t=0;t<n.content.length;t+=2)e=e.remove(n.content[t]);return e},toObject:function(){var n={};return this.forEach(function(e,t){n[e]=t;}),n},get size(){return this.content.length>>1}};V.from=function(n){if(n instanceof V)return n;var e=[];if(n)for(var t in n)e.push(t,n[t]);return new V(e)};var An=V;function Si(n,e,t){for(let r=0;;r++){if(r==n.childCount||r==e.childCount)return n.childCount==e.childCount?null:t;let i=n.child(r),s=e.child(r);if(i==s){t+=i.nodeSize;continue}if(!i.sameMarkup(s))return t;if(i.isText&&i.text!=s.text){for(let o=0;i.text[o]==s.text[o];o++)t++;return t}if(i.content.size||s.content.size){let o=Si(i.content,s.content,t+1);if(o!=null)return o}t+=i.nodeSize;}}function xi(n,e,t,r){for(let i=n.childCount,s=e.childCount;;){if(i==0||s==0)return i==s?null:{a:t,b:r};let o=n.child(--i),l=e.child(--s),a=o.nodeSize;if(o==l){t-=a,r-=a;continue}if(!o.sameMarkup(l))return {a:t,b:r};if(o.isText&&o.text!=l.text){let c=0,d=Math.min(o.text.length,l.text.length);for(;c<d&&o.text[o.text.length-c-1]==l.text[l.text.length-c-1];)c++,t--,r--;return {a:t,b:r}}if(o.content.size||l.content.size){let c=xi(o.content,l.content,t-1,r-1);if(c)return c}t-=a,r-=a;}}var b=class n{constructor(e,t){if(this.content=e,this.size=t||0,t==null)for(let r=0;r<e.length;r++)this.size+=e[r].nodeSize;}nodesBetween(e,t,r,i=0,s){for(let o=0,l=0;l<t;o++){let a=this.content[o],c=l+a.nodeSize;if(c>e&&r(a,i+l,s||null,o)!==!1&&a.content.size){let d=l+1;a.nodesBetween(Math.max(0,e-d),Math.min(a.content.size,t-d),r,i+d);}l=c;}}descendants(e){this.nodesBetween(0,this.size,e);}textBetween(e,t,r,i){let s="",o=!0;return this.nodesBetween(e,t,(l,a)=>{l.isText?(s+=l.text.slice(Math.max(e,a)-a,t-a),o=!r):l.isLeaf?(i?s+=typeof i=="function"?i(l):i:l.type.spec.leafText&&(s+=l.type.spec.leafText(l)),o=!r):!o&&l.isBlock&&(s+=r,o=!0);},0),s}append(e){if(!e.size)return this;if(!this.size)return e;let t=this.lastChild,r=e.firstChild,i=this.content.slice(),s=0;for(t.isText&&t.sameMarkup(r)&&(i[i.length-1]=t.withText(t.text+r.text),s=1);s<e.content.length;s++)i.push(e.content[s]);return new n(i,this.size+e.size)}cut(e,t=this.size){if(e==0&&t==this.size)return this;let r=[],i=0;if(t>e)for(let s=0,o=0;o<t;s++){let l=this.content[s],a=o+l.nodeSize;a>e&&((o<e||a>t)&&(l.isText?l=l.cut(Math.max(0,e-o),Math.min(l.text.length,t-o)):l=l.cut(Math.max(0,e-o-1),Math.min(l.content.size,t-o-1))),r.push(l),i+=l.nodeSize),o=a;}return new n(r,i)}cutByIndex(e,t){return e==t?n.empty:e==0&&t==this.content.length?this:new n(this.content.slice(e,t))}replaceChild(e,t){let r=this.content[e];if(r==t)return this;let i=this.content.slice(),s=this.size+t.nodeSize-r.nodeSize;return i[e]=t,new n(i,s)}addToStart(e){return new n([e].concat(this.content),this.size+e.nodeSize)}addToEnd(e){return new n(this.content.concat(e),this.size+e.nodeSize)}eq(e){if(this.content.length!=e.content.length)return !1;for(let t=0;t<this.content.length;t++)if(!this.content[t].eq(e.content[t]))return !1;return !0}get firstChild(){return this.content.length?this.content[0]:null}get lastChild(){return this.content.length?this.content[this.content.length-1]:null}get childCount(){return this.content.length}child(e){let t=this.content[e];if(!t)throw new RangeError("Index "+e+" out of range for "+this);return t}maybeChild(e){return this.content[e]||null}forEach(e){for(let t=0,r=0;t<this.content.length;t++){let i=this.content[t];e(i,r,t),r+=i.nodeSize;}}findDiffStart(e,t=0){return Si(this,e,t)}findDiffEnd(e,t=this.size,r=e.size){return xi(this,e,t,r)}findIndex(e,t=-1){if(e==0)return Vt(0,e);if(e==this.size)return Vt(this.content.length,e);if(e>this.size||e<0)throw new RangeError(`Position ${e} outside of fragment (${this})`);for(let r=0,i=0;;r++){let s=this.child(r),o=i+s.nodeSize;if(o>=e)return o==e||t>0?Vt(r+1,o):Vt(r,i);i=o;}}toString(){return "<"+this.toStringInner()+">"}toStringInner(){return this.content.join(", ")}toJSON(){return this.content.length?this.content.map(e=>e.toJSON()):null}static fromJSON(e,t){if(!t)return n.empty;if(!Array.isArray(t))throw new RangeError("Invalid input for Fragment.fromJSON");return new n(t.map(e.nodeFromJSON))}static fromArray(e){if(!e.length)return n.empty;let t,r=0;for(let i=0;i<e.length;i++){let s=e[i];r+=s.nodeSize,i&&s.isText&&e[i-1].sameMarkup(s)?(t||(t=e.slice(0,i)),t[t.length-1]=s.withText(t[t.length-1].text+s.text)):t&&t.push(s);}return new n(t||e,r)}static from(e){if(!e)return n.empty;if(e instanceof n)return e;if(Array.isArray(e))return this.fromArray(e);if(e.attrs)return new n([e],e.nodeSize);throw new RangeError("Can not convert "+e+" to a Fragment"+(e.nodesBetween?" (looks like multiple versions of prosemirror-model were loaded)":""))}};b.empty=new b([],0);var Dn={index:0,offset:0};function Vt(n,e){return Dn.index=n,Dn.offset=e,Dn}function $t(n,e){if(n===e)return !0;if(!(n&&typeof n=="object")||!(e&&typeof e=="object"))return !1;let t=Array.isArray(n);if(Array.isArray(e)!=t)return !1;if(t){if(n.length!=e.length)return !1;for(let r=0;r<n.length;r++)if(!$t(n[r],e[r]))return !1}else {for(let r in n)if(!(r in e)||!$t(n[r],e[r]))return !1;for(let r in e)if(!(r in n))return !1}return !0}var A=class n{constructor(e,t){this.type=e,this.attrs=t;}addToSet(e){let t,r=!1;for(let i=0;i<e.length;i++){let s=e[i];if(this.eq(s))return e;if(this.type.excludes(s.type))t||(t=e.slice(0,i));else {if(s.type.excludes(this.type))return e;!r&&s.type.rank>this.type.rank&&(t||(t=e.slice(0,i)),t.push(this),r=!0),t&&t.push(s);}}return t||(t=e.slice()),r||t.push(this),t}removeFromSet(e){for(let t=0;t<e.length;t++)if(this.eq(e[t]))return e.slice(0,t).concat(e.slice(t+1));return e}isInSet(e){for(let t=0;t<e.length;t++)if(this.eq(e[t]))return !0;return !1}eq(e){return this==e||this.type==e.type&&$t(this.attrs,e.attrs)}toJSON(){let e={type:this.type.name};for(let t in this.attrs){e.attrs=this.attrs;break}return e}static fromJSON(e,t){if(!t)throw new RangeError("Invalid input for Mark.fromJSON");let r=e.marks[t.type];if(!r)throw new RangeError(`There is no mark type ${t.type} in this schema`);return r.create(t.attrs)}static sameSet(e,t){if(e==t)return !0;if(e.length!=t.length)return !1;for(let r=0;r<e.length;r++)if(!e[r].eq(t[r]))return !1;return !0}static setFrom(e){if(!e||Array.isArray(e)&&e.length==0)return n.none;if(e instanceof n)return [e];let t=e.slice();return t.sort((r,i)=>r.type.rank-i.type.rank),t}};A.none=[];var Ve=class extends Error{},k=class n{constructor(e,t,r){this.content=e,this.openStart=t,this.openEnd=r;}get size(){return this.content.size-this.openStart-this.openEnd}insertAt(e,t){let r=Ci(this.content,e+this.openStart,t);return r&&new n(r,this.openStart,this.openEnd)}removeBetween(e,t){return new n(Mi(this.content,e+this.openStart,t+this.openStart),this.openStart,this.openEnd)}eq(e){return this.content.eq(e.content)&&this.openStart==e.openStart&&this.openEnd==e.openEnd}toString(){return this.content+"("+this.openStart+","+this.openEnd+")"}toJSON(){if(!this.content.size)return null;let e={content:this.content.toJSON()};return this.openStart>0&&(e.openStart=this.openStart),this.openEnd>0&&(e.openEnd=this.openEnd),e}static fromJSON(e,t){if(!t)return n.empty;let r=t.openStart||0,i=t.openEnd||0;if(typeof r!="number"||typeof i!="number")throw new RangeError("Invalid input for Slice.fromJSON");return new n(b.fromJSON(e,t.content),r,i)}static maxOpen(e,t=!0){let r=0,i=0;for(let s=e.firstChild;s&&!s.isLeaf&&(t||!s.type.spec.isolating);s=s.firstChild)r++;for(let s=e.lastChild;s&&!s.isLeaf&&(t||!s.type.spec.isolating);s=s.lastChild)i++;return new n(e,r,i)}};k.empty=new k(b.empty,0,0);function Mi(n,e,t){let{index:r,offset:i}=n.findIndex(e),s=n.maybeChild(r),{index:o,offset:l}=n.findIndex(t);if(i==e||s.isText){if(l!=t&&!n.child(o).isText)throw new RangeError("Removing non-flat range");return n.cut(0,e).append(n.cut(t))}if(r!=o)throw new RangeError("Removing non-flat range");return n.replaceChild(r,s.copy(Mi(s.content,e-i-1,t-i-1)))}function Ci(n,e,t,r){let{index:i,offset:s}=n.findIndex(e),o=n.maybeChild(i);if(s==e||o.isText)return r&&!r.canReplace(i,i,t)?null:n.cut(0,e).append(t).append(n.cut(e));let l=Ci(o.content,e-s-1,t);return l&&n.replaceChild(i,o.copy(l))}function Cl(n,e,t){if(t.openStart>n.depth)throw new Ve("Inserted content deeper than insertion position");if(n.depth-t.openStart!=e.depth-t.openEnd)throw new Ve("Inconsistent open depths");return wi(n,e,t,0)}function wi(n,e,t,r){let i=n.index(r),s=n.node(r);if(i==e.index(r)&&r<n.depth-t.openStart){let o=wi(n,e,t,r+1);return s.copy(s.content.replaceChild(i,o))}else if(t.content.size)if(!t.openStart&&!t.openEnd&&n.depth==r&&e.depth==r){let o=n.parent,l=o.content;return ze(o,l.cut(0,n.parentOffset).append(t.content).append(l.cut(e.parentOffset)))}else {let{start:o,end:l}=wl(t,n);return ze(s,Ti(n,o,l,e,r))}else return ze(s,Ht(n,e,r))}function Oi(n,e){if(!e.type.compatibleContent(n.type))throw new Ve("Cannot join "+e.type.name+" onto "+n.type.name)}function Pn(n,e,t){let r=n.node(t);return Oi(r,e.node(t)),r}function Fe(n,e){let t=e.length-1;t>=0&&n.isText&&n.sameMarkup(e[t])?e[t]=n.withText(e[t].text+n.text):e.push(n);}function yt(n,e,t,r){let i=(e||n).node(t),s=0,o=e?e.index(t):i.childCount;n&&(s=n.index(t),n.depth>t?s++:n.textOffset&&(Fe(n.nodeAfter,r),s++));for(let l=s;l<o;l++)Fe(i.child(l),r);e&&e.depth==t&&e.textOffset&&Fe(e.nodeBefore,r);}function ze(n,e){return n.type.checkContent(e),n.copy(e)}function Ti(n,e,t,r,i){let s=n.depth>i&&Pn(n,e,i+1),o=r.depth>i&&Pn(t,r,i+1),l=[];return yt(null,n,i,l),s&&o&&e.index(i)==t.index(i)?(Oi(s,o),Fe(ze(s,Ti(n,e,t,r,i+1)),l)):(s&&Fe(ze(s,Ht(n,e,i+1)),l),yt(e,t,i,l),o&&Fe(ze(o,Ht(t,r,i+1)),l)),yt(r,null,i,l),new b(l)}function Ht(n,e,t){let r=[];if(yt(null,n,t,r),n.depth>t){let i=Pn(n,e,t+1);Fe(ze(i,Ht(n,e,t+1)),r);}return yt(e,null,t,r),new b(r)}function wl(n,e){let t=e.depth-n.openStart,i=e.node(t).copy(n.content);for(let s=t-1;s>=0;s--)i=e.node(s).copy(b.from(i));return {start:i.resolveNoCache(n.openStart+t),end:i.resolveNoCache(i.content.size-n.openEnd-t)}}var Jt=class n{constructor(e,t,r){this.pos=e,this.path=t,this.parentOffset=r,this.depth=t.length/3-1;}resolveDepth(e){return e==null?this.depth:e<0?this.depth+e:e}get parent(){return this.node(this.depth)}get doc(){return this.node(0)}node(e){return this.path[this.resolveDepth(e)*3]}index(e){return this.path[this.resolveDepth(e)*3+1]}indexAfter(e){return e=this.resolveDepth(e),this.index(e)+(e==this.depth&&!this.textOffset?0:1)}start(e){return e=this.resolveDepth(e),e==0?0:this.path[e*3-1]+1}end(e){return e=this.resolveDepth(e),this.start(e)+this.node(e).content.size}before(e){if(e=this.resolveDepth(e),!e)throw new RangeError("There is no position before the top-level node");return e==this.depth+1?this.pos:this.path[e*3-1]}after(e){if(e=this.resolveDepth(e),!e)throw new RangeError("There is no position after the top-level node");return e==this.depth+1?this.pos:this.path[e*3-1]+this.path[e*3].nodeSize}get textOffset(){return this.pos-this.path[this.path.length-1]}get nodeAfter(){let e=this.parent,t=this.index(this.depth);if(t==e.childCount)return null;let r=this.pos-this.path[this.path.length-1],i=e.child(t);return r?e.child(t).cut(r):i}get nodeBefore(){let e=this.index(this.depth),t=this.pos-this.path[this.path.length-1];return t?this.parent.child(e).cut(0,t):e==0?null:this.parent.child(e-1)}posAtIndex(e,t){t=this.resolveDepth(t);let r=this.path[t*3],i=t==0?0:this.path[t*3-1]+1;for(let s=0;s<e;s++)i+=r.child(s).nodeSize;return i}marks(){let e=this.parent,t=this.index();if(e.content.size==0)return A.none;if(this.textOffset)return e.child(t).marks;let r=e.maybeChild(t-1),i=e.maybeChild(t);if(!r){let l=r;r=i,i=l;}let s=r.marks;for(var o=0;o<s.length;o++)s[o].type.spec.inclusive===!1&&(!i||!s[o].isInSet(i.marks))&&(s=s[o--].removeFromSet(s));return s}marksAcross(e){let t=this.parent.maybeChild(this.index());if(!t||!t.isInline)return null;let r=t.marks,i=e.parent.maybeChild(e.index());for(var s=0;s<r.length;s++)r[s].type.spec.inclusive===!1&&(!i||!r[s].isInSet(i.marks))&&(r=r[s--].removeFromSet(r));return r}sharedDepth(e){for(let t=this.depth;t>0;t--)if(this.start(t)<=e&&this.end(t)>=e)return t;return 0}blockRange(e=this,t){if(e.pos<this.pos)return e.blockRange(this);for(let r=this.depth-(this.parent.inlineContent||this.pos==e.pos?1:0);r>=0;r--)if(e.pos<=this.end(r)&&(!t||t(this.node(r))))return new $e(this,e,r);return null}sameParent(e){return this.pos-this.parentOffset==e.pos-e.parentOffset}max(e){return e.pos>this.pos?e:this}min(e){return e.pos<this.pos?e:this}toString(){let e="";for(let t=1;t<=this.depth;t++)e+=(e?"/":"")+this.node(t).type.name+"_"+this.index(t-1);return e+":"+this.parentOffset}static resolve(e,t){if(!(t>=0&&t<=e.content.size))throw new RangeError("Position "+t+" out of range");let r=[],i=0,s=t;for(let o=e;;){let{index:l,offset:a}=o.content.findIndex(s),c=s-a;if(r.push(o,l,i+a),!c||(o=o.child(l),o.isText))break;s=c-1,i+=a+1;}return new n(t,r,s)}static resolveCached(e,t){for(let i=0;i<vn.length;i++){let s=vn[i];if(s.pos==t&&s.doc==e)return s}let r=vn[In]=n.resolve(e,t);return In=(In+1)%Ol,r}},vn=[],In=0,Ol=12,$e=class{constructor(e,t,r){this.$from=e,this.$to=t,this.depth=r;}get start(){return this.$from.before(this.depth+1)}get end(){return this.$to.after(this.depth+1)}get parent(){return this.$from.node(this.depth)}get startIndex(){return this.$from.index(this.depth)}get endIndex(){return this.$to.indexAfter(this.depth)}},Tl=Object.create(null),le=class n{constructor(e,t,r,i=A.none){this.type=e,this.attrs=t,this.marks=i,this.content=r||b.empty;}get nodeSize(){return this.isLeaf?1:2+this.content.size}get childCount(){return this.content.childCount}child(e){return this.content.child(e)}maybeChild(e){return this.content.maybeChild(e)}forEach(e){this.content.forEach(e);}nodesBetween(e,t,r,i=0){this.content.nodesBetween(e,t,r,i,this);}descendants(e){this.nodesBetween(0,this.content.size,e);}get textContent(){return this.isLeaf&&this.type.spec.leafText?this.type.spec.leafText(this):this.textBetween(0,this.content.size,"")}textBetween(e,t,r,i){return this.content.textBetween(e,t,r,i)}get firstChild(){return this.content.firstChild}get lastChild(){return this.content.lastChild}eq(e){return this==e||this.sameMarkup(e)&&this.content.eq(e.content)}sameMarkup(e){return this.hasMarkup(e.type,e.attrs,e.marks)}hasMarkup(e,t,r){return this.type==e&&$t(this.attrs,t||e.defaultAttrs||Tl)&&A.sameSet(this.marks,r||A.none)}copy(e=null){return e==this.content?this:new n(this.type,this.attrs,e,this.marks)}mark(e){return e==this.marks?this:new n(this.type,this.attrs,this.content,e)}cut(e,t=this.content.size){return e==0&&t==this.content.size?this:this.copy(this.content.cut(e,t))}slice(e,t=this.content.size,r=!1){if(e==t)return k.empty;let i=this.resolve(e),s=this.resolve(t),o=r?0:i.sharedDepth(t),l=i.start(o),c=i.node(o).content.cut(i.pos-l,s.pos-l);return new k(c,i.depth-o,s.depth-o)}replace(e,t,r){return Cl(this.resolve(e),this.resolve(t),r)}nodeAt(e){for(let t=this;;){let{index:r,offset:i}=t.content.findIndex(e);if(t=t.maybeChild(r),!t)return null;if(i==e||t.isText)return t;e-=i+1;}}childAfter(e){let{index:t,offset:r}=this.content.findIndex(e);return {node:this.content.maybeChild(t),index:t,offset:r}}childBefore(e){if(e==0)return {node:null,index:0,offset:0};let{index:t,offset:r}=this.content.findIndex(e);if(r<e)return {node:this.content.child(t),index:t,offset:r};let i=this.content.child(t-1);return {node:i,index:t-1,offset:r-i.nodeSize}}resolve(e){return Jt.resolveCached(this,e)}resolveNoCache(e){return Jt.resolve(this,e)}rangeHasMark(e,t,r){let i=!1;return t>e&&this.nodesBetween(e,t,s=>(r.isInSet(s.marks)&&(i=!0),!i)),i}get isBlock(){return this.type.isBlock}get isTextblock(){return this.type.isTextblock}get inlineContent(){return this.type.inlineContent}get isInline(){return this.type.isInline}get isText(){return this.type.isText}get isLeaf(){return this.type.isLeaf}get isAtom(){return this.type.isAtom}toString(){if(this.type.spec.toDebugString)return this.type.spec.toDebugString(this);let e=this.type.name;return this.content.size&&(e+="("+this.content.toStringInner()+")"),Ei(this.marks,e)}contentMatchAt(e){let t=this.type.contentMatch.matchFragment(this.content,0,e);if(!t)throw new Error("Called contentMatchAt on a node with invalid content");return t}canReplace(e,t,r=b.empty,i=0,s=r.childCount){let o=this.contentMatchAt(e).matchFragment(r,i,s),l=o&&o.matchFragment(this.content,t);if(!l||!l.validEnd)return !1;for(let a=i;a<s;a++)if(!this.type.allowsMarks(r.child(a).marks))return !1;return !0}canReplaceWith(e,t,r,i){if(i&&!this.type.allowsMarks(i))return !1;let s=this.contentMatchAt(e).matchType(r),o=s&&s.matchFragment(this.content,t);return o?o.validEnd:!1}canAppend(e){return e.content.size?this.canReplace(this.childCount,this.childCount,e.content):this.type.compatibleContent(e.type)}check(){this.type.checkContent(this.content);let e=A.none;for(let t=0;t<this.marks.length;t++)e=this.marks[t].addToSet(e);if(!A.sameSet(e,this.marks))throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(t=>t.type.name)}`);this.content.forEach(t=>t.check());}toJSON(){let e={type:this.type.name};for(let t in this.attrs){e.attrs=this.attrs;break}return this.content.size&&(e.content=this.content.toJSON()),this.marks.length&&(e.marks=this.marks.map(t=>t.toJSON())),e}static fromJSON(e,t){if(!t)throw new RangeError("Invalid input for Node.fromJSON");let r=null;if(t.marks){if(!Array.isArray(t.marks))throw new RangeError("Invalid mark data for Node.fromJSON");r=t.marks.map(e.markFromJSON);}if(t.type=="text"){if(typeof t.text!="string")throw new RangeError("Invalid text node in JSON");return e.text(t.text,r)}let i=b.fromJSON(e,t.content);return e.nodeType(t.type).create(t.attrs,i,r)}};le.prototype.text=void 0;var Bn=class n extends le{constructor(e,t,r,i){if(super(e,t,null,i),!r)throw new RangeError("Empty text nodes are not allowed");this.text=r;}toString(){return this.type.spec.toDebugString?this.type.spec.toDebugString(this):Ei(this.marks,JSON.stringify(this.text))}get textContent(){return this.text}textBetween(e,t){return this.text.slice(e,t)}get nodeSize(){return this.text.length}mark(e){return e==this.marks?this:new n(this.type,this.attrs,this.text,e)}withText(e){return e==this.text?this:new n(this.type,this.attrs,e,this.marks)}cut(e=0,t=this.text.length){return e==0&&t==this.text.length?this:this.withText(this.text.slice(e,t))}eq(e){return this.sameMarkup(e)&&this.text==e.text}toJSON(){let e=super.toJSON();return e.text=this.text,e}};function Ei(n,e){for(let t=n.length-1;t>=0;t--)e=n[t].type.name+"("+e+")";return e}var He=class n{constructor(e){this.validEnd=e,this.next=[],this.wrapCache=[];}static parse(e,t){let r=new Ln(e,t);if(r.next==null)return n.empty;let i=Ni(r);r.next&&r.err("Unexpected trailing text");let s=Rl(Il(i));return Pl(s,r),s}matchType(e){for(let t=0;t<this.next.length;t++)if(this.next[t].type==e)return this.next[t].next;return null}matchFragment(e,t=0,r=e.childCount){let i=this;for(let s=t;i&&s<r;s++)i=i.matchType(e.child(s).type);return i}get inlineContent(){return this.next.length!=0&&this.next[0].type.isInline}get defaultType(){for(let e=0;e<this.next.length;e++){let{type:t}=this.next[e];if(!(t.isText||t.hasRequiredAttrs()))return t}return null}compatible(e){for(let t=0;t<this.next.length;t++)for(let r=0;r<e.next.length;r++)if(this.next[t].type==e.next[r].type)return !0;return !1}fillBefore(e,t=!1,r=0){let i=[this];function s(o,l){let a=o.matchFragment(e,r);if(a&&(!t||a.validEnd))return b.from(l.map(c=>c.createAndFill()));for(let c=0;c<o.next.length;c++){let{type:d,next:u}=o.next[c];if(!(d.isText||d.hasRequiredAttrs())&&i.indexOf(u)==-1){i.push(u);let f=s(u,l.concat(d));if(f)return f}}return null}return s(this,[])}findWrapping(e){for(let r=0;r<this.wrapCache.length;r+=2)if(this.wrapCache[r]==e)return this.wrapCache[r+1];let t=this.computeWrapping(e);return this.wrapCache.push(e,t),t}computeWrapping(e){let t=Object.create(null),r=[{match:this,type:null,via:null}];for(;r.length;){let i=r.shift(),s=i.match;if(s.matchType(e)){let o=[];for(let l=i;l.type;l=l.via)o.push(l.type);return o.reverse()}for(let o=0;o<s.next.length;o++){let{type:l,next:a}=s.next[o];!l.isLeaf&&!l.hasRequiredAttrs()&&!(l.name in t)&&(!i.type||a.validEnd)&&(r.push({match:l.contentMatch,type:l,via:i}),t[l.name]=!0);}}return null}get edgeCount(){return this.next.length}edge(e){if(e>=this.next.length)throw new RangeError(`There's no ${e}th edge in this content match`);return this.next[e]}toString(){let e=[];function t(r){e.push(r);for(let i=0;i<r.next.length;i++)e.indexOf(r.next[i].next)==-1&&t(r.next[i].next);}return t(this),e.map((r,i)=>{let s=i+(r.validEnd?"*":" ")+" ";for(let o=0;o<r.next.length;o++)s+=(o?", ":"")+r.next[o].type.name+"->"+e.indexOf(r.next[o].next);return s}).join(`
`)}};He.empty=new He(!0);var Ln=class{constructor(e,t){this.string=e,this.nodeTypes=t,this.inline=null,this.pos=0,this.tokens=e.split(/\s*(?=\b|\W|$)/),this.tokens[this.tokens.length-1]==""&&this.tokens.pop(),this.tokens[0]==""&&this.tokens.shift();}get next(){return this.tokens[this.pos]}eat(e){return this.next==e&&(this.pos++||!0)}err(e){throw new SyntaxError(e+" (in content expression '"+this.string+"')")}};function Ni(n){let e=[];do e.push(El(n));while(n.eat("|"));return e.length==1?e[0]:{type:"choice",exprs:e}}function El(n){let e=[];do e.push(Nl(n));while(n.next&&n.next!=")"&&n.next!="|");return e.length==1?e[0]:{type:"seq",exprs:e}}function Nl(n){let e=vl(n);for(;;)if(n.eat("+"))e={type:"plus",expr:e};else if(n.eat("*"))e={type:"star",expr:e};else if(n.eat("?"))e={type:"opt",expr:e};else if(n.eat("{"))e=Al(n,e);else break;return e}function pi(n){/\D/.test(n.next)&&n.err("Expected number, got '"+n.next+"'");let e=Number(n.next);return n.pos++,e}function Al(n,e){let t=pi(n),r=t;return n.eat(",")&&(n.next!="}"?r=pi(n):r=-1),n.eat("}")||n.err("Unclosed braced range"),{type:"range",min:t,max:r,expr:e}}function Dl(n,e){let t=n.nodeTypes,r=t[e];if(r)return [r];let i=[];for(let s in t){let o=t[s];o.groups.indexOf(e)>-1&&i.push(o);}return i.length==0&&n.err("No node type or group '"+e+"' found"),i}function vl(n){if(n.eat("(")){let e=Ni(n);return n.eat(")")||n.err("Missing closing paren"),e}else if(/\W/.test(n.next))n.err("Unexpected token '"+n.next+"'");else {let e=Dl(n,n.next).map(t=>(n.inline==null?n.inline=t.isInline:n.inline!=t.isInline&&n.err("Mixing inline and block content"),{type:"name",value:t}));return n.pos++,e.length==1?e[0]:{type:"choice",exprs:e}}}function Il(n){let e=[[]];return i(s(n,0),t()),e;function t(){return e.push([])-1}function r(o,l,a){let c={term:a,to:l};return e[o].push(c),c}function i(o,l){o.forEach(a=>a.to=l);}function s(o,l){if(o.type=="choice")return o.exprs.reduce((a,c)=>a.concat(s(c,l)),[]);if(o.type=="seq")for(let a=0;;a++){let c=s(o.exprs[a],l);if(a==o.exprs.length-1)return c;i(c,l=t());}else if(o.type=="star"){let a=t();return r(l,a),i(s(o.expr,a),a),[r(a)]}else if(o.type=="plus"){let a=t();return i(s(o.expr,l),a),i(s(o.expr,a),a),[r(a)]}else {if(o.type=="opt")return [r(l)].concat(s(o.expr,l));if(o.type=="range"){let a=l;for(let c=0;c<o.min;c++){let d=t();i(s(o.expr,a),d),a=d;}if(o.max==-1)i(s(o.expr,a),a);else for(let c=o.min;c<o.max;c++){let d=t();r(a,d),i(s(o.expr,a),d),a=d;}return [r(a)]}else {if(o.type=="name")return [r(l,void 0,o.value)];throw new Error("Unknown expr type")}}}}function Ai(n,e){return e-n}function mi(n,e){let t=[];return r(e),t.sort(Ai);function r(i){let s=n[i];if(s.length==1&&!s[0].term)return r(s[0].to);t.push(i);for(let o=0;o<s.length;o++){let{term:l,to:a}=s[o];!l&&t.indexOf(a)==-1&&r(a);}}}function Rl(n){let e=Object.create(null);return t(mi(n,0));function t(r){let i=[];r.forEach(o=>{n[o].forEach(({term:l,to:a})=>{if(!l)return;let c;for(let d=0;d<i.length;d++)i[d][0]==l&&(c=i[d][1]);mi(n,a).forEach(d=>{c||i.push([l,c=[]]),c.indexOf(d)==-1&&c.push(d);});});});let s=e[r.join(",")]=new He(r.indexOf(n.length-1)>-1);for(let o=0;o<i.length;o++){let l=i[o][1].sort(Ai);s.next.push({type:i[o][0],next:e[l.join(",")]||t(l)});}return s}}function Pl(n,e){for(let t=0,r=[n];t<r.length;t++){let i=r[t],s=!i.validEnd,o=[];for(let l=0;l<i.next.length;l++){let{type:a,next:c}=i.next[l];o.push(a.name),s&&!(a.isText||a.hasRequiredAttrs())&&(s=!1),r.indexOf(c)==-1&&r.push(c);}s&&e.err("Only non-generatable nodes ("+o.join(", ")+") in a required position (see https://prosemirror.net/docs/guide/#generatable)");}}function Di(n){let e=Object.create(null);for(let t in n){let r=n[t];if(!r.hasDefault)return null;e[t]=r.default;}return e}function vi(n,e){let t=Object.create(null);for(let r in n){let i=e&&e[r];if(i===void 0){let s=n[r];if(s.hasDefault)i=s.default;else throw new RangeError("No value supplied for attribute "+r)}t[r]=i;}return t}function Ii(n){let e=Object.create(null);if(n)for(let t in n)e[t]=new Fn(n[t]);return e}var Wt=class n{constructor(e,t,r){this.name=e,this.schema=t,this.spec=r,this.markSet=null,this.groups=r.group?r.group.split(" "):[],this.attrs=Ii(r.attrs),this.defaultAttrs=Di(this.attrs),this.contentMatch=null,this.inlineContent=null,this.isBlock=!(r.inline||e=="text"),this.isText=e=="text";}get isInline(){return !this.isBlock}get isTextblock(){return this.isBlock&&this.inlineContent}get isLeaf(){return this.contentMatch==He.empty}get isAtom(){return this.isLeaf||!!this.spec.atom}get whitespace(){return this.spec.whitespace||(this.spec.code?"pre":"normal")}hasRequiredAttrs(){for(let e in this.attrs)if(this.attrs[e].isRequired)return !0;return !1}compatibleContent(e){return this==e||this.contentMatch.compatible(e.contentMatch)}computeAttrs(e){return !e&&this.defaultAttrs?this.defaultAttrs:vi(this.attrs,e)}create(e=null,t,r){if(this.isText)throw new Error("NodeType.create can't construct text nodes");return new le(this,this.computeAttrs(e),b.from(t),A.setFrom(r))}createChecked(e=null,t,r){return t=b.from(t),this.checkContent(t),new le(this,this.computeAttrs(e),t,A.setFrom(r))}createAndFill(e=null,t,r){if(e=this.computeAttrs(e),t=b.from(t),t.size){let o=this.contentMatch.fillBefore(t);if(!o)return null;t=o.append(t);}let i=this.contentMatch.matchFragment(t),s=i&&i.fillBefore(b.empty,!0);return s?new le(this,e,t.append(s),A.setFrom(r)):null}validContent(e){let t=this.contentMatch.matchFragment(e);if(!t||!t.validEnd)return !1;for(let r=0;r<e.childCount;r++)if(!this.allowsMarks(e.child(r).marks))return !1;return !0}checkContent(e){if(!this.validContent(e))throw new RangeError(`Invalid content for node ${this.name}: ${e.toString().slice(0,50)}`)}allowsMarkType(e){return this.markSet==null||this.markSet.indexOf(e)>-1}allowsMarks(e){if(this.markSet==null)return !0;for(let t=0;t<e.length;t++)if(!this.allowsMarkType(e[t].type))return !1;return !0}allowedMarks(e){if(this.markSet==null)return e;let t;for(let r=0;r<e.length;r++)this.allowsMarkType(e[r].type)?t&&t.push(e[r]):t||(t=e.slice(0,r));return t?t.length?t:A.none:e}static compile(e,t){let r=Object.create(null);e.forEach((s,o)=>r[s]=new n(s,t,o));let i=t.spec.topNode||"doc";if(!r[i])throw new RangeError("Schema is missing its top node type ('"+i+"')");if(!r.text)throw new RangeError("Every schema needs a 'text' type");for(let s in r.text.attrs)throw new RangeError("The text node type should not have attributes");return r}},Fn=class{constructor(e){this.hasDefault=Object.prototype.hasOwnProperty.call(e,"default"),this.default=e.default;}get isRequired(){return !this.hasDefault}},kt=class n{constructor(e,t,r,i){this.name=e,this.rank=t,this.schema=r,this.spec=i,this.attrs=Ii(i.attrs),this.excluded=null;let s=Di(this.attrs);this.instance=s?new A(this,s):null;}create(e=null){return !e&&this.instance?this.instance:new A(this,vi(this.attrs,e))}static compile(e,t){let r=Object.create(null),i=0;return e.forEach((s,o)=>r[s]=new n(s,i++,t,o)),r}removeFromSet(e){for(var t=0;t<e.length;t++)e[t].type==this&&(e=e.slice(0,t).concat(e.slice(t+1)),t--);return e}isInSet(e){for(let t=0;t<e.length;t++)if(e[t].type==this)return e[t]}excludes(e){return this.excluded.indexOf(e)>-1}},jt=class{constructor(e){this.cached=Object.create(null);let t=this.spec={};for(let i in e)t[i]=e[i];t.nodes=An.from(e.nodes),t.marks=An.from(e.marks||{}),this.nodes=Wt.compile(this.spec.nodes,this),this.marks=kt.compile(this.spec.marks,this);let r=Object.create(null);for(let i in this.nodes){if(i in this.marks)throw new RangeError(i+" can not be both a node and a mark");let s=this.nodes[i],o=s.spec.content||"",l=s.spec.marks;s.contentMatch=r[o]||(r[o]=He.parse(o,this.nodes)),s.inlineContent=s.contentMatch.inlineContent,s.markSet=l=="_"?null:l?gi(this,l.split(" ")):l==""||!s.inlineContent?[]:null;}for(let i in this.marks){let s=this.marks[i],o=s.spec.excludes;s.excluded=o==null?[s]:o==""?[]:gi(this,o.split(" "));}this.nodeFromJSON=this.nodeFromJSON.bind(this),this.markFromJSON=this.markFromJSON.bind(this),this.topNodeType=this.nodes[this.spec.topNode||"doc"],this.cached.wrappings=Object.create(null);}node(e,t=null,r,i){if(typeof e=="string")e=this.nodeType(e);else if(e instanceof Wt){if(e.schema!=this)throw new RangeError("Node type from different schema used ("+e.name+")")}else throw new RangeError("Invalid node type: "+e);return e.createChecked(t,r,i)}text(e,t){let r=this.nodes.text;return new Bn(r,r.defaultAttrs,e,A.setFrom(t))}mark(e,t){return typeof e=="string"&&(e=this.marks[e]),e.create(t)}nodeFromJSON(e){return le.fromJSON(this,e)}markFromJSON(e){return A.fromJSON(this,e)}nodeType(e){let t=this.nodes[e];if(!t)throw new RangeError("Unknown node type: "+e);return t}};function gi(n,e){let t=[];for(let r=0;r<e.length;r++){let i=e[r],s=n.marks[i],o=s;if(s)t.push(s);else for(let l in n.marks){let a=n.marks[l];(i=="_"||a.spec.group&&a.spec.group.split(" ").indexOf(i)>-1)&&t.push(o=a);}if(!o)throw new SyntaxError("Unknown mark type: '"+e[r]+"'")}return t}var Je=class n{constructor(e,t){this.schema=e,this.rules=t,this.tags=[],this.styles=[],t.forEach(r=>{r.tag?this.tags.push(r):r.style&&this.styles.push(r);}),this.normalizeLists=!this.tags.some(r=>{if(!/^(ul|ol)\b/.test(r.tag)||!r.node)return !1;let i=e.nodes[r.node];return i.contentMatch.matchType(i)});}parse(e,t={}){let r=new Ut(this,t,!1);return r.addAll(e,t.from,t.to),r.finish()}parseSlice(e,t={}){let r=new Ut(this,t,!0);return r.addAll(e,t.from,t.to),k.maxOpen(r.finish())}matchTag(e,t,r){for(let i=r?this.tags.indexOf(r)+1:0;i<this.tags.length;i++){let s=this.tags[i];if(Fl(e,s.tag)&&(s.namespace===void 0||e.namespaceURI==s.namespace)&&(!s.context||t.matchesContext(s.context))){if(s.getAttrs){let o=s.getAttrs(e);if(o===!1)continue;s.attrs=o||void 0;}return s}}}matchStyle(e,t,r,i){for(let s=i?this.styles.indexOf(i)+1:0;s<this.styles.length;s++){let o=this.styles[s],l=o.style;if(!(l.indexOf(e)!=0||o.context&&!r.matchesContext(o.context)||l.length>e.length&&(l.charCodeAt(e.length)!=61||l.slice(e.length+1)!=t))){if(o.getAttrs){let a=o.getAttrs(t);if(a===!1)continue;o.attrs=a||void 0;}return o}}}static schemaRules(e){let t=[];function r(i){let s=i.priority==null?50:i.priority,o=0;for(;o<t.length;o++){let l=t[o];if((l.priority==null?50:l.priority)<s)break}t.splice(o,0,i);}for(let i in e.marks){let s=e.marks[i].spec.parseDOM;s&&s.forEach(o=>{r(o=bi(o)),o.mark||o.ignore||o.clearMark||(o.mark=i);});}for(let i in e.nodes){let s=e.nodes[i].spec.parseDOM;s&&s.forEach(o=>{r(o=bi(o)),o.node||o.ignore||o.mark||(o.node=i);});}return t}static fromSchema(e){return e.cached.domParser||(e.cached.domParser=new n(e,n.schemaRules(e)))}},Ri={address:!0,article:!0,aside:!0,blockquote:!0,canvas:!0,dd:!0,div:!0,dl:!0,fieldset:!0,figcaption:!0,figure:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,li:!0,noscript:!0,ol:!0,output:!0,p:!0,pre:!0,section:!0,table:!0,tfoot:!0,ul:!0},Bl={head:!0,noscript:!0,object:!0,script:!0,style:!0,title:!0},Pi={ol:!0,ul:!0},Kt=1,qt=2,bt=4;function yi(n,e,t){return e!=null?(e?Kt:0)|(e==="full"?qt:0):n&&n.whitespace=="pre"?Kt|qt:t&~bt}var nt=class{constructor(e,t,r,i,s,o,l){this.type=e,this.attrs=t,this.marks=r,this.pendingMarks=i,this.solid=s,this.options=l,this.content=[],this.activeMarks=A.none,this.stashMarks=[],this.match=o||(l&bt?null:e.contentMatch);}findWrapping(e){if(!this.match){if(!this.type)return [];let t=this.type.contentMatch.fillBefore(b.from(e));if(t)this.match=this.type.contentMatch.matchFragment(t);else {let r=this.type.contentMatch,i;return (i=r.findWrapping(e.type))?(this.match=r,i):null}}return this.match.findWrapping(e.type)}finish(e){if(!(this.options&Kt)){let r=this.content[this.content.length-1],i;if(r&&r.isText&&(i=/[ \t\r\n\u000c]+$/.exec(r.text))){let s=r;r.text.length==i[0].length?this.content.pop():this.content[this.content.length-1]=s.withText(s.text.slice(0,s.text.length-i[0].length));}}let t=b.from(this.content);return !e&&this.match&&(t=t.append(this.match.fillBefore(b.empty,!0))),this.type?this.type.create(this.attrs,t,this.marks):t}popFromStashMark(e){for(let t=this.stashMarks.length-1;t>=0;t--)if(e.eq(this.stashMarks[t]))return this.stashMarks.splice(t,1)[0]}applyPending(e){for(let t=0,r=this.pendingMarks;t<r.length;t++){let i=r[t];(this.type?this.type.allowsMarkType(i.type):Vl(i.type,e))&&!i.isInSet(this.activeMarks)&&(this.activeMarks=i.addToSet(this.activeMarks),this.pendingMarks=i.removeFromSet(this.pendingMarks));}}inlineContext(e){return this.type?this.type.inlineContent:this.content.length?this.content[0].isInline:e.parentNode&&!Ri.hasOwnProperty(e.parentNode.nodeName.toLowerCase())}},Ut=class{constructor(e,t,r){this.parser=e,this.options=t,this.isOpen=r,this.open=0;let i=t.topNode,s,o=yi(null,t.preserveWhitespace,0)|(r?bt:0);i?s=new nt(i.type,i.attrs,A.none,A.none,!0,t.topMatch||i.type.contentMatch,o):r?s=new nt(null,null,A.none,A.none,!0,null,o):s=new nt(e.schema.topNodeType,null,A.none,A.none,!0,null,o),this.nodes=[s],this.find=t.findPositions,this.needsBlock=!1;}get top(){return this.nodes[this.open]}addDOM(e){if(e.nodeType==3)this.addTextNode(e);else if(e.nodeType==1){let t=e.getAttribute("style");if(!t)this.addElement(e);else {let r=this.readStyles(zl(t));if(!r)return;let[i,s]=r,o=this.top;for(let l=0;l<s.length;l++)this.removePendingMark(s[l],o);for(let l=0;l<i.length;l++)this.addPendingMark(i[l]);this.addElement(e);for(let l=0;l<i.length;l++)this.removePendingMark(i[l],o);for(let l=0;l<s.length;l++)this.addPendingMark(s[l]);}}}addTextNode(e){let t=e.nodeValue,r=this.top;if(r.options&qt||r.inlineContext(e)||/[^ \t\r\n\u000c]/.test(t)){if(r.options&Kt)r.options&qt?t=t.replace(/\r\n?/g,`
`):t=t.replace(/\r?\n|\r/g," ");else if(t=t.replace(/[ \t\r\n\u000c]+/g," "),/^[ \t\r\n\u000c]/.test(t)&&this.open==this.nodes.length-1){let i=r.content[r.content.length-1],s=e.previousSibling;(!i||s&&s.nodeName=="BR"||i.isText&&/[ \t\r\n\u000c]$/.test(i.text))&&(t=t.slice(1));}t&&this.insertNode(this.parser.schema.text(t)),this.findInText(e);}else this.findInside(e);}addElement(e,t){let r=e.nodeName.toLowerCase(),i;Pi.hasOwnProperty(r)&&this.parser.normalizeLists&&Ll(e);let s=this.options.ruleFromNode&&this.options.ruleFromNode(e)||(i=this.parser.matchTag(e,this,t));if(s?s.ignore:Bl.hasOwnProperty(r))this.findInside(e),this.ignoreFallback(e);else if(!s||s.skip||s.closeParent){s&&s.closeParent?this.open=Math.max(0,this.open-1):s&&s.skip.nodeType&&(e=s.skip);let o,l=this.top,a=this.needsBlock;if(Ri.hasOwnProperty(r))l.content.length&&l.content[0].isInline&&this.open&&(this.open--,l=this.top),o=!0,l.type||(this.needsBlock=!0);else if(!e.firstChild){this.leafFallback(e);return}this.addAll(e),o&&this.sync(l),this.needsBlock=a;}else this.addElementByRule(e,s,s.consuming===!1?i:void 0);}leafFallback(e){e.nodeName=="BR"&&this.top.type&&this.top.type.inlineContent&&this.addTextNode(e.ownerDocument.createTextNode(`
`));}ignoreFallback(e){e.nodeName=="BR"&&(!this.top.type||!this.top.type.inlineContent)&&this.findPlace(this.parser.schema.text("-"));}readStyles(e){let t=A.none,r=A.none;for(let i=0;i<e.length;i+=2)for(let s=void 0;;){let o=this.parser.matchStyle(e[i],e[i+1],this,s);if(!o)break;if(o.ignore)return null;if(o.clearMark?this.top.pendingMarks.concat(this.top.activeMarks).forEach(l=>{o.clearMark(l)&&(r=l.addToSet(r));}):t=this.parser.schema.marks[o.mark].create(o.attrs).addToSet(t),o.consuming===!1)s=o;else break}return [t,r]}addElementByRule(e,t,r){let i,s,o;t.node?(s=this.parser.schema.nodes[t.node],s.isLeaf?this.insertNode(s.create(t.attrs))||this.leafFallback(e):i=this.enter(s,t.attrs||null,t.preserveWhitespace)):(o=this.parser.schema.marks[t.mark].create(t.attrs),this.addPendingMark(o));let l=this.top;if(s&&s.isLeaf)this.findInside(e);else if(r)this.addElement(e,r);else if(t.getContent)this.findInside(e),t.getContent(e,this.parser.schema).forEach(a=>this.insertNode(a));else {let a=e;typeof t.contentElement=="string"?a=e.querySelector(t.contentElement):typeof t.contentElement=="function"?a=t.contentElement(e):t.contentElement&&(a=t.contentElement),this.findAround(e,a,!0),this.addAll(a);}i&&this.sync(l)&&this.open--,o&&this.removePendingMark(o,l);}addAll(e,t,r){let i=t||0;for(let s=t?e.childNodes[t]:e.firstChild,o=r==null?null:e.childNodes[r];s!=o;s=s.nextSibling,++i)this.findAtPoint(e,i),this.addDOM(s);this.findAtPoint(e,i);}findPlace(e){let t,r;for(let i=this.open;i>=0;i--){let s=this.nodes[i],o=s.findWrapping(e);if(o&&(!t||t.length>o.length)&&(t=o,r=s,!o.length)||s.solid)break}if(!t)return !1;this.sync(r);for(let i=0;i<t.length;i++)this.enterInner(t[i],null,!1);return !0}insertNode(e){if(e.isInline&&this.needsBlock&&!this.top.type){let t=this.textblockFromContext();t&&this.enterInner(t);}if(this.findPlace(e)){this.closeExtra();let t=this.top;t.applyPending(e.type),t.match&&(t.match=t.match.matchType(e.type));let r=t.activeMarks;for(let i=0;i<e.marks.length;i++)(!t.type||t.type.allowsMarkType(e.marks[i].type))&&(r=e.marks[i].addToSet(r));return t.content.push(e.mark(r)),!0}return !1}enter(e,t,r){let i=this.findPlace(e.create(t));return i&&this.enterInner(e,t,!0,r),i}enterInner(e,t=null,r=!1,i){this.closeExtra();let s=this.top;s.applyPending(e),s.match=s.match&&s.match.matchType(e);let o=yi(e,i,s.options);s.options&bt&&s.content.length==0&&(o|=bt),this.nodes.push(new nt(e,t,s.activeMarks,s.pendingMarks,r,null,o)),this.open++;}closeExtra(e=!1){let t=this.nodes.length-1;if(t>this.open){for(;t>this.open;t--)this.nodes[t-1].content.push(this.nodes[t].finish(e));this.nodes.length=this.open+1;}}finish(){return this.open=0,this.closeExtra(this.isOpen),this.nodes[0].finish(this.isOpen||this.options.topOpen)}sync(e){for(let t=this.open;t>=0;t--)if(this.nodes[t]==e)return this.open=t,!0;return !1}get currentPos(){this.closeExtra();let e=0;for(let t=this.open;t>=0;t--){let r=this.nodes[t].content;for(let i=r.length-1;i>=0;i--)e+=r[i].nodeSize;t&&e++;}return e}findAtPoint(e,t){if(this.find)for(let r=0;r<this.find.length;r++)this.find[r].node==e&&this.find[r].offset==t&&(this.find[r].pos=this.currentPos);}findInside(e){if(this.find)for(let t=0;t<this.find.length;t++)this.find[t].pos==null&&e.nodeType==1&&e.contains(this.find[t].node)&&(this.find[t].pos=this.currentPos);}findAround(e,t,r){if(e!=t&&this.find)for(let i=0;i<this.find.length;i++)this.find[i].pos==null&&e.nodeType==1&&e.contains(this.find[i].node)&&t.compareDocumentPosition(this.find[i].node)&(r?2:4)&&(this.find[i].pos=this.currentPos);}findInText(e){if(this.find)for(let t=0;t<this.find.length;t++)this.find[t].node==e&&(this.find[t].pos=this.currentPos-(e.nodeValue.length-this.find[t].offset));}matchesContext(e){if(e.indexOf("|")>-1)return e.split(/\s*\|\s*/).some(this.matchesContext,this);let t=e.split("/"),r=this.options.context,i=!this.isOpen&&(!r||r.parent.type==this.nodes[0].type),s=-(r?r.depth+1:0)+(i?0:1),o=(l,a)=>{for(;l>=0;l--){let c=t[l];if(c==""){if(l==t.length-1||l==0)continue;for(;a>=s;a--)if(o(l-1,a))return !0;return !1}else {let d=a>0||a==0&&i?this.nodes[a].type:r&&a>=s?r.node(a-s).type:null;if(!d||d.name!=c&&d.groups.indexOf(c)==-1)return !1;a--;}}return !0};return o(t.length-1,this.open)}textblockFromContext(){let e=this.options.context;if(e)for(let t=e.depth;t>=0;t--){let r=e.node(t).contentMatchAt(e.indexAfter(t)).defaultType;if(r&&r.isTextblock&&r.defaultAttrs)return r}for(let t in this.parser.schema.nodes){let r=this.parser.schema.nodes[t];if(r.isTextblock&&r.defaultAttrs)return r}}addPendingMark(e){let t=$l(e,this.top.pendingMarks);t&&this.top.stashMarks.push(t),this.top.pendingMarks=e.addToSet(this.top.pendingMarks);}removePendingMark(e,t){for(let r=this.open;r>=0;r--){let i=this.nodes[r];if(i.pendingMarks.lastIndexOf(e)>-1)i.pendingMarks=e.removeFromSet(i.pendingMarks);else {i.activeMarks=e.removeFromSet(i.activeMarks);let o=i.popFromStashMark(e);o&&i.type&&i.type.allowsMarkType(o.type)&&(i.activeMarks=o.addToSet(i.activeMarks));}if(i==t)break}}};function Ll(n){for(let e=n.firstChild,t=null;e;e=e.nextSibling){let r=e.nodeType==1?e.nodeName.toLowerCase():null;r&&Pi.hasOwnProperty(r)&&t?(t.appendChild(e),e=t):r=="li"?t=e:r&&(t=null);}}function Fl(n,e){return (n.matches||n.msMatchesSelector||n.webkitMatchesSelector||n.mozMatchesSelector).call(n,e)}function zl(n){let e=/\s*([\w-]+)\s*:\s*([^;]+)/g,t,r=[];for(;t=e.exec(n);)r.push(t[1],t[2].trim());return r}function bi(n){let e={};for(let t in n)e[t]=n[t];return e}function Vl(n,e){let t=e.schema.nodes;for(let r in t){let i=t[r];if(!i.allowsMarkType(n))continue;let s=[],o=l=>{s.push(l);for(let a=0;a<l.edgeCount;a++){let{type:c,next:d}=l.edge(a);if(c==e||s.indexOf(d)<0&&o(d))return !0}};if(o(i.contentMatch))return !0}}function $l(n,e){for(let t=0;t<e.length;t++)if(n.eq(e[t]))return e[t]}var ke=class n{constructor(e,t){this.nodes=e,this.marks=t;}serializeFragment(e,t={},r){r||(r=Rn(t).createDocumentFragment());let i=r,s=[];return e.forEach(o=>{if(s.length||o.marks.length){let l=0,a=0;for(;l<s.length&&a<o.marks.length;){let c=o.marks[a];if(!this.marks[c.type.name]){a++;continue}if(!c.eq(s[l][0])||c.type.spec.spanning===!1)break;l++,a++;}for(;l<s.length;)i=s.pop()[1];for(;a<o.marks.length;){let c=o.marks[a++],d=this.serializeMark(c,o.isInline,t);d&&(s.push([c,i]),i.appendChild(d.dom),i=d.contentDOM||d.dom);}}i.appendChild(this.serializeNodeInner(o,t));}),r}serializeNodeInner(e,t){let{dom:r,contentDOM:i}=n.renderSpec(Rn(t),this.nodes[e.type.name](e));if(i){if(e.isLeaf)throw new RangeError("Content hole not allowed in a leaf node spec");this.serializeFragment(e.content,t,i);}return r}serializeNode(e,t={}){let r=this.serializeNodeInner(e,t);for(let i=e.marks.length-1;i>=0;i--){let s=this.serializeMark(e.marks[i],e.isInline,t);s&&((s.contentDOM||s.dom).appendChild(r),r=s.dom);}return r}serializeMark(e,t,r={}){let i=this.marks[e.type.name];return i&&n.renderSpec(Rn(r),i(e,t))}static renderSpec(e,t,r=null){if(typeof t=="string")return {dom:e.createTextNode(t)};if(t.nodeType!=null)return {dom:t};if(t.dom&&t.dom.nodeType!=null)return t;let i=t[0],s=i.indexOf(" ");s>0&&(r=i.slice(0,s),i=i.slice(s+1));let o,l=r?e.createElementNS(r,i):e.createElement(i),a=t[1],c=1;if(a&&typeof a=="object"&&a.nodeType==null&&!Array.isArray(a)){c=2;for(let d in a)if(a[d]!=null){let u=d.indexOf(" ");u>0?l.setAttributeNS(d.slice(0,u),d.slice(u+1),a[d]):l.setAttribute(d,a[d]);}}for(let d=c;d<t.length;d++){let u=t[d];if(u===0){if(d<t.length-1||d>c)throw new RangeError("Content hole must be the only child of its parent node");return {dom:l,contentDOM:l}}else {let{dom:f,contentDOM:h}=n.renderSpec(e,u,r);if(l.appendChild(f),h){if(o)throw new RangeError("Multiple content holes");o=h;}}}return {dom:l,contentDOM:o}}static fromSchema(e){return e.cached.domSerializer||(e.cached.domSerializer=new n(this.nodesFromSchema(e),this.marksFromSchema(e)))}static nodesFromSchema(e){let t=ki(e.nodes);return t.text||(t.text=r=>r.text),t}static marksFromSchema(e){return ki(e.marks)}};function ki(n){let e={};for(let t in n){let r=n[t].spec.toDOM;r&&(e[t]=r);}return e}function Rn(n){return n.document||window.document}var Fi=65535,zi=Math.pow(2,16);function Hl(n,e){return n+e*zi}function Bi(n){return n&Fi}function Jl(n){return (n-(n&Fi))/zi}var Vi=1,$i=2,_t=4,Hi=8,Mt=class{constructor(e,t,r){this.pos=e,this.delInfo=t,this.recover=r;}get deleted(){return (this.delInfo&Hi)>0}get deletedBefore(){return (this.delInfo&(Vi|_t))>0}get deletedAfter(){return (this.delInfo&($i|_t))>0}get deletedAcross(){return (this.delInfo&_t)>0}},Oe=class n{constructor(e,t=!1){if(this.ranges=e,this.inverted=t,!e.length&&n.empty)return n.empty}recover(e){let t=0,r=Bi(e);if(!this.inverted)for(let i=0;i<r;i++)t+=this.ranges[i*3+2]-this.ranges[i*3+1];return this.ranges[r*3]+t+Jl(e)}mapResult(e,t=1){return this._map(e,t,!1)}map(e,t=1){return this._map(e,t,!0)}_map(e,t,r){let i=0,s=this.inverted?2:1,o=this.inverted?1:2;for(let l=0;l<this.ranges.length;l+=3){let a=this.ranges[l]-(this.inverted?i:0);if(a>e)break;let c=this.ranges[l+s],d=this.ranges[l+o],u=a+c;if(e<=u){let f=c?e==a?-1:e==u?1:t:t,h=a+i+(f<0?0:d);if(r)return h;let p=e==(t<0?a:u)?null:Hl(l/3,e-a),m=e==a?$i:e==u?Vi:_t;return (t<0?e!=a:e!=u)&&(m|=Hi),new Mt(h,m,p)}i+=d-c;}return r?e+i:new Mt(e+i,0,null)}touches(e,t){let r=0,i=Bi(t),s=this.inverted?2:1,o=this.inverted?1:2;for(let l=0;l<this.ranges.length;l+=3){let a=this.ranges[l]-(this.inverted?r:0);if(a>e)break;let c=this.ranges[l+s],d=a+c;if(e<=d&&l==i*3)return !0;r+=this.ranges[l+o]-c;}return !1}forEach(e){let t=this.inverted?2:1,r=this.inverted?1:2;for(let i=0,s=0;i<this.ranges.length;i+=3){let o=this.ranges[i],l=o-(this.inverted?s:0),a=o+(this.inverted?0:s),c=this.ranges[i+t],d=this.ranges[i+r];e(l,l+c,a,a+d),s+=d-c;}}invert(){return new n(this.ranges,!this.inverted)}toString(){return (this.inverted?"-":"")+JSON.stringify(this.ranges)}static offset(e){return e==0?n.empty:new n(e<0?[0,-e,0]:[0,0,e])}};Oe.empty=new Oe([]);var Ct=class n{constructor(e=[],t,r=0,i=e.length){this.maps=e,this.mirror=t,this.from=r,this.to=i;}slice(e=0,t=this.maps.length){return new n(this.maps,this.mirror,e,t)}copy(){return new n(this.maps.slice(),this.mirror&&this.mirror.slice(),this.from,this.to)}appendMap(e,t){this.to=this.maps.push(e),t!=null&&this.setMirror(this.maps.length-1,t);}appendMapping(e){for(let t=0,r=this.maps.length;t<e.maps.length;t++){let i=e.getMirror(t);this.appendMap(e.maps[t],i!=null&&i<t?r+i:void 0);}}getMirror(e){if(this.mirror){for(let t=0;t<this.mirror.length;t++)if(this.mirror[t]==e)return this.mirror[t+(t%2?-1:1)]}}setMirror(e,t){this.mirror||(this.mirror=[]),this.mirror.push(e,t);}appendMappingInverted(e){for(let t=e.maps.length-1,r=this.maps.length+e.maps.length;t>=0;t--){let i=e.getMirror(t);this.appendMap(e.maps[t].invert(),i!=null&&i>t?r-i-1:void 0);}}invert(){let e=new n;return e.appendMappingInverted(this),e}map(e,t=1){if(this.mirror)return this._map(e,t,!0);for(let r=this.from;r<this.to;r++)e=this.maps[r].map(e,t);return e}mapResult(e,t=1){return this._map(e,t,!1)}_map(e,t,r){let i=0;for(let s=this.from;s<this.to;s++){let o=this.maps[s],l=o.mapResult(e,t);if(l.recover!=null){let a=this.getMirror(s);if(a!=null&&a>s&&a<this.to){s=a,e=this.maps[a].recover(l.recover);continue}}i|=l.delInfo,e=l.pos;}return r?e:new Mt(e,i,null)}},zn=Object.create(null),H=class{getMap(){return Oe.empty}merge(e){return null}static fromJSON(e,t){if(!t||!t.stepType)throw new RangeError("Invalid input for Step.fromJSON");let r=zn[t.stepType];if(!r)throw new RangeError(`No step type ${t.stepType} defined`);return r.fromJSON(e,t)}static jsonID(e,t){if(e in zn)throw new RangeError("Duplicate use of step JSON ID "+e);return zn[e]=t,t.prototype.jsonID=e,t}},$=class n{constructor(e,t){this.doc=e,this.failed=t;}static ok(e){return new n(e,null)}static fail(e){return new n(null,e)}static fromReplace(e,t,r,i){try{return n.ok(e.replace(t,r,i))}catch(s){if(s instanceof Ve)return n.fail(s.message);throw s}}};function Wn(n,e,t){let r=[];for(let i=0;i<n.childCount;i++){let s=n.child(i);s.content.size&&(s=s.copy(Wn(s.content,e,s))),s.isInline&&(s=e(s,t,i)),r.push(s);}return b.fromArray(r)}var wt=class n extends H{constructor(e,t,r){super(),this.from=e,this.to=t,this.mark=r;}apply(e){let t=e.slice(this.from,this.to),r=e.resolve(this.from),i=r.node(r.sharedDepth(this.to)),s=new k(Wn(t.content,(o,l)=>!o.isAtom||!l.type.allowsMarkType(this.mark.type)?o:o.mark(this.mark.addToSet(o.marks)),i),t.openStart,t.openEnd);return $.fromReplace(e,this.from,this.to,s)}invert(){return new We(this.from,this.to,this.mark)}map(e){let t=e.mapResult(this.from,1),r=e.mapResult(this.to,-1);return t.deleted&&r.deleted||t.pos>=r.pos?null:new n(t.pos,r.pos,this.mark)}merge(e){return e instanceof n&&e.mark.eq(this.mark)&&this.from<=e.to&&this.to>=e.from?new n(Math.min(this.from,e.from),Math.max(this.to,e.to),this.mark):null}toJSON(){return {stepType:"addMark",mark:this.mark.toJSON(),from:this.from,to:this.to}}static fromJSON(e,t){if(typeof t.from!="number"||typeof t.to!="number")throw new RangeError("Invalid input for AddMarkStep.fromJSON");return new n(t.from,t.to,e.markFromJSON(t.mark))}};H.jsonID("addMark",wt);var We=class n extends H{constructor(e,t,r){super(),this.from=e,this.to=t,this.mark=r;}apply(e){let t=e.slice(this.from,this.to),r=new k(Wn(t.content,i=>i.mark(this.mark.removeFromSet(i.marks)),e),t.openStart,t.openEnd);return $.fromReplace(e,this.from,this.to,r)}invert(){return new wt(this.from,this.to,this.mark)}map(e){let t=e.mapResult(this.from,1),r=e.mapResult(this.to,-1);return t.deleted&&r.deleted||t.pos>=r.pos?null:new n(t.pos,r.pos,this.mark)}merge(e){return e instanceof n&&e.mark.eq(this.mark)&&this.from<=e.to&&this.to>=e.from?new n(Math.min(this.from,e.from),Math.max(this.to,e.to),this.mark):null}toJSON(){return {stepType:"removeMark",mark:this.mark.toJSON(),from:this.from,to:this.to}}static fromJSON(e,t){if(typeof t.from!="number"||typeof t.to!="number")throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");return new n(t.from,t.to,e.markFromJSON(t.mark))}};H.jsonID("removeMark",We);var Ot=class n extends H{constructor(e,t){super(),this.pos=e,this.mark=t;}apply(e){let t=e.nodeAt(this.pos);if(!t)return $.fail("No node at mark step's position");let r=t.type.create(t.attrs,null,this.mark.addToSet(t.marks));return $.fromReplace(e,this.pos,this.pos+1,new k(b.from(r),0,t.isLeaf?0:1))}invert(e){let t=e.nodeAt(this.pos);if(t){let r=this.mark.addToSet(t.marks);if(r.length==t.marks.length){for(let i=0;i<t.marks.length;i++)if(!t.marks[i].isInSet(r))return new n(this.pos,t.marks[i]);return new n(this.pos,this.mark)}}return new Tt(this.pos,this.mark)}map(e){let t=e.mapResult(this.pos,1);return t.deletedAfter?null:new n(t.pos,this.mark)}toJSON(){return {stepType:"addNodeMark",pos:this.pos,mark:this.mark.toJSON()}}static fromJSON(e,t){if(typeof t.pos!="number")throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");return new n(t.pos,e.markFromJSON(t.mark))}};H.jsonID("addNodeMark",Ot);var Tt=class n extends H{constructor(e,t){super(),this.pos=e,this.mark=t;}apply(e){let t=e.nodeAt(this.pos);if(!t)return $.fail("No node at mark step's position");let r=t.type.create(t.attrs,null,this.mark.removeFromSet(t.marks));return $.fromReplace(e,this.pos,this.pos+1,new k(b.from(r),0,t.isLeaf?0:1))}invert(e){let t=e.nodeAt(this.pos);return !t||!this.mark.isInSet(t.marks)?this:new Ot(this.pos,this.mark)}map(e){let t=e.mapResult(this.pos,1);return t.deletedAfter?null:new n(t.pos,this.mark)}toJSON(){return {stepType:"removeNodeMark",pos:this.pos,mark:this.mark.toJSON()}}static fromJSON(e,t){if(typeof t.pos!="number")throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");return new n(t.pos,e.markFromJSON(t.mark))}};H.jsonID("removeNodeMark",Tt);var X=class n extends H{constructor(e,t,r,i=!1){super(),this.from=e,this.to=t,this.slice=r,this.structure=i;}apply(e){return this.structure&&Hn(e,this.from,this.to)?$.fail("Structure replace would overwrite content"):$.fromReplace(e,this.from,this.to,this.slice)}getMap(){return new Oe([this.from,this.to-this.from,this.slice.size])}invert(e){return new n(this.from,this.from+this.slice.size,e.slice(this.from,this.to))}map(e){let t=e.mapResult(this.from,1),r=e.mapResult(this.to,-1);return t.deletedAcross&&r.deletedAcross?null:new n(t.pos,Math.max(t.pos,r.pos),this.slice)}merge(e){if(!(e instanceof n)||e.structure||this.structure)return null;if(this.from+this.slice.size==e.from&&!this.slice.openEnd&&!e.slice.openStart){let t=this.slice.size+e.slice.size==0?k.empty:new k(this.slice.content.append(e.slice.content),this.slice.openStart,e.slice.openEnd);return new n(this.from,this.to+(e.to-e.from),t,this.structure)}else if(e.to==this.from&&!this.slice.openStart&&!e.slice.openEnd){let t=this.slice.size+e.slice.size==0?k.empty:new k(e.slice.content.append(this.slice.content),e.slice.openStart,this.slice.openEnd);return new n(e.from,this.to,t,this.structure)}else return null}toJSON(){let e={stepType:"replace",from:this.from,to:this.to};return this.slice.size&&(e.slice=this.slice.toJSON()),this.structure&&(e.structure=!0),e}static fromJSON(e,t){if(typeof t.from!="number"||typeof t.to!="number")throw new RangeError("Invalid input for ReplaceStep.fromJSON");return new n(t.from,t.to,k.fromJSON(e,t.slice),!!t.structure)}};H.jsonID("replace",X);var R=class n extends H{constructor(e,t,r,i,s,o,l=!1){super(),this.from=e,this.to=t,this.gapFrom=r,this.gapTo=i,this.slice=s,this.insert=o,this.structure=l;}apply(e){if(this.structure&&(Hn(e,this.from,this.gapFrom)||Hn(e,this.gapTo,this.to)))return $.fail("Structure gap-replace would overwrite content");let t=e.slice(this.gapFrom,this.gapTo);if(t.openStart||t.openEnd)return $.fail("Gap is not a flat range");let r=this.slice.insertAt(this.insert,t.content);return r?$.fromReplace(e,this.from,this.to,r):$.fail("Content does not fit in gap")}getMap(){return new Oe([this.from,this.gapFrom-this.from,this.insert,this.gapTo,this.to-this.gapTo,this.slice.size-this.insert])}invert(e){let t=this.gapTo-this.gapFrom;return new n(this.from,this.from+this.slice.size+t,this.from+this.insert,this.from+this.insert+t,e.slice(this.from,this.to).removeBetween(this.gapFrom-this.from,this.gapTo-this.from),this.gapFrom-this.from,this.structure)}map(e){let t=e.mapResult(this.from,1),r=e.mapResult(this.to,-1),i=e.map(this.gapFrom,-1),s=e.map(this.gapTo,1);return t.deletedAcross&&r.deletedAcross||i<t.pos||s>r.pos?null:new n(t.pos,r.pos,i,s,this.slice,this.insert,this.structure)}toJSON(){let e={stepType:"replaceAround",from:this.from,to:this.to,gapFrom:this.gapFrom,gapTo:this.gapTo,insert:this.insert};return this.slice.size&&(e.slice=this.slice.toJSON()),this.structure&&(e.structure=!0),e}static fromJSON(e,t){if(typeof t.from!="number"||typeof t.to!="number"||typeof t.gapFrom!="number"||typeof t.gapTo!="number"||typeof t.insert!="number")throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");return new n(t.from,t.to,t.gapFrom,t.gapTo,k.fromJSON(e,t.slice),t.insert,!!t.structure)}};H.jsonID("replaceAround",R);function Hn(n,e,t){let r=n.resolve(e),i=t-e,s=r.depth;for(;i>0&&s>0&&r.indexAfter(s)==r.node(s).childCount;)s--,i--;if(i>0){let o=r.node(s).maybeChild(r.indexAfter(s));for(;i>0;){if(!o||o.isLeaf)return !0;o=o.firstChild,i--;}}return !1}function Wl(n,e,t,r){let i=[],s=[],o,l;n.doc.nodesBetween(e,t,(a,c,d)=>{if(!a.isInline)return;let u=a.marks;if(!r.isInSet(u)&&d.type.allowsMarkType(r.type)){let f=Math.max(c,e),h=Math.min(c+a.nodeSize,t),p=r.addToSet(u);for(let m=0;m<u.length;m++)u[m].isInSet(p)||(o&&o.to==f&&o.mark.eq(u[m])?o.to=h:i.push(o=new We(f,h,u[m])));l&&l.to==f?l.to=h:s.push(l=new wt(f,h,r));}}),i.forEach(a=>n.step(a)),s.forEach(a=>n.step(a));}function jl(n,e,t,r){let i=[],s=0;n.doc.nodesBetween(e,t,(o,l)=>{if(!o.isInline)return;s++;let a=null;if(r instanceof kt){let c=o.marks,d;for(;d=r.isInSet(c);)(a||(a=[])).push(d),c=d.removeFromSet(c);}else r?r.isInSet(o.marks)&&(a=[r]):a=o.marks;if(a&&a.length){let c=Math.min(l+o.nodeSize,t);for(let d=0;d<a.length;d++){let u=a[d],f;for(let h=0;h<i.length;h++){let p=i[h];p.step==s-1&&u.eq(i[h].style)&&(f=p);}f?(f.to=c,f.step=s):i.push({style:u,from:Math.max(l,e),to:c,step:s});}}}),i.forEach(o=>n.step(new We(o.from,o.to,o.style)));}function Kl(n,e,t,r=t.contentMatch){let i=n.doc.nodeAt(e),s=[],o=e+1;for(let l=0;l<i.childCount;l++){let a=i.child(l),c=o+a.nodeSize,d=r.matchType(a.type);if(!d)s.push(new X(o,c,k.empty));else {r=d;for(let u=0;u<a.marks.length;u++)t.allowsMarkType(a.marks[u].type)||n.step(new We(o,c,a.marks[u]));}o=c;}if(!r.validEnd){let l=r.fillBefore(b.empty,!0);n.replace(o,o,new k(l,0,0));}for(let l=s.length-1;l>=0;l--)n.step(s[l]);}function ql(n,e,t){return (e==0||n.canReplace(e,n.childCount))&&(t==n.childCount||n.canReplace(0,t))}function Se(n){let t=n.parent.content.cutByIndex(n.startIndex,n.endIndex);for(let r=n.depth;;--r){let i=n.$from.node(r),s=n.$from.index(r),o=n.$to.indexAfter(r);if(r<n.depth&&i.canReplace(s,o,t))return r;if(r==0||i.type.spec.isolating||!ql(i,s,o))break}return null}function Ul(n,e,t){let{$from:r,$to:i,depth:s}=e,o=r.before(s+1),l=i.after(s+1),a=o,c=l,d=b.empty,u=0;for(let p=s,m=!1;p>t;p--)m||r.index(p)>0?(m=!0,d=b.from(r.node(p).copy(d)),u++):a--;let f=b.empty,h=0;for(let p=s,m=!1;p>t;p--)m||i.after(p+1)<i.end(p)?(m=!0,f=b.from(i.node(p).copy(f)),h++):c++;n.step(new R(a,c,o,l,new k(d.append(f),u,h),d.size-u,!0));}function it(n,e,t=null,r=n){let i=_l(n,e),s=i&&Gl(r,e);return s?i.map(Li).concat({type:e,attrs:t}).concat(s.map(Li)):null}function Li(n){return {type:n,attrs:null}}function _l(n,e){let{parent:t,startIndex:r,endIndex:i}=n,s=t.contentMatchAt(r).findWrapping(e);if(!s)return null;let o=s.length?s[0]:e;return t.canReplaceWith(r,i,o)?s:null}function Gl(n,e){let{parent:t,startIndex:r,endIndex:i}=n,s=t.child(r),o=e.contentMatch.findWrapping(s.type);if(!o)return null;let a=(o.length?o[o.length-1]:e).contentMatch;for(let c=r;a&&c<i;c++)a=a.matchType(t.child(c).type);return !a||!a.validEnd?null:o}function Yl(n,e,t){let r=b.empty;for(let o=t.length-1;o>=0;o--){if(r.size){let l=t[o].type.contentMatch.matchFragment(r);if(!l||!l.validEnd)throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper")}r=b.from(t[o].type.create(t[o].attrs,r));}let i=e.start,s=e.end;n.step(new R(i,s,i,s,new k(r,0,0),t.length,!0));}function Xl(n,e,t,r,i){if(!r.isTextblock)throw new RangeError("Type given to setBlockType should be a textblock");let s=n.steps.length;n.doc.nodesBetween(e,t,(o,l)=>{if(o.isTextblock&&!o.hasMarkup(r,i)&&Zl(n.doc,n.mapping.slice(s).map(l),r)){n.clearIncompatible(n.mapping.slice(s).map(l,1),r);let a=n.mapping.slice(s),c=a.map(l,1),d=a.map(l+o.nodeSize,1);return n.step(new R(c,d,c+1,d-1,new k(b.from(r.create(i,null,o.marks)),0,0),1,!0)),!1}});}function Zl(n,e,t){let r=n.resolve(e),i=r.index();return r.parent.canReplaceWith(i,i+1,t)}function Ql(n,e,t,r,i){let s=n.doc.nodeAt(e);if(!s)throw new RangeError("No node at given position");t||(t=s.type);let o=t.create(r,null,i||s.marks);if(s.isLeaf)return n.replaceWith(e,e+s.nodeSize,o);if(!t.validContent(s.content))throw new RangeError("Invalid content for node type "+t.name);n.step(new R(e,e+s.nodeSize,e+1,e+s.nodeSize-1,new k(b.from(o),0,0),1,!0));}function ie(n,e,t=1,r){let i=n.resolve(e),s=i.depth-t,o=r&&r[r.length-1]||i.parent;if(s<0||i.parent.type.spec.isolating||!i.parent.canReplace(i.index(),i.parent.childCount)||!o.type.validContent(i.parent.content.cutByIndex(i.index(),i.parent.childCount)))return !1;for(let c=i.depth-1,d=t-2;c>s;c--,d--){let u=i.node(c),f=i.index(c);if(u.type.spec.isolating)return !1;let h=u.content.cutByIndex(f,u.childCount),p=r&&r[d+1];p&&(h=h.replaceChild(0,p.type.create(p.attrs)));let m=r&&r[d]||u;if(!u.canReplace(f+1,u.childCount)||!m.type.validContent(h))return !1}let l=i.indexAfter(s),a=r&&r[0];return i.node(s).canReplaceWith(l,l,a?a.type:i.node(s+1).type)}function ea(n,e,t=1,r){let i=n.doc.resolve(e),s=b.empty,o=b.empty;for(let l=i.depth,a=i.depth-t,c=t-1;l>a;l--,c--){s=b.from(i.node(l).copy(s));let d=r&&r[c];o=b.from(d?d.type.create(d.attrs,o):i.node(l).copy(o));}n.step(new X(e,e,new k(s.append(o),t,t),!0));}function ae(n,e){let t=n.resolve(e),r=t.index();return Ji(t.nodeBefore,t.nodeAfter)&&t.parent.canReplace(r,r+1)}function Ji(n,e){return !!(n&&e&&!n.isLeaf&&n.canAppend(e))}function st(n,e,t=-1){let r=n.resolve(e);for(let i=r.depth;;i--){let s,o,l=r.index(i);if(i==r.depth?(s=r.nodeBefore,o=r.nodeAfter):t>0?(s=r.node(i+1),l++,o=r.node(i).maybeChild(l)):(s=r.node(i).maybeChild(l-1),o=r.node(i+1)),s&&!s.isTextblock&&Ji(s,o)&&r.node(i).canReplace(l,l+1))return e;if(i==0)break;e=t<0?r.before(i):r.after(i);}}function ta(n,e,t){let r=new X(e-t,e+t,k.empty,!0);n.step(r);}function na(n,e,t){let r=n.resolve(e);if(r.parent.canReplaceWith(r.index(),r.index(),t))return e;if(r.parentOffset==0)for(let i=r.depth-1;i>=0;i--){let s=r.index(i);if(r.node(i).canReplaceWith(s,s,t))return r.before(i+1);if(s>0)return null}if(r.parentOffset==r.parent.content.size)for(let i=r.depth-1;i>=0;i--){let s=r.indexAfter(i);if(r.node(i).canReplaceWith(s,s,t))return r.after(i+1);if(s<r.node(i).childCount)return null}return null}function Yt(n,e,t){let r=n.resolve(e);if(!t.content.size)return e;let i=t.content;for(let s=0;s<t.openStart;s++)i=i.firstChild.content;for(let s=1;s<=(t.openStart==0&&t.size?2:1);s++)for(let o=r.depth;o>=0;o--){let l=o==r.depth?0:r.pos<=(r.start(o+1)+r.end(o+1))/2?-1:1,a=r.index(o)+(l>0?1:0),c=r.node(o),d=!1;if(s==1)d=c.canReplace(a,a,i);else {let u=c.contentMatchAt(a).findWrapping(i.firstChild.type);d=u&&c.canReplaceWith(a,a,u[0]);}if(d)return l==0?r.pos:l<0?r.before(o+1):r.after(o+1)}return null}function Xt(n,e,t=e,r=k.empty){if(e==t&&!r.size)return null;let i=n.resolve(e),s=n.resolve(t);return Wi(i,s,r)?new X(e,t,r):new Jn(i,s,r).fit()}function Wi(n,e,t){return !t.openStart&&!t.openEnd&&n.start()==e.start()&&n.parent.canReplace(n.index(),e.index(),t.content)}var Jn=class{constructor(e,t,r){this.$from=e,this.$to=t,this.unplaced=r,this.frontier=[],this.placed=b.empty;for(let i=0;i<=e.depth;i++){let s=e.node(i);this.frontier.push({type:s.type,match:s.contentMatchAt(e.indexAfter(i))});}for(let i=e.depth;i>0;i--)this.placed=b.from(e.node(i).copy(this.placed));}get depth(){return this.frontier.length-1}fit(){for(;this.unplaced.size;){let c=this.findFittable();c?this.placeNodes(c):this.openMore()||this.dropNode();}let e=this.mustMoveInline(),t=this.placed.size-this.depth-this.$from.depth,r=this.$from,i=this.close(e<0?this.$to:r.doc.resolve(e));if(!i)return null;let s=this.placed,o=r.depth,l=i.depth;for(;o&&l&&s.childCount==1;)s=s.firstChild.content,o--,l--;let a=new k(s,o,l);return e>-1?new R(r.pos,e,this.$to.pos,this.$to.end(),a,t):a.size||r.pos!=this.$to.pos?new X(r.pos,i.pos,a):null}findFittable(){let e=this.unplaced.openStart;for(let t=this.unplaced.content,r=0,i=this.unplaced.openEnd;r<e;r++){let s=t.firstChild;if(t.childCount>1&&(i=0),s.type.spec.isolating&&i<=r){e=r;break}t=s.content;}for(let t=1;t<=2;t++)for(let r=t==1?e:this.unplaced.openStart;r>=0;r--){let i,s=null;r?(s=Vn(this.unplaced.content,r-1).firstChild,i=s.content):i=this.unplaced.content;let o=i.firstChild;for(let l=this.depth;l>=0;l--){let{type:a,match:c}=this.frontier[l],d,u=null;if(t==1&&(o?c.matchType(o.type)||(u=c.fillBefore(b.from(o),!1)):s&&a.compatibleContent(s.type)))return {sliceDepth:r,frontierDepth:l,parent:s,inject:u};if(t==2&&o&&(d=c.findWrapping(o.type)))return {sliceDepth:r,frontierDepth:l,parent:s,wrap:d};if(s&&c.matchType(s.type))break}}}openMore(){let{content:e,openStart:t,openEnd:r}=this.unplaced,i=Vn(e,t);return !i.childCount||i.firstChild.isLeaf?!1:(this.unplaced=new k(e,t+1,Math.max(r,i.size+t>=e.size-r?t+1:0)),!0)}dropNode(){let{content:e,openStart:t,openEnd:r}=this.unplaced,i=Vn(e,t);if(i.childCount<=1&&t>0){let s=e.size-t<=t+i.size;this.unplaced=new k(St(e,t-1,1),t-1,s?t-1:r);}else this.unplaced=new k(St(e,t,1),t,r);}placeNodes({sliceDepth:e,frontierDepth:t,parent:r,inject:i,wrap:s}){for(;this.depth>t;)this.closeFrontierNode();if(s)for(let m=0;m<s.length;m++)this.openFrontierNode(s[m]);let o=this.unplaced,l=r?r.content:o.content,a=o.openStart-e,c=0,d=[],{match:u,type:f}=this.frontier[t];if(i){for(let m=0;m<i.childCount;m++)d.push(i.child(m));u=u.matchFragment(i);}let h=l.size+e-(o.content.size-o.openEnd);for(;c<l.childCount;){let m=l.child(c),g=u.matchType(m.type);if(!g)break;c++,(c>1||a==0||m.content.size)&&(u=g,d.push(ji(m.mark(f.allowedMarks(m.marks)),c==1?a:0,c==l.childCount?h:-1)));}let p=c==l.childCount;p||(h=-1),this.placed=xt(this.placed,t,b.from(d)),this.frontier[t].match=u,p&&h<0&&r&&r.type==this.frontier[this.depth].type&&this.frontier.length>1&&this.closeFrontierNode();for(let m=0,g=l;m<h;m++){let y=g.lastChild;this.frontier.push({type:y.type,match:y.contentMatchAt(y.childCount)}),g=y.content;}this.unplaced=p?e==0?k.empty:new k(St(o.content,e-1,1),e-1,h<0?o.openEnd:e-1):new k(St(o.content,e,c),o.openStart,o.openEnd);}mustMoveInline(){if(!this.$to.parent.isTextblock)return -1;let e=this.frontier[this.depth],t;if(!e.type.isTextblock||!$n(this.$to,this.$to.depth,e.type,e.match,!1)||this.$to.depth==this.depth&&(t=this.findCloseLevel(this.$to))&&t.depth==this.depth)return -1;let{depth:r}=this.$to,i=this.$to.after(r);for(;r>1&&i==this.$to.end(--r);)++i;return i}findCloseLevel(e){e:for(let t=Math.min(this.depth,e.depth);t>=0;t--){let{match:r,type:i}=this.frontier[t],s=t<e.depth&&e.end(t+1)==e.pos+(e.depth-(t+1)),o=$n(e,t,i,r,s);if(o){for(let l=t-1;l>=0;l--){let{match:a,type:c}=this.frontier[l],d=$n(e,l,c,a,!0);if(!d||d.childCount)continue e}return {depth:t,fit:o,move:s?e.doc.resolve(e.after(t+1)):e}}}}close(e){let t=this.findCloseLevel(e);if(!t)return null;for(;this.depth>t.depth;)this.closeFrontierNode();t.fit.childCount&&(this.placed=xt(this.placed,t.depth,t.fit)),e=t.move;for(let r=t.depth+1;r<=e.depth;r++){let i=e.node(r),s=i.type.contentMatch.fillBefore(i.content,!0,e.index(r));this.openFrontierNode(i.type,i.attrs,s);}return e}openFrontierNode(e,t=null,r){let i=this.frontier[this.depth];i.match=i.match.matchType(e),this.placed=xt(this.placed,this.depth,b.from(e.create(t,r))),this.frontier.push({type:e,match:e.contentMatch});}closeFrontierNode(){let t=this.frontier.pop().match.fillBefore(b.empty,!0);t.childCount&&(this.placed=xt(this.placed,this.frontier.length,t));}};function St(n,e,t){return e==0?n.cutByIndex(t,n.childCount):n.replaceChild(0,n.firstChild.copy(St(n.firstChild.content,e-1,t)))}function xt(n,e,t){return e==0?n.append(t):n.replaceChild(n.childCount-1,n.lastChild.copy(xt(n.lastChild.content,e-1,t)))}function Vn(n,e){for(let t=0;t<e;t++)n=n.firstChild.content;return n}function ji(n,e,t){if(e<=0)return n;let r=n.content;return e>1&&(r=r.replaceChild(0,ji(r.firstChild,e-1,r.childCount==1?t-1:0))),e>0&&(r=n.type.contentMatch.fillBefore(r).append(r),t<=0&&(r=r.append(n.type.contentMatch.matchFragment(r).fillBefore(b.empty,!0)))),n.copy(r)}function $n(n,e,t,r,i){let s=n.node(e),o=i?n.indexAfter(e):n.index(e);if(o==s.childCount&&!t.compatibleContent(s.type))return null;let l=r.fillBefore(s.content,!0,o);return l&&!ra(t,s.content,o)?l:null}function ra(n,e,t){for(let r=t;r<e.childCount;r++)if(!n.allowsMarks(e.child(r).marks))return !0;return !1}function ia(n){return n.spec.defining||n.spec.definingForContent}function sa(n,e,t,r){if(!r.size)return n.deleteRange(e,t);let i=n.doc.resolve(e),s=n.doc.resolve(t);if(Wi(i,s,r))return n.step(new X(e,t,r));let o=qi(i,n.doc.resolve(t));o[o.length-1]==0&&o.pop();let l=-(i.depth+1);o.unshift(l);for(let f=i.depth,h=i.pos-1;f>0;f--,h--){let p=i.node(f).type.spec;if(p.defining||p.definingAsContext||p.isolating)break;o.indexOf(f)>-1?l=f:i.before(f)==h&&o.splice(1,0,-f);}let a=o.indexOf(l),c=[],d=r.openStart;for(let f=r.content,h=0;;h++){let p=f.firstChild;if(c.push(p),h==r.openStart)break;f=p.content;}for(let f=d-1;f>=0;f--){let h=c[f].type,p=ia(h);if(p&&i.node(a).type!=h)d=f;else if(p||!h.isTextblock)break}for(let f=r.openStart;f>=0;f--){let h=(f+d+1)%(r.openStart+1),p=c[h];if(p)for(let m=0;m<o.length;m++){let g=o[(m+a)%o.length],y=!0;g<0&&(y=!1,g=-g);let x=i.node(g-1),T=i.index(g-1);if(x.canReplaceWith(T,T,p.type,p.marks))return n.replace(i.before(g),y?s.after(g):t,new k(Ki(r.content,0,r.openStart,h),h,r.openEnd))}}let u=n.steps.length;for(let f=o.length-1;f>=0&&(n.replace(e,t,r),!(n.steps.length>u));f--){let h=o[f];h<0||(e=i.before(h),t=s.after(h));}}function Ki(n,e,t,r,i){if(e<t){let s=n.firstChild;n=n.replaceChild(0,s.copy(Ki(s.content,e+1,t,r,s)));}if(e>r){let s=i.contentMatchAt(0),o=s.fillBefore(n).append(n);n=o.append(s.matchFragment(o).fillBefore(b.empty,!0));}return n}function oa(n,e,t,r){if(!r.isInline&&e==t&&n.doc.resolve(e).parent.content.size){let i=na(n.doc,e,r.type);i!=null&&(e=t=i);}n.replaceRange(e,t,new k(b.from(r),0,0));}function la(n,e,t){let r=n.doc.resolve(e),i=n.doc.resolve(t),s=qi(r,i);for(let o=0;o<s.length;o++){let l=s[o],a=o==s.length-1;if(a&&l==0||r.node(l).type.contentMatch.validEnd)return n.delete(r.start(l),i.end(l));if(l>0&&(a||r.node(l-1).canReplace(r.index(l-1),i.indexAfter(l-1))))return n.delete(r.before(l),i.after(l))}for(let o=1;o<=r.depth&&o<=i.depth;o++)if(e-r.start(o)==r.depth-o&&t>r.end(o)&&i.end(o)-t!=i.depth-o)return n.delete(r.before(o),t);n.delete(e,t);}function qi(n,e){let t=[],r=Math.min(n.depth,e.depth);for(let i=r;i>=0;i--){let s=n.start(i);if(s<n.pos-(n.depth-i)||e.end(i)>e.pos+(e.depth-i)||n.node(i).type.spec.isolating||e.node(i).type.spec.isolating)break;(s==e.start(i)||i==n.depth&&i==e.depth&&n.parent.inlineContent&&e.parent.inlineContent&&i&&e.start(i-1)==s-1)&&t.push(i);}return t}var Gt=class n extends H{constructor(e,t,r){super(),this.pos=e,this.attr=t,this.value=r;}apply(e){let t=e.nodeAt(this.pos);if(!t)return $.fail("No node at attribute step's position");let r=Object.create(null);for(let s in t.attrs)r[s]=t.attrs[s];r[this.attr]=this.value;let i=t.type.create(r,null,t.marks);return $.fromReplace(e,this.pos,this.pos+1,new k(b.from(i),0,t.isLeaf?0:1))}getMap(){return Oe.empty}invert(e){return new n(this.pos,this.attr,e.nodeAt(this.pos).attrs[this.attr])}map(e){let t=e.mapResult(this.pos,1);return t.deletedAfter?null:new n(t.pos,this.attr,this.value)}toJSON(){return {stepType:"attr",pos:this.pos,attr:this.attr,value:this.value}}static fromJSON(e,t){if(typeof t.pos!="number"||typeof t.attr!="string")throw new RangeError("Invalid input for AttrStep.fromJSON");return new n(t.pos,t.attr,t.value)}};H.jsonID("attr",Gt);var rt=class extends Error{};rt=function n(e){let t=Error.call(this,e);return t.__proto__=n.prototype,t};rt.prototype=Object.create(Error.prototype);rt.prototype.constructor=rt;rt.prototype.name="TransformError";var Et=class{constructor(e){this.doc=e,this.steps=[],this.docs=[],this.mapping=new Ct;}get before(){return this.docs.length?this.docs[0]:this.doc}step(e){let t=this.maybeStep(e);if(t.failed)throw new rt(t.failed);return this}maybeStep(e){let t=e.apply(this.doc);return t.failed||this.addStep(e,t.doc),t}get docChanged(){return this.steps.length>0}addStep(e,t){this.docs.push(this.doc),this.steps.push(e),this.mapping.appendMap(e.getMap()),this.doc=t;}replace(e,t=e,r=k.empty){let i=Xt(this.doc,e,t,r);return i&&this.step(i),this}replaceWith(e,t,r){return this.replace(e,t,new k(b.from(r),0,0))}delete(e,t){return this.replace(e,t,k.empty)}insert(e,t){return this.replaceWith(e,e,t)}replaceRange(e,t,r){return sa(this,e,t,r),this}replaceRangeWith(e,t,r){return oa(this,e,t,r),this}deleteRange(e,t){return la(this,e,t),this}lift(e,t){return Ul(this,e,t),this}join(e,t=1){return ta(this,e,t),this}wrap(e,t){return Yl(this,e,t),this}setBlockType(e,t=e,r,i=null){return Xl(this,e,t,r,i),this}setNodeMarkup(e,t,r=null,i){return Ql(this,e,t,r,i),this}setNodeAttribute(e,t,r){return this.step(new Gt(e,t,r)),this}addNodeMark(e,t){return this.step(new Ot(e,t)),this}removeNodeMark(e,t){if(!(t instanceof A)){let r=this.doc.nodeAt(e);if(!r)throw new RangeError("No node at position "+e);if(t=t.isInSet(r.marks),!t)return this}return this.step(new Tt(e,t)),this}split(e,t=1,r){return ea(this,e,t,r),this}addMark(e,t,r){return Wl(this,e,t,r),this}removeMark(e,t,r){return jl(this,e,t,r),this}clearIncompatible(e,t,r){return Kl(this,e,t,r),this}};var jn=Object.create(null),C=class{constructor(e,t,r){this.$anchor=e,this.$head=t,this.ranges=r||[new qn(e.min(t),e.max(t))];}get anchor(){return this.$anchor.pos}get head(){return this.$head.pos}get from(){return this.$from.pos}get to(){return this.$to.pos}get $from(){return this.ranges[0].$from}get $to(){return this.ranges[0].$to}get empty(){let e=this.ranges;for(let t=0;t<e.length;t++)if(e[t].$from.pos!=e[t].$to.pos)return !1;return !0}content(){return this.$from.doc.slice(this.from,this.to,!0)}replace(e,t=k.empty){let r=t.content.lastChild,i=null;for(let l=0;l<t.openEnd;l++)i=r,r=r.lastChild;let s=e.steps.length,o=this.ranges;for(let l=0;l<o.length;l++){let{$from:a,$to:c}=o[l],d=e.mapping.slice(s);e.replaceRange(d.map(a.pos),d.map(c.pos),l?k.empty:t),l==0&&Gi(e,s,(r?r.isInline:i&&i.isTextblock)?-1:1);}}replaceWith(e,t){let r=e.steps.length,i=this.ranges;for(let s=0;s<i.length;s++){let{$from:o,$to:l}=i[s],a=e.mapping.slice(r),c=a.map(o.pos),d=a.map(l.pos);s?e.deleteRange(c,d):(e.replaceRangeWith(c,d,t),Gi(e,r,t.isInline?-1:1));}}static findFrom(e,t,r=!1){let i=e.parent.inlineContent?new w(e):ot(e.node(0),e.parent,e.pos,e.index(),t,r);if(i)return i;for(let s=e.depth-1;s>=0;s--){let o=t<0?ot(e.node(0),e.node(s),e.before(s+1),e.index(s),t,r):ot(e.node(0),e.node(s),e.after(s+1),e.index(s)+1,t,r);if(o)return o}return null}static near(e,t=1){return this.findFrom(e,t)||this.findFrom(e,-t)||new ee(e.node(0))}static atStart(e){return ot(e,e,0,0,1)||new ee(e)}static atEnd(e){return ot(e,e,e.content.size,e.childCount,-1)||new ee(e)}static fromJSON(e,t){if(!t||!t.type)throw new RangeError("Invalid input for Selection.fromJSON");let r=jn[t.type];if(!r)throw new RangeError(`No selection type ${t.type} defined`);return r.fromJSON(e,t)}static jsonID(e,t){if(e in jn)throw new RangeError("Duplicate use of selection JSON ID "+e);return jn[e]=t,t.prototype.jsonID=e,t}getBookmark(){return w.between(this.$anchor,this.$head).getBookmark()}};C.prototype.visible=!0;var qn=class{constructor(e,t){this.$from=e,this.$to=t;}},Ui=!1;function _i(n){!Ui&&!n.parent.inlineContent&&(Ui=!0,console.warn("TextSelection endpoint not pointing into a node with inline content ("+n.parent.type.name+")"));}var w=class n extends C{constructor(e,t=e){_i(e),_i(t),super(e,t);}get $cursor(){return this.$anchor.pos==this.$head.pos?this.$head:null}map(e,t){let r=e.resolve(t.map(this.head));if(!r.parent.inlineContent)return C.near(r);let i=e.resolve(t.map(this.anchor));return new n(i.parent.inlineContent?i:r,r)}replace(e,t=k.empty){if(super.replace(e,t),t==k.empty){let r=this.$from.marksAcross(this.$to);r&&e.ensureMarks(r);}}eq(e){return e instanceof n&&e.anchor==this.anchor&&e.head==this.head}getBookmark(){return new Qt(this.anchor,this.head)}toJSON(){return {type:"text",anchor:this.anchor,head:this.head}}static fromJSON(e,t){if(typeof t.anchor!="number"||typeof t.head!="number")throw new RangeError("Invalid input for TextSelection.fromJSON");return new n(e.resolve(t.anchor),e.resolve(t.head))}static create(e,t,r=t){let i=e.resolve(t);return new this(i,r==t?i:e.resolve(r))}static between(e,t,r){let i=e.pos-t.pos;if((!r||i)&&(r=i>=0?1:-1),!t.parent.inlineContent){let s=C.findFrom(t,r,!0)||C.findFrom(t,-r,!0);if(s)t=s.$head;else return C.near(t,r)}return e.parent.inlineContent||(i==0?e=t:(e=(C.findFrom(e,-r,!0)||C.findFrom(e,r,!0)).$anchor,e.pos<t.pos!=i<0&&(e=t))),new n(e,t)}};C.jsonID("text",w);var Qt=class n{constructor(e,t){this.anchor=e,this.head=t;}map(e){return new n(e.map(this.anchor),e.map(this.head))}resolve(e){return w.between(e.resolve(this.anchor),e.resolve(this.head))}},M=class n extends C{constructor(e){let t=e.nodeAfter,r=e.node(0).resolve(e.pos+t.nodeSize);super(e,r),this.node=t;}map(e,t){let{deleted:r,pos:i}=t.mapResult(this.anchor),s=e.resolve(i);return r?C.near(s):new n(s)}content(){return new k(b.from(this.node),0,0)}eq(e){return e instanceof n&&e.anchor==this.anchor}toJSON(){return {type:"node",anchor:this.anchor}}getBookmark(){return new Un(this.anchor)}static fromJSON(e,t){if(typeof t.anchor!="number")throw new RangeError("Invalid input for NodeSelection.fromJSON");return new n(e.resolve(t.anchor))}static create(e,t){return new n(e.resolve(t))}static isSelectable(e){return !e.isText&&e.type.spec.selectable!==!1}};M.prototype.visible=!1;C.jsonID("node",M);var Un=class n{constructor(e){this.anchor=e;}map(e){let{deleted:t,pos:r}=e.mapResult(this.anchor);return t?new Qt(r,r):new n(r)}resolve(e){let t=e.resolve(this.anchor),r=t.nodeAfter;return r&&M.isSelectable(r)?new M(t):C.near(t)}},ee=class n extends C{constructor(e){super(e.resolve(0),e.resolve(e.content.size));}replace(e,t=k.empty){if(t==k.empty){e.delete(0,e.doc.content.size);let r=C.atStart(e.doc);r.eq(e.selection)||e.setSelection(r);}else super.replace(e,t);}toJSON(){return {type:"all"}}static fromJSON(e){return new n(e)}map(e){return new n(e)}eq(e){return e instanceof n}getBookmark(){return aa}};C.jsonID("all",ee);var aa={map(){return this},resolve(n){return new ee(n)}};function ot(n,e,t,r,i,s=!1){if(e.inlineContent)return w.create(n,t);for(let o=r-(i>0?0:1);i>0?o<e.childCount:o>=0;o+=i){let l=e.child(o);if(l.isAtom){if(!s&&M.isSelectable(l))return M.create(n,t-(i<0?l.nodeSize:0))}else {let a=ot(n,l,t+i,i<0?l.childCount:0,i,s);if(a)return a}t+=l.nodeSize*i;}return null}function Gi(n,e,t){let r=n.steps.length-1;if(r<e)return;let i=n.steps[r];if(!(i instanceof X||i instanceof R))return;let s=n.mapping.maps[r],o;s.forEach((l,a,c,d)=>{o==null&&(o=d);}),n.setSelection(C.near(n.doc.resolve(o),t));}var Yi=1,Zt=2,Xi=4,_n=class extends Et{constructor(e){super(e.doc),this.curSelectionFor=0,this.updated=0,this.meta=Object.create(null),this.time=Date.now(),this.curSelection=e.selection,this.storedMarks=e.storedMarks;}get selection(){return this.curSelectionFor<this.steps.length&&(this.curSelection=this.curSelection.map(this.doc,this.mapping.slice(this.curSelectionFor)),this.curSelectionFor=this.steps.length),this.curSelection}setSelection(e){if(e.$from.doc!=this.doc)throw new RangeError("Selection passed to setSelection must point at the current document");return this.curSelection=e,this.curSelectionFor=this.steps.length,this.updated=(this.updated|Yi)&~Zt,this.storedMarks=null,this}get selectionSet(){return (this.updated&Yi)>0}setStoredMarks(e){return this.storedMarks=e,this.updated|=Zt,this}ensureMarks(e){return A.sameSet(this.storedMarks||this.selection.$from.marks(),e)||this.setStoredMarks(e),this}addStoredMark(e){return this.ensureMarks(e.addToSet(this.storedMarks||this.selection.$head.marks()))}removeStoredMark(e){return this.ensureMarks(e.removeFromSet(this.storedMarks||this.selection.$head.marks()))}get storedMarksSet(){return (this.updated&Zt)>0}addStep(e,t){super.addStep(e,t),this.updated=this.updated&~Zt,this.storedMarks=null;}setTime(e){return this.time=e,this}replaceSelection(e){return this.selection.replace(this,e),this}replaceSelectionWith(e,t=!0){let r=this.selection;return t&&(e=e.mark(this.storedMarks||(r.empty?r.$from.marks():r.$from.marksAcross(r.$to)||A.none))),r.replaceWith(this,e),this}deleteSelection(){return this.selection.replace(this),this}insertText(e,t,r){let i=this.doc.type.schema;if(t==null)return e?this.replaceSelectionWith(i.text(e),!0):this.deleteSelection();{if(r==null&&(r=t),r=r??t,!e)return this.deleteRange(t,r);let s=this.storedMarks;if(!s){let o=this.doc.resolve(t);s=r==t?o.marks():o.marksAcross(this.doc.resolve(r));}return this.replaceRangeWith(t,r,i.text(e,s)),this.selection.empty||this.setSelection(C.near(this.selection.$to)),this}}setMeta(e,t){return this.meta[typeof e=="string"?e:e.key]=t,this}getMeta(e){return this.meta[typeof e=="string"?e:e.key]}get isGeneric(){for(let e in this.meta)return !1;return !0}scrollIntoView(){return this.updated|=Xi,this}get scrolledIntoView(){return (this.updated&Xi)>0}};function Zi(n,e){return !e||!n?n:n.bind(e)}var je=class{constructor(e,t,r){this.name=e,this.init=Zi(t.init,r),this.apply=Zi(t.apply,r);}},ca=[new je("doc",{init(n){return n.doc||n.schema.topNodeType.createAndFill()},apply(n){return n.doc}}),new je("selection",{init(n,e){return n.selection||C.atStart(e.doc)},apply(n){return n.selection}}),new je("storedMarks",{init(n){return n.storedMarks||null},apply(n,e,t,r){return r.selection.$cursor?n.storedMarks:null}}),new je("scrollToSelection",{init(){return 0},apply(n,e){return n.scrolledIntoView?e+1:e}})],Nt=class{constructor(e,t){this.schema=e,this.plugins=[],this.pluginsByKey=Object.create(null),this.fields=ca.slice(),t&&t.forEach(r=>{if(this.pluginsByKey[r.key])throw new RangeError("Adding different instances of a keyed plugin ("+r.key+")");this.plugins.push(r),this.pluginsByKey[r.key]=r,r.spec.state&&this.fields.push(new je(r.key,r.spec.state,r));});}},en=class n{constructor(e){this.config=e;}get schema(){return this.config.schema}get plugins(){return this.config.plugins}apply(e){return this.applyTransaction(e).state}filterTransaction(e,t=-1){for(let r=0;r<this.config.plugins.length;r++)if(r!=t){let i=this.config.plugins[r];if(i.spec.filterTransaction&&!i.spec.filterTransaction.call(i,e,this))return !1}return !0}applyTransaction(e){if(!this.filterTransaction(e))return {state:this,transactions:[]};let t=[e],r=this.applyInner(e),i=null;for(;;){let s=!1;for(let o=0;o<this.config.plugins.length;o++){let l=this.config.plugins[o];if(l.spec.appendTransaction){let a=i?i[o].n:0,c=i?i[o].state:this,d=a<t.length&&l.spec.appendTransaction.call(l,a?t.slice(a):t,c,r);if(d&&r.filterTransaction(d,o)){if(d.setMeta("appendedTransaction",e),!i){i=[];for(let u=0;u<this.config.plugins.length;u++)i.push(u<o?{state:r,n:t.length}:{state:this,n:0});}t.push(d),r=r.applyInner(d),s=!0;}i&&(i[o]={state:r,n:t.length});}}if(!s)return {state:r,transactions:t}}}applyInner(e){if(!e.before.eq(this.doc))throw new RangeError("Applying a mismatched transaction");let t=new n(this.config),r=this.config.fields;for(let i=0;i<r.length;i++){let s=r[i];t[s.name]=s.apply(e,this[s.name],this,t);}return t}get tr(){return new _n(this)}static create(e){let t=new Nt(e.doc?e.doc.type.schema:e.schema,e.plugins),r=new n(t);for(let i=0;i<t.fields.length;i++)r[t.fields[i].name]=t.fields[i].init(e,r);return r}reconfigure(e){let t=new Nt(this.schema,e.plugins),r=t.fields,i=new n(t);for(let s=0;s<r.length;s++){let o=r[s].name;i[o]=this.hasOwnProperty(o)?this[o]:r[s].init(e,i);}return i}toJSON(e){let t={doc:this.doc.toJSON(),selection:this.selection.toJSON()};if(this.storedMarks&&(t.storedMarks=this.storedMarks.map(r=>r.toJSON())),e&&typeof e=="object")for(let r in e){if(r=="doc"||r=="selection")throw new RangeError("The JSON fields `doc` and `selection` are reserved");let i=e[r],s=i.spec.state;s&&s.toJSON&&(t[r]=s.toJSON.call(i,this[i.key]));}return t}static fromJSON(e,t,r){if(!t)throw new RangeError("Invalid input for EditorState.fromJSON");if(!e.schema)throw new RangeError("Required config field 'schema' missing");let i=new Nt(e.schema,e.plugins),s=new n(i);return i.fields.forEach(o=>{if(o.name=="doc")s.doc=le.fromJSON(e.schema,t.doc);else if(o.name=="selection")s.selection=C.fromJSON(s.doc,t.selection);else if(o.name=="storedMarks")t.storedMarks&&(s.storedMarks=t.storedMarks.map(e.schema.markFromJSON));else {if(r)for(let l in r){let a=r[l],c=a.spec.state;if(a.key==o.name&&c&&c.fromJSON&&Object.prototype.hasOwnProperty.call(t,l)){s[o.name]=c.fromJSON.call(a,e,t[l],s);return}}s[o.name]=o.init(e,s);}}),s}};function Qi(n,e,t){for(let r in n){let i=n[r];i instanceof Function?i=i.bind(e):r=="handleDOMEvents"&&(i=Qi(i,e,{})),t[r]=i;}return t}var P=class{constructor(e){this.spec=e,this.props={},e.props&&Qi(e.props,this,this.props),this.key=e.key?e.key.key:es("plugin");}getState(e){return e[this.key]}},Kn=Object.create(null);function es(n){return n in Kn?n+"$"+ ++Kn[n]:(Kn[n]=0,n+"$")}var te=class{constructor(e="key"){this.key=es(e);}get(e){return e.config.pluginsByKey[this.key]}getState(e){return e[this.key]}};var ne=function(n){for(var e=0;;e++)if(n=n.previousSibling,!n)return e},Rt=function(n){let e=n.assignedSlot||n.parentNode;return e&&e.nodeType==11?e.host:e},ts=null,xe=function(n,e,t){let r=ts||(ts=document.createRange());return r.setEnd(n,t??n.nodeValue.length),r.setStart(n,e||0),r},Ze=function(n,e,t,r){return t&&(ns(n,e,t,r,-1)||ns(n,e,t,r,1))},da=/^(img|br|input|textarea|hr)$/i;function ns(n,e,t,r,i){for(;;){if(n==t&&e==r)return !0;if(e==(i<0?0:ue(n))){let s=n.parentNode;if(!s||s.nodeType!=1||fa(n)||da.test(n.nodeName)||n.contentEditable=="false")return !1;e=ne(n)+(i<0?0:1),n=s;}else if(n.nodeType==1){if(n=n.childNodes[e+(i<0?-1:0)],n.contentEditable=="false")return !1;e=i<0?ue(n):0;}else return !1}}function ue(n){return n.nodeType==3?n.nodeValue.length:n.childNodes.length}function ua(n,e,t){for(let r=e==0,i=e==ue(n);r||i;){if(n==t)return !0;let s=ne(n);if(n=n.parentNode,!n)return !1;r=r&&s==0,i=i&&s==ue(n);}}function fa(n){let e;for(let t=n;t&&!(e=t.pmViewDesc);t=t.parentNode);return e&&e.node&&e.node.isBlock&&(e.dom==n||e.contentDOM==n)}var dn=function(n){return n.focusNode&&Ze(n.focusNode,n.focusOffset,n.anchorNode,n.anchorOffset)};function Ke(n,e){let t=document.createEvent("Event");return t.initEvent("keydown",!0,!0),t.keyCode=n,t.key=t.code=e,t}function ha(n){let e=n.activeElement;for(;e&&e.shadowRoot;)e=e.shadowRoot.activeElement;return e}function pa(n,e,t){if(n.caretPositionFromPoint)try{let r=n.caretPositionFromPoint(e,t);if(r)return {node:r.offsetNode,offset:r.offset}}catch{}if(n.caretRangeFromPoint){let r=n.caretRangeFromPoint(e,t);if(r)return {node:r.startContainer,offset:r.startOffset}}}var fe=typeof navigator<"u"?navigator:null,rs=typeof document<"u"?document:null,ve=fe&&fe.userAgent||"",Qn=/Edge\/(\d+)/.exec(ve),Ps=/MSIE \d/.exec(ve),er=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(ve),Z=!!(Ps||er||Qn),Ae=Ps?document.documentMode:er?+er[1]:Qn?+Qn[1]:0,de=!Z&&/gecko\/(\d+)/i.test(ve);de&&+(/Firefox\/(\d+)/.exec(ve)||[0,0])[1];var tr=!Z&&/Chrome\/(\d+)/.exec(ve),W=!!tr,ma=tr?+tr[1]:0,U=!Z&&!!fe&&/Apple Computer/.test(fe.vendor),dt=U&&(/Mobile\/\w+/.test(ve)||!!fe&&fe.maxTouchPoints>2),se=dt||(fe?/Mac/.test(fe.platform):!1),ga=fe?/Win/.test(fe.platform):!1,ce=/Android \d/.test(ve),un=!!rs&&"webkitFontSmoothing"in rs.documentElement.style,ya=un?+(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent)||[0,0])[1]:0;function ba(n){return {left:0,right:n.documentElement.clientWidth,top:0,bottom:n.documentElement.clientHeight}}function Te(n,e){return typeof n=="number"?n:n[e]}function ka(n){let e=n.getBoundingClientRect(),t=e.width/n.offsetWidth||1,r=e.height/n.offsetHeight||1;return {left:e.left,right:e.left+n.clientWidth*t,top:e.top,bottom:e.top+n.clientHeight*r}}function is(n,e,t){let r=n.someProp("scrollThreshold")||0,i=n.someProp("scrollMargin")||5,s=n.dom.ownerDocument;for(let o=t||n.dom;o;o=Rt(o)){if(o.nodeType!=1)continue;let l=o,a=l==s.body,c=a?ba(s):ka(l),d=0,u=0;if(e.top<c.top+Te(r,"top")?u=-(c.top-e.top+Te(i,"top")):e.bottom>c.bottom-Te(r,"bottom")&&(u=e.bottom-c.bottom+Te(i,"bottom")),e.left<c.left+Te(r,"left")?d=-(c.left-e.left+Te(i,"left")):e.right>c.right-Te(r,"right")&&(d=e.right-c.right+Te(i,"right")),d||u)if(a)s.defaultView.scrollBy(d,u);else {let f=l.scrollLeft,h=l.scrollTop;u&&(l.scrollTop+=u),d&&(l.scrollLeft+=d);let p=l.scrollLeft-f,m=l.scrollTop-h;e={left:e.left-p,top:e.top-m,right:e.right-p,bottom:e.bottom-m};}if(a)break}}function Sa(n){let e=n.dom.getBoundingClientRect(),t=Math.max(0,e.top),r,i;for(let s=(e.left+e.right)/2,o=t+1;o<Math.min(innerHeight,e.bottom);o+=5){let l=n.root.elementFromPoint(s,o);if(!l||l==n.dom||!n.dom.contains(l))continue;let a=l.getBoundingClientRect();if(a.top>=t-20){r=l,i=a.top;break}}return {refDOM:r,refTop:i,stack:Bs(n.dom)}}function Bs(n){let e=[],t=n.ownerDocument;for(let r=n;r&&(e.push({dom:r,top:r.scrollTop,left:r.scrollLeft}),n!=t);r=Rt(r));return e}function xa({refDOM:n,refTop:e,stack:t}){let r=n?n.getBoundingClientRect().top:0;Ls(t,r==0?0:r-e);}function Ls(n,e){for(let t=0;t<n.length;t++){let{dom:r,top:i,left:s}=n[t];r.scrollTop!=i+e&&(r.scrollTop=i+e),r.scrollLeft!=s&&(r.scrollLeft=s);}}var lt=null;function Ma(n){if(n.setActive)return n.setActive();if(lt)return n.focus(lt);let e=Bs(n);n.focus(lt==null?{get preventScroll(){return lt={preventScroll:!0},!0}}:void 0),lt||(lt=!1,Ls(e,0));}function Fs(n,e){let t,r=2e8,i,s=0,o=e.top,l=e.top,a,c;for(let d=n.firstChild,u=0;d;d=d.nextSibling,u++){let f;if(d.nodeType==1)f=d.getClientRects();else if(d.nodeType==3)f=xe(d).getClientRects();else continue;for(let h=0;h<f.length;h++){let p=f[h];if(p.top<=o&&p.bottom>=l){o=Math.max(p.bottom,o),l=Math.min(p.top,l);let m=p.left>e.left?p.left-e.left:p.right<e.left?e.left-p.right:0;if(m<r){t=d,r=m,i=m&&t.nodeType==3?{left:p.right<e.left?p.right:p.left,top:e.top}:e,d.nodeType==1&&m&&(s=u+(e.left>=(p.left+p.right)/2?1:0));continue}}else p.top>e.top&&!a&&p.left<=e.left&&p.right>=e.left&&(a=d,c={left:Math.max(p.left,Math.min(p.right,e.left)),top:p.top});!t&&(e.left>=p.right&&e.top>=p.top||e.left>=p.left&&e.top>=p.bottom)&&(s=u+1);}}return !t&&a&&(t=a,i=c,r=0),t&&t.nodeType==3?Ca(t,i):!t||r&&t.nodeType==1?{node:n,offset:s}:Fs(t,i)}function Ca(n,e){let t=n.nodeValue.length,r=document.createRange();for(let i=0;i<t;i++){r.setEnd(n,i+1),r.setStart(n,i);let s=Ee(r,1);if(s.top!=s.bottom&&kr(e,s))return {node:n,offset:i+(e.left>=(s.left+s.right)/2?1:0)}}return {node:n,offset:0}}function kr(n,e){return n.left>=e.left-1&&n.left<=e.right+1&&n.top>=e.top-1&&n.top<=e.bottom+1}function wa(n,e){let t=n.parentNode;return t&&/^li$/i.test(t.nodeName)&&e.left<n.getBoundingClientRect().left?t:n}function Oa(n,e,t){let{node:r,offset:i}=Fs(e,t),s=-1;if(r.nodeType==1&&!r.firstChild){let o=r.getBoundingClientRect();s=o.left!=o.right&&t.left>(o.left+o.right)/2?1:-1;}return n.docView.posFromDOM(r,i,s)}function Ta(n,e,t,r){let i=-1;for(let s=e,o=!1;s!=n.dom;){let l=n.docView.nearestDesc(s,!0);if(!l)return null;if(l.dom.nodeType==1&&(l.node.isBlock&&l.parent&&!o||!l.contentDOM)){let a=l.dom.getBoundingClientRect();if(l.node.isBlock&&l.parent&&!o&&(o=!0,a.left>r.left||a.top>r.top?i=l.posBefore:(a.right<r.left||a.bottom<r.top)&&(i=l.posAfter)),!l.contentDOM&&i<0)return (l.node.isBlock?r.top<(a.top+a.bottom)/2:r.left<(a.left+a.right)/2)?l.posBefore:l.posAfter}s=l.dom.parentNode;}return i>-1?i:n.docView.posFromDOM(e,t,-1)}function zs(n,e,t){let r=n.childNodes.length;if(r&&t.top<t.bottom)for(let i=Math.max(0,Math.min(r-1,Math.floor(r*(e.top-t.top)/(t.bottom-t.top))-2)),s=i;;){let o=n.childNodes[s];if(o.nodeType==1){let l=o.getClientRects();for(let a=0;a<l.length;a++){let c=l[a];if(kr(e,c))return zs(o,e,c)}}if((s=(s+1)%r)==i)break}return n}function Ea(n,e){let t=n.dom.ownerDocument,r,i=0,s=pa(t,e.left,e.top);s&&({node:r,offset:i}=s);let o=(n.root.elementFromPoint?n.root:t).elementFromPoint(e.left,e.top),l;if(!o||!n.dom.contains(o.nodeType!=1?o.parentNode:o)){let c=n.dom.getBoundingClientRect();if(!kr(e,c)||(o=zs(n.dom,e,c),!o))return null}if(U)for(let c=o;r&&c;c=Rt(c))c.draggable&&(r=void 0);if(o=wa(o,e),r){if(de&&r.nodeType==1&&(i=Math.min(i,r.childNodes.length),i<r.childNodes.length)){let c=r.childNodes[i],d;c.nodeName=="IMG"&&(d=c.getBoundingClientRect()).right<=e.left&&d.bottom>e.top&&i++;}r==n.dom&&i==r.childNodes.length-1&&r.lastChild.nodeType==1&&e.top>r.lastChild.getBoundingClientRect().bottom?l=n.state.doc.content.size:(i==0||r.nodeType!=1||r.childNodes[i-1].nodeName!="BR")&&(l=Ta(n,r,i,e));}l==null&&(l=Oa(n,o,e));let a=n.docView.nearestDesc(o,!0);return {pos:l,inside:a?a.posAtStart-a.border:-1}}function ss(n){return n.top<n.bottom||n.left<n.right}function Ee(n,e){let t=n.getClientRects();if(t.length){let r=t[e<0?0:t.length-1];if(ss(r))return r}return Array.prototype.find.call(t,ss)||n.getBoundingClientRect()}var Na=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;function Vs(n,e,t){let{node:r,offset:i,atom:s}=n.docView.domFromPos(e,t<0?-1:1),o=un||de;if(r.nodeType==3)if(o&&(Na.test(r.nodeValue)||(t<0?!i:i==r.nodeValue.length))){let a=Ee(xe(r,i,i),t);if(de&&i&&/\s/.test(r.nodeValue[i-1])&&i<r.nodeValue.length){let c=Ee(xe(r,i-1,i-1),-1);if(c.top==a.top){let d=Ee(xe(r,i,i+1),-1);if(d.top!=a.top)return At(d,d.left<c.left)}}return a}else {let a=i,c=i,d=t<0?1:-1;return t<0&&!i?(c++,d=-1):t>=0&&i==r.nodeValue.length?(a--,d=1):t<0?a--:c++,At(Ee(xe(r,a,c),d),d<0)}if(!n.state.doc.resolve(e-(s||0)).parent.inlineContent){if(s==null&&i&&(t<0||i==ue(r))){let a=r.childNodes[i-1];if(a.nodeType==1)return Gn(a.getBoundingClientRect(),!1)}if(s==null&&i<ue(r)){let a=r.childNodes[i];if(a.nodeType==1)return Gn(a.getBoundingClientRect(),!0)}return Gn(r.getBoundingClientRect(),t>=0)}if(s==null&&i&&(t<0||i==ue(r))){let a=r.childNodes[i-1],c=a.nodeType==3?xe(a,ue(a)-(o?0:1)):a.nodeType==1&&(a.nodeName!="BR"||!a.nextSibling)?a:null;if(c)return At(Ee(c,1),!1)}if(s==null&&i<ue(r)){let a=r.childNodes[i];for(;a.pmViewDesc&&a.pmViewDesc.ignoreForCoords;)a=a.nextSibling;let c=a?a.nodeType==3?xe(a,0,o?0:1):a.nodeType==1?a:null:null;if(c)return At(Ee(c,-1),!0)}return At(Ee(r.nodeType==3?xe(r):r,-t),t>=0)}function At(n,e){if(n.width==0)return n;let t=e?n.left:n.right;return {top:n.top,bottom:n.bottom,left:t,right:t}}function Gn(n,e){if(n.height==0)return n;let t=e?n.top:n.bottom;return {top:t,bottom:t,left:n.left,right:n.right}}function $s(n,e,t){let r=n.state,i=n.root.activeElement;r!=e&&n.updateState(e),i!=n.dom&&n.focus();try{return t()}finally{r!=e&&n.updateState(r),i!=n.dom&&i&&i.focus();}}function Aa(n,e,t){let r=e.selection,i=t=="up"?r.$from:r.$to;return $s(n,e,()=>{let{node:s}=n.docView.domFromPos(i.pos,t=="up"?-1:1);for(;;){let l=n.docView.nearestDesc(s,!0);if(!l)break;if(l.node.isBlock){s=l.contentDOM||l.dom;break}s=l.dom.parentNode;}let o=Vs(n,i.pos,1);for(let l=s.firstChild;l;l=l.nextSibling){let a;if(l.nodeType==1)a=l.getClientRects();else if(l.nodeType==3)a=xe(l,0,l.nodeValue.length).getClientRects();else continue;for(let c=0;c<a.length;c++){let d=a[c];if(d.bottom>d.top+1&&(t=="up"?o.top-d.top>(d.bottom-o.top)*2:d.bottom-o.bottom>(o.bottom-d.top)*2))return !1}}return !0})}var Da=/[\u0590-\u08ac]/;function va(n,e,t){let{$head:r}=e.selection;if(!r.parent.isTextblock)return !1;let i=r.parentOffset,s=!i,o=i==r.parent.content.size,l=n.domSelection();return !Da.test(r.parent.textContent)||!l.modify?t=="left"||t=="backward"?s:o:$s(n,e,()=>{let{focusNode:a,focusOffset:c,anchorNode:d,anchorOffset:u}=n.domSelectionRange(),f=l.caretBidiLevel;l.modify("move",t,"character");let h=r.depth?n.docView.domAfterPos(r.before()):n.dom,{focusNode:p,focusOffset:m}=n.domSelectionRange(),g=p&&!h.contains(p.nodeType==1?p:p.parentNode)||a==p&&c==m;try{l.collapse(d,u),a&&(a!=d||c!=u)&&l.extend&&l.extend(a,c);}catch{}return f!=null&&(l.caretBidiLevel=f),g})}var ls=null,as=null,cs=!1;function Ia(n,e,t){return ls==e&&as==t?cs:(ls=e,as=t,cs=t=="up"||t=="down"?Aa(n,e,t):va(n,e,t))}var oe=0,ds=1,Ue=2,he=3,Qe=class{constructor(e,t,r,i){this.parent=e,this.children=t,this.dom=r,this.contentDOM=i,this.dirty=oe,r.pmViewDesc=this;}matchesWidget(e){return !1}matchesMark(e){return !1}matchesNode(e,t,r){return !1}matchesHack(e){return !1}parseRule(){return null}stopEvent(e){return !1}get size(){let e=0;for(let t=0;t<this.children.length;t++)e+=this.children[t].size;return e}get border(){return 0}destroy(){this.parent=void 0,this.dom.pmViewDesc==this&&(this.dom.pmViewDesc=void 0);for(let e=0;e<this.children.length;e++)this.children[e].destroy();}posBeforeChild(e){for(let t=0,r=this.posAtStart;;t++){let i=this.children[t];if(i==e)return r;r+=i.size;}}get posBefore(){return this.parent.posBeforeChild(this)}get posAtStart(){return this.parent?this.parent.posBeforeChild(this)+this.border:0}get posAfter(){return this.posBefore+this.size}get posAtEnd(){return this.posAtStart+this.size-2*this.border}localPosFromDOM(e,t,r){if(this.contentDOM&&this.contentDOM.contains(e.nodeType==1?e:e.parentNode))if(r<0){let s,o;if(e==this.contentDOM)s=e.childNodes[t-1];else {for(;e.parentNode!=this.contentDOM;)e=e.parentNode;s=e.previousSibling;}for(;s&&!((o=s.pmViewDesc)&&o.parent==this);)s=s.previousSibling;return s?this.posBeforeChild(o)+o.size:this.posAtStart}else {let s,o;if(e==this.contentDOM)s=e.childNodes[t];else {for(;e.parentNode!=this.contentDOM;)e=e.parentNode;s=e.nextSibling;}for(;s&&!((o=s.pmViewDesc)&&o.parent==this);)s=s.nextSibling;return s?this.posBeforeChild(o):this.posAtEnd}let i;if(e==this.dom&&this.contentDOM)i=t>ne(this.contentDOM);else if(this.contentDOM&&this.contentDOM!=this.dom&&this.dom.contains(this.contentDOM))i=e.compareDocumentPosition(this.contentDOM)&2;else if(this.dom.firstChild){if(t==0)for(let s=e;;s=s.parentNode){if(s==this.dom){i=!1;break}if(s.previousSibling)break}if(i==null&&t==e.childNodes.length)for(let s=e;;s=s.parentNode){if(s==this.dom){i=!0;break}if(s.nextSibling)break}}return i??r>0?this.posAtEnd:this.posAtStart}nearestDesc(e,t=!1){for(let r=!0,i=e;i;i=i.parentNode){let s=this.getDesc(i),o;if(s&&(!t||s.node))if(r&&(o=s.nodeDOM)&&!(o.nodeType==1?o.contains(e.nodeType==1?e:e.parentNode):o==e))r=!1;else return s}}getDesc(e){let t=e.pmViewDesc;for(let r=t;r;r=r.parent)if(r==this)return t}posFromDOM(e,t,r){for(let i=e;i;i=i.parentNode){let s=this.getDesc(i);if(s)return s.localPosFromDOM(e,t,r)}return -1}descAt(e){for(let t=0,r=0;t<this.children.length;t++){let i=this.children[t],s=r+i.size;if(r==e&&s!=r){for(;!i.border&&i.children.length;)i=i.children[0];return i}if(e<s)return i.descAt(e-r-i.border);r=s;}}domFromPos(e,t){if(!this.contentDOM)return {node:this.dom,offset:0,atom:e+1};let r=0,i=0;for(let s=0;r<this.children.length;r++){let o=this.children[r],l=s+o.size;if(l>e||o instanceof rn){i=e-s;break}s=l;}if(i)return this.children[r].domFromPos(i-this.children[r].border,t);for(let s;r&&!(s=this.children[r-1]).size&&s instanceof tn&&s.side>=0;r--);if(t<=0){let s,o=!0;for(;s=r?this.children[r-1]:null,!(!s||s.dom.parentNode==this.contentDOM);r--,o=!1);return s&&t&&o&&!s.border&&!s.domAtom?s.domFromPos(s.size,t):{node:this.contentDOM,offset:s?ne(s.dom)+1:0}}else {let s,o=!0;for(;s=r<this.children.length?this.children[r]:null,!(!s||s.dom.parentNode==this.contentDOM);r++,o=!1);return s&&o&&!s.border&&!s.domAtom?s.domFromPos(0,t):{node:this.contentDOM,offset:s?ne(s.dom):this.contentDOM.childNodes.length}}}parseRange(e,t,r=0){if(this.children.length==0)return {node:this.contentDOM,from:e,to:t,fromOffset:0,toOffset:this.contentDOM.childNodes.length};let i=-1,s=-1;for(let o=r,l=0;;l++){let a=this.children[l],c=o+a.size;if(i==-1&&e<=c){let d=o+a.border;if(e>=d&&t<=c-a.border&&a.node&&a.contentDOM&&this.contentDOM.contains(a.contentDOM))return a.parseRange(e,t,d);e=o;for(let u=l;u>0;u--){let f=this.children[u-1];if(f.size&&f.dom.parentNode==this.contentDOM&&!f.emptyChildAt(1)){i=ne(f.dom)+1;break}e-=f.size;}i==-1&&(i=0);}if(i>-1&&(c>t||l==this.children.length-1)){t=c;for(let d=l+1;d<this.children.length;d++){let u=this.children[d];if(u.size&&u.dom.parentNode==this.contentDOM&&!u.emptyChildAt(-1)){s=ne(u.dom);break}t+=u.size;}s==-1&&(s=this.contentDOM.childNodes.length);break}o=c;}return {node:this.contentDOM,from:e,to:t,fromOffset:i,toOffset:s}}emptyChildAt(e){if(this.border||!this.contentDOM||!this.children.length)return !1;let t=this.children[e<0?0:this.children.length-1];return t.size==0||t.emptyChildAt(e)}domAfterPos(e){let{node:t,offset:r}=this.domFromPos(e,0);if(t.nodeType!=1||r==t.childNodes.length)throw new RangeError("No node after pos "+e);return t.childNodes[r]}setSelection(e,t,r,i=!1){let s=Math.min(e,t),o=Math.max(e,t);for(let f=0,h=0;f<this.children.length;f++){let p=this.children[f],m=h+p.size;if(s>h&&o<m)return p.setSelection(e-h-p.border,t-h-p.border,r,i);h=m;}let l=this.domFromPos(e,e?-1:1),a=t==e?l:this.domFromPos(t,t?-1:1),c=r.getSelection(),d=!1;if((de||U)&&e==t){let{node:f,offset:h}=l;if(f.nodeType==3){if(d=!!(h&&f.nodeValue[h-1]==`
`),d&&h==f.nodeValue.length)for(let p=f,m;p;p=p.parentNode){if(m=p.nextSibling){m.nodeName=="BR"&&(l=a={node:m.parentNode,offset:ne(m)+1});break}let g=p.pmViewDesc;if(g&&g.node&&g.node.isBlock)break}}else {let p=f.childNodes[h-1];d=p&&(p.nodeName=="BR"||p.contentEditable=="false");}}if(de&&c.focusNode&&c.focusNode!=a.node&&c.focusNode.nodeType==1){let f=c.focusNode.childNodes[c.focusOffset];f&&f.contentEditable=="false"&&(i=!0);}if(!(i||d&&U)&&Ze(l.node,l.offset,c.anchorNode,c.anchorOffset)&&Ze(a.node,a.offset,c.focusNode,c.focusOffset))return;let u=!1;if((c.extend||e==t)&&!d){c.collapse(l.node,l.offset);try{e!=t&&c.extend(a.node,a.offset),u=!0;}catch{}}if(!u){if(e>t){let h=l;l=a,a=h;}let f=document.createRange();f.setEnd(a.node,a.offset),f.setStart(l.node,l.offset),c.removeAllRanges(),c.addRange(f);}}ignoreMutation(e){return !this.contentDOM&&e.type!="selection"}get contentLost(){return this.contentDOM&&this.contentDOM!=this.dom&&!this.dom.contains(this.contentDOM)}markDirty(e,t){for(let r=0,i=0;i<this.children.length;i++){let s=this.children[i],o=r+s.size;if(r==o?e<=o&&t>=r:e<o&&t>r){let l=r+s.border,a=o-s.border;if(e>=l&&t<=a){this.dirty=e==r||t==o?Ue:ds,e==l&&t==a&&(s.contentLost||s.dom.parentNode!=this.contentDOM)?s.dirty=he:s.markDirty(e-l,t-l);return}else s.dirty=s.dom==s.contentDOM&&s.dom.parentNode==this.contentDOM&&!s.children.length?Ue:he;}r=o;}this.dirty=Ue;}markParentsDirty(){let e=1;for(let t=this.parent;t;t=t.parent,e++){let r=e==1?Ue:ds;t.dirty<r&&(t.dirty=r);}}get domAtom(){return !1}get ignoreForCoords(){return !1}},tn=class extends Qe{constructor(e,t,r,i){let s,o=t.type.toDOM;if(typeof o=="function"&&(o=o(r,()=>{if(!s)return i;if(s.parent)return s.parent.posBeforeChild(s)})),!t.type.spec.raw){if(o.nodeType!=1){let l=document.createElement("span");l.appendChild(o),o=l;}o.contentEditable="false",o.classList.add("ProseMirror-widget");}super(e,[],o,null),this.widget=t,this.widget=t,s=this;}matchesWidget(e){return this.dirty==oe&&e.type.eq(this.widget.type)}parseRule(){return {ignore:!0}}stopEvent(e){let t=this.widget.spec.stopEvent;return t?t(e):!1}ignoreMutation(e){return e.type!="selection"||this.widget.spec.ignoreSelection}destroy(){this.widget.type.destroy(this.dom),super.destroy();}get domAtom(){return !0}get side(){return this.widget.type.side}},nr=class extends Qe{constructor(e,t,r,i){super(e,[],t,null),this.textDOM=r,this.text=i;}get size(){return this.text.length}localPosFromDOM(e,t){return e!=this.textDOM?this.posAtStart+(t?this.size:0):this.posAtStart+t}domFromPos(e){return {node:this.textDOM,offset:e}}ignoreMutation(e){return e.type==="characterData"&&e.target.nodeValue==e.oldValue}},ut=class n extends Qe{constructor(e,t,r,i){super(e,[],r,i),this.mark=t;}static create(e,t,r,i){let s=i.nodeViews[t.type.name],o=s&&s(t,i,r);return (!o||!o.dom)&&(o=ke.renderSpec(document,t.type.spec.toDOM(t,r))),new n(e,t,o.dom,o.contentDOM||o.dom)}parseRule(){return this.dirty&he||this.mark.type.spec.reparseInView?null:{mark:this.mark.type.name,attrs:this.mark.attrs,contentElement:this.contentDOM||void 0}}matchesMark(e){return this.dirty!=he&&this.mark.eq(e)}markDirty(e,t){if(super.markDirty(e,t),this.dirty!=oe){let r=this.parent;for(;!r.node;)r=r.parent;r.dirty<this.dirty&&(r.dirty=this.dirty),this.dirty=oe;}}slice(e,t,r){let i=n.create(this.parent,this.mark,!0,r),s=this.children,o=this.size;t<o&&(s=lr(s,t,o,r)),e>0&&(s=lr(s,0,e,r));for(let l=0;l<s.length;l++)s[l].parent=i;return i.children=s,i}},De=class n extends Qe{constructor(e,t,r,i,s,o,l,a,c){super(e,[],s,o),this.node=t,this.outerDeco=r,this.innerDeco=i,this.nodeDOM=l;}static create(e,t,r,i,s,o){let l=s.nodeViews[t.type.name],a,c=l&&l(t,s,()=>{if(!a)return o;if(a.parent)return a.parent.posBeforeChild(a)},r,i),d=c&&c.dom,u=c&&c.contentDOM;if(t.isText){if(!d)d=document.createTextNode(t.text);else if(d.nodeType!=3)throw new RangeError("Text must be rendered as a DOM text node")}else d||({dom:d,contentDOM:u}=ke.renderSpec(document,t.type.spec.toDOM(t)));!u&&!t.isText&&d.nodeName!="BR"&&(d.hasAttribute("contenteditable")||(d.contentEditable="false"),t.type.spec.draggable&&(d.draggable=!0));let f=d;return d=Ws(d,r,t),c?a=new rr(e,t,r,i,d,u||null,f,c,s,o+1):t.isText?new nn(e,t,r,i,d,f,s):new n(e,t,r,i,d,u||null,f,s,o+1)}parseRule(){if(this.node.type.spec.reparseInView)return null;let e={node:this.node.type.name,attrs:this.node.attrs};if(this.node.type.whitespace=="pre"&&(e.preserveWhitespace="full"),!this.contentDOM)e.getContent=()=>this.node.content;else if(!this.contentLost)e.contentElement=this.contentDOM;else {for(let t=this.children.length-1;t>=0;t--){let r=this.children[t];if(this.dom.contains(r.dom.parentNode)){e.contentElement=r.dom.parentNode;break}}e.contentElement||(e.getContent=()=>b.empty);}return e}matchesNode(e,t,r){return this.dirty==oe&&e.eq(this.node)&&sr(t,this.outerDeco)&&r.eq(this.innerDeco)}get size(){return this.node.nodeSize}get border(){return this.node.isLeaf?0:1}updateChildren(e,t){let r=this.node.inlineContent,i=t,s=e.composing?this.localCompositionInfo(e,t):null,o=s&&s.pos>-1?s:null,l=s&&s.pos<0,a=new or(this,o&&o.node,e);La(this.node,this.innerDeco,(c,d,u)=>{c.spec.marks?a.syncToMarks(c.spec.marks,r,e):c.type.side>=0&&!u&&a.syncToMarks(d==this.node.childCount?A.none:this.node.child(d).marks,r,e),a.placeWidget(c,e,i);},(c,d,u,f)=>{a.syncToMarks(c.marks,r,e);let h;a.findNodeMatch(c,d,u,f)||l&&e.state.selection.from>i&&e.state.selection.to<i+c.nodeSize&&(h=a.findIndexWithChild(s.node))>-1&&a.updateNodeAt(c,d,u,h,e)||a.updateNextNode(c,d,u,e,f,i)||a.addNode(c,d,u,e,i),i+=c.nodeSize;}),a.syncToMarks([],r,e),this.node.isTextblock&&a.addTextblockHacks(),a.destroyRest(),(a.changed||this.dirty==Ue)&&(o&&this.protectLocalComposition(e,o),Hs(this.contentDOM,this.children,e),dt&&Fa(this.dom));}localCompositionInfo(e,t){let{from:r,to:i}=e.state.selection;if(!(e.state.selection instanceof w)||r<t||i>t+this.node.content.size)return null;let s=e.domSelectionRange(),o=za(s.focusNode,s.focusOffset);if(!o||!this.dom.contains(o.parentNode))return null;if(this.node.inlineContent){let l=o.nodeValue,a=Va(this.node.content,l,r-t,i-t);return a<0?null:{node:o,pos:a,text:l}}else return {node:o,pos:-1,text:""}}protectLocalComposition(e,{node:t,pos:r,text:i}){if(this.getDesc(t))return;let s=t;for(;s.parentNode!=this.contentDOM;s=s.parentNode){for(;s.previousSibling;)s.parentNode.removeChild(s.previousSibling);for(;s.nextSibling;)s.parentNode.removeChild(s.nextSibling);s.pmViewDesc&&(s.pmViewDesc=void 0);}let o=new nr(this,s,t,i);e.input.compositionNodes.push(o),this.children=lr(this.children,r,r+i.length,e,o);}update(e,t,r,i){return this.dirty==he||!e.sameMarkup(this.node)?!1:(this.updateInner(e,t,r,i),!0)}updateInner(e,t,r,i){this.updateOuterDeco(t),this.node=e,this.innerDeco=r,this.contentDOM&&this.updateChildren(i,this.posAtStart),this.dirty=oe;}updateOuterDeco(e){if(sr(e,this.outerDeco))return;let t=this.nodeDOM.nodeType!=1,r=this.dom;this.dom=Js(this.dom,this.nodeDOM,ir(this.outerDeco,this.node,t),ir(e,this.node,t)),this.dom!=r&&(r.pmViewDesc=void 0,this.dom.pmViewDesc=this),this.outerDeco=e;}selectNode(){this.nodeDOM.nodeType==1&&this.nodeDOM.classList.add("ProseMirror-selectednode"),(this.contentDOM||!this.node.type.spec.draggable)&&(this.dom.draggable=!0);}deselectNode(){this.nodeDOM.nodeType==1&&this.nodeDOM.classList.remove("ProseMirror-selectednode"),(this.contentDOM||!this.node.type.spec.draggable)&&this.dom.removeAttribute("draggable");}get domAtom(){return this.node.isAtom}};function us(n,e,t,r,i){Ws(r,e,n);let s=new De(void 0,n,e,t,r,r,r,i,0);return s.contentDOM&&s.updateChildren(i,0),s}var nn=class n extends De{constructor(e,t,r,i,s,o,l){super(e,t,r,i,s,null,o,l,0);}parseRule(){let e=this.nodeDOM.parentNode;for(;e&&e!=this.dom&&!e.pmIsDeco;)e=e.parentNode;return {skip:e||!0}}update(e,t,r,i){return this.dirty==he||this.dirty!=oe&&!this.inParent()||!e.sameMarkup(this.node)?!1:(this.updateOuterDeco(t),(this.dirty!=oe||e.text!=this.node.text)&&e.text!=this.nodeDOM.nodeValue&&(this.nodeDOM.nodeValue=e.text,i.trackWrites==this.nodeDOM&&(i.trackWrites=null)),this.node=e,this.dirty=oe,!0)}inParent(){let e=this.parent.contentDOM;for(let t=this.nodeDOM;t;t=t.parentNode)if(t==e)return !0;return !1}domFromPos(e){return {node:this.nodeDOM,offset:e}}localPosFromDOM(e,t,r){return e==this.nodeDOM?this.posAtStart+Math.min(t,this.node.text.length):super.localPosFromDOM(e,t,r)}ignoreMutation(e){return e.type!="characterData"&&e.type!="selection"}slice(e,t,r){let i=this.node.cut(e,t),s=document.createTextNode(i.text);return new n(this.parent,i,this.outerDeco,this.innerDeco,s,s,r)}markDirty(e,t){super.markDirty(e,t),this.dom!=this.nodeDOM&&(e==0||t==this.nodeDOM.nodeValue.length)&&(this.dirty=he);}get domAtom(){return !1}},rn=class extends Qe{parseRule(){return {ignore:!0}}matchesHack(e){return this.dirty==oe&&this.dom.nodeName==e}get domAtom(){return !0}get ignoreForCoords(){return this.dom.nodeName=="IMG"}},rr=class extends De{constructor(e,t,r,i,s,o,l,a,c,d){super(e,t,r,i,s,o,l,c,d),this.spec=a;}update(e,t,r,i){if(this.dirty==he)return !1;if(this.spec.update){let s=this.spec.update(e,t,r);return s&&this.updateInner(e,t,r,i),s}else return !this.contentDOM&&!e.isLeaf?!1:super.update(e,t,r,i)}selectNode(){this.spec.selectNode?this.spec.selectNode():super.selectNode();}deselectNode(){this.spec.deselectNode?this.spec.deselectNode():super.deselectNode();}setSelection(e,t,r,i){this.spec.setSelection?this.spec.setSelection(e,t,r):super.setSelection(e,t,r,i);}destroy(){this.spec.destroy&&this.spec.destroy(),super.destroy();}stopEvent(e){return this.spec.stopEvent?this.spec.stopEvent(e):!1}ignoreMutation(e){return this.spec.ignoreMutation?this.spec.ignoreMutation(e):super.ignoreMutation(e)}};function Hs(n,e,t){let r=n.firstChild,i=!1;for(let s=0;s<e.length;s++){let o=e[s],l=o.dom;if(l.parentNode==n){for(;l!=r;)r=fs(r),i=!0;r=r.nextSibling;}else i=!0,n.insertBefore(l,r);if(o instanceof ut){let a=r?r.previousSibling:n.lastChild;Hs(o.contentDOM,o.children,t),r=a?a.nextSibling:n.firstChild;}}for(;r;)r=fs(r),i=!0;i&&t.trackWrites==n&&(t.trackWrites=null);}var vt=function(n){n&&(this.nodeName=n);};vt.prototype=Object.create(null);var _e=[new vt];function ir(n,e,t){if(n.length==0)return _e;let r=t?_e[0]:new vt,i=[r];for(let s=0;s<n.length;s++){let o=n[s].type.attrs;if(o){o.nodeName&&i.push(r=new vt(o.nodeName));for(let l in o){let a=o[l];a!=null&&(t&&i.length==1&&i.push(r=new vt(e.isInline?"span":"div")),l=="class"?r.class=(r.class?r.class+" ":"")+a:l=="style"?r.style=(r.style?r.style+";":"")+a:l!="nodeName"&&(r[l]=a));}}}return i}function Js(n,e,t,r){if(t==_e&&r==_e)return e;let i=e;for(let s=0;s<r.length;s++){let o=r[s],l=t[s];if(s){let a;l&&l.nodeName==o.nodeName&&i!=n&&(a=i.parentNode)&&a.nodeName.toLowerCase()==o.nodeName||(a=document.createElement(o.nodeName),a.pmIsDeco=!0,a.appendChild(i),l=_e[0]),i=a;}Ra(i,l||_e[0],o);}return i}function Ra(n,e,t){for(let r in e)r!="class"&&r!="style"&&r!="nodeName"&&!(r in t)&&n.removeAttribute(r);for(let r in t)r!="class"&&r!="style"&&r!="nodeName"&&t[r]!=e[r]&&n.setAttribute(r,t[r]);if(e.class!=t.class){let r=e.class?e.class.split(" ").filter(Boolean):[],i=t.class?t.class.split(" ").filter(Boolean):[];for(let s=0;s<r.length;s++)i.indexOf(r[s])==-1&&n.classList.remove(r[s]);for(let s=0;s<i.length;s++)r.indexOf(i[s])==-1&&n.classList.add(i[s]);n.classList.length==0&&n.removeAttribute("class");}if(e.style!=t.style){if(e.style){let r=/\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g,i;for(;i=r.exec(e.style);)n.style.removeProperty(i[1]);}t.style&&(n.style.cssText+=t.style);}}function Ws(n,e,t){return Js(n,n,_e,ir(e,t,n.nodeType!=1))}function sr(n,e){if(n.length!=e.length)return !1;for(let t=0;t<n.length;t++)if(!n[t].type.eq(e[t].type))return !1;return !0}function fs(n){let e=n.nextSibling;return n.parentNode.removeChild(n),e}var or=class{constructor(e,t,r){this.lock=t,this.view=r,this.index=0,this.stack=[],this.changed=!1,this.top=e,this.preMatch=Pa(e.node.content,e);}destroyBetween(e,t){if(e!=t){for(let r=e;r<t;r++)this.top.children[r].destroy();this.top.children.splice(e,t-e),this.changed=!0;}}destroyRest(){this.destroyBetween(this.index,this.top.children.length);}syncToMarks(e,t,r){let i=0,s=this.stack.length>>1,o=Math.min(s,e.length);for(;i<o&&(i==s-1?this.top:this.stack[i+1<<1]).matchesMark(e[i])&&e[i].type.spec.spanning!==!1;)i++;for(;i<s;)this.destroyRest(),this.top.dirty=oe,this.index=this.stack.pop(),this.top=this.stack.pop(),s--;for(;s<e.length;){this.stack.push(this.top,this.index+1);let l=-1;for(let a=this.index;a<Math.min(this.index+3,this.top.children.length);a++){let c=this.top.children[a];if(c.matchesMark(e[s])&&!this.isLocked(c.dom)){l=a;break}}if(l>-1)l>this.index&&(this.changed=!0,this.destroyBetween(this.index,l)),this.top=this.top.children[this.index];else {let a=ut.create(this.top,e[s],t,r);this.top.children.splice(this.index,0,a),this.top=a,this.changed=!0;}this.index=0,s++;}}findNodeMatch(e,t,r,i){let s=-1,o;if(i>=this.preMatch.index&&(o=this.preMatch.matches[i-this.preMatch.index]).parent==this.top&&o.matchesNode(e,t,r))s=this.top.children.indexOf(o,this.index);else for(let l=this.index,a=Math.min(this.top.children.length,l+5);l<a;l++){let c=this.top.children[l];if(c.matchesNode(e,t,r)&&!this.preMatch.matched.has(c)){s=l;break}}return s<0?!1:(this.destroyBetween(this.index,s),this.index++,!0)}updateNodeAt(e,t,r,i,s){let o=this.top.children[i];return o.dirty==he&&o.dom==o.contentDOM&&(o.dirty=Ue),o.update(e,t,r,s)?(this.destroyBetween(this.index,i),this.index++,!0):!1}findIndexWithChild(e){for(;;){let t=e.parentNode;if(!t)return -1;if(t==this.top.contentDOM){let r=e.pmViewDesc;if(r){for(let i=this.index;i<this.top.children.length;i++)if(this.top.children[i]==r)return i}return -1}e=t;}}updateNextNode(e,t,r,i,s,o){for(let l=this.index;l<this.top.children.length;l++){let a=this.top.children[l];if(a instanceof De){let c=this.preMatch.matched.get(a);if(c!=null&&c!=s)return !1;let d=a.dom,u,f=this.isLocked(d)&&!(e.isText&&a.node&&a.node.isText&&a.nodeDOM.nodeValue==e.text&&a.dirty!=he&&sr(t,a.outerDeco));if(!f&&a.update(e,t,r,i))return this.destroyBetween(this.index,l),a.dom!=d&&(this.changed=!0),this.index++,!0;if(!f&&(u=this.recreateWrapper(a,e,t,r,i,o)))return this.top.children[this.index]=u,u.dirty=Ue,u.updateChildren(i,o+1),u.dirty=oe,this.changed=!0,this.index++,!0;break}}return !1}recreateWrapper(e,t,r,i,s,o){if(e.dirty||t.isAtom||!e.children.length||!e.node.content.eq(t.content))return null;let l=De.create(this.top,t,r,i,s,o);if(!l.contentDOM)return null;l.children=e.children,e.children=[],e.destroy();for(let a of l.children)a.parent=l;return l}addNode(e,t,r,i,s){let o=De.create(this.top,e,t,r,i,s);o.contentDOM&&o.updateChildren(i,s+1),this.top.children.splice(this.index++,0,o),this.changed=!0;}placeWidget(e,t,r){let i=this.index<this.top.children.length?this.top.children[this.index]:null;if(i&&i.matchesWidget(e)&&(e==i.widget||!i.widget.type.toDOM.parentNode))this.index++;else {let s=new tn(this.top,e,t,r);this.top.children.splice(this.index++,0,s),this.changed=!0;}}addTextblockHacks(){let e=this.top.children[this.index-1],t=this.top;for(;e instanceof ut;)t=e,e=t.children[t.children.length-1];(!e||!(e instanceof nn)||/\n$/.test(e.node.text)||this.view.requiresGeckoHackNode&&/\s$/.test(e.node.text))&&((U||W)&&e&&e.dom.contentEditable=="false"&&this.addHackNode("IMG",t),this.addHackNode("BR",this.top));}addHackNode(e,t){if(t==this.top&&this.index<t.children.length&&t.children[this.index].matchesHack(e))this.index++;else {let r=document.createElement(e);e=="IMG"&&(r.className="ProseMirror-separator",r.alt=""),e=="BR"&&(r.className="ProseMirror-trailingBreak");let i=new rn(this.top,[],r,null);t!=this.top?t.children.push(i):t.children.splice(this.index++,0,i),this.changed=!0;}}isLocked(e){return this.lock&&(e==this.lock||e.nodeType==1&&e.contains(this.lock.parentNode))}};function Pa(n,e){let t=e,r=t.children.length,i=n.childCount,s=new Map,o=[];e:for(;i>0;){let l;for(;;)if(r){let c=t.children[r-1];if(c instanceof ut)t=c,r=c.children.length;else {l=c,r--;break}}else {if(t==e)break e;r=t.parent.children.indexOf(t),t=t.parent;}let a=l.node;if(a){if(a!=n.child(i-1))break;--i,s.set(l,i),o.push(l);}}return {index:i,matched:s,matches:o.reverse()}}function Ba(n,e){return n.type.side-e.type.side}function La(n,e,t,r){let i=e.locals(n),s=0;if(i.length==0){for(let c=0;c<n.childCount;c++){let d=n.child(c);r(d,i,e.forChild(s,d),c),s+=d.nodeSize;}return}let o=0,l=[],a=null;for(let c=0;;){if(o<i.length&&i[o].to==s){let p=i[o++],m;for(;o<i.length&&i[o].to==s;)(m||(m=[p])).push(i[o++]);if(m){m.sort(Ba);for(let g=0;g<m.length;g++)t(m[g],c,!!a);}else t(p,c,!!a);}let d,u;if(a)u=-1,d=a,a=null;else if(c<n.childCount)u=c,d=n.child(c++);else break;for(let p=0;p<l.length;p++)l[p].to<=s&&l.splice(p--,1);for(;o<i.length&&i[o].from<=s&&i[o].to>s;)l.push(i[o++]);let f=s+d.nodeSize;if(d.isText){let p=f;o<i.length&&i[o].from<p&&(p=i[o].from);for(let m=0;m<l.length;m++)l[m].to<p&&(p=l[m].to);p<f&&(a=d.cut(p-s),d=d.cut(0,p-s),f=p,u=-1);}let h=d.isInline&&!d.isLeaf?l.filter(p=>!p.inline):l.slice();r(d,h,e.forChild(s,d),u),s=f;}}function Fa(n){if(n.nodeName=="UL"||n.nodeName=="OL"){let e=n.style.cssText;n.style.cssText=e+"; list-style: square !important",window.getComputedStyle(n).listStyle,n.style.cssText=e;}}function za(n,e){for(;;){if(n.nodeType==3)return n;if(n.nodeType==1&&e>0){if(n.childNodes.length>e&&n.childNodes[e].nodeType==3)return n.childNodes[e];n=n.childNodes[e-1],e=ue(n);}else if(n.nodeType==1&&e<n.childNodes.length)n=n.childNodes[e],e=0;else return null}}function Va(n,e,t,r){for(let i=0,s=0;i<n.childCount&&s<=r;){let o=n.child(i++),l=s;if(s+=o.nodeSize,!o.isText)continue;let a=o.text;for(;i<n.childCount;){let c=n.child(i++);if(s+=c.nodeSize,!c.isText)break;a+=c.text;}if(s>=t){let c=l<r?a.lastIndexOf(e,r-l-1):-1;if(c>=0&&c+e.length+l>=t)return l+c;if(t==r&&a.length>=r+e.length-l&&a.slice(r-l,r-l+e.length)==e)return r}}return -1}function lr(n,e,t,r,i){let s=[];for(let o=0,l=0;o<n.length;o++){let a=n[o],c=l,d=l+=a.size;c>=t||d<=e?s.push(a):(c<e&&s.push(a.slice(0,e-c,r)),i&&(s.push(i),i=void 0),d>t&&s.push(a.slice(t-c,a.size,r)));}return s}function Sr(n,e=null){let t=n.domSelectionRange(),r=n.state.doc;if(!t.focusNode)return null;let i=n.docView.nearestDesc(t.focusNode),s=i&&i.size==0,o=n.docView.posFromDOM(t.focusNode,t.focusOffset,1);if(o<0)return null;let l=r.resolve(o),a,c;if(dn(t)){for(a=l;i&&!i.node;)i=i.parent;let d=i.node;if(i&&d.isAtom&&M.isSelectable(d)&&i.parent&&!(d.isInline&&ua(t.focusNode,t.focusOffset,i.dom))){let u=i.posBefore;c=new M(o==u?l:r.resolve(u));}}else {let d=n.docView.posFromDOM(t.anchorNode,t.anchorOffset,1);if(d<0)return null;a=r.resolve(d);}if(!c){let d=e=="pointer"||n.state.selection.head<l.pos&&!s?1:-1;c=xr(n,a,l,d);}return c}function js(n){return n.editable?n.hasFocus():qs(n)&&document.activeElement&&document.activeElement.contains(n.dom)}function Me(n,e=!1){let t=n.state.selection;if(Ks(n,t),!!js(n)){if(!e&&n.input.mouseDown&&n.input.mouseDown.allowDefault&&W){let r=n.domSelectionRange(),i=n.domObserver.currentSelection;if(r.anchorNode&&i.anchorNode&&Ze(r.anchorNode,r.anchorOffset,i.anchorNode,i.anchorOffset)){n.input.mouseDown.delayedSelectionSync=!0,n.domObserver.setCurSelection();return}}if(n.domObserver.disconnectSelection(),n.cursorWrapper)Ha(n);else {let{anchor:r,head:i}=t,s,o;hs&&!(t instanceof w)&&(t.$from.parent.inlineContent||(s=ps(n,t.from)),!t.empty&&!t.$from.parent.inlineContent&&(o=ps(n,t.to))),n.docView.setSelection(r,i,n.root,e),hs&&(s&&ms(s),o&&ms(o)),t.visible?n.dom.classList.remove("ProseMirror-hideselection"):(n.dom.classList.add("ProseMirror-hideselection"),"onselectionchange"in document&&$a(n));}n.domObserver.setCurSelection(),n.domObserver.connectSelection();}}var hs=U||W&&ma<63;function ps(n,e){let{node:t,offset:r}=n.docView.domFromPos(e,0),i=r<t.childNodes.length?t.childNodes[r]:null,s=r?t.childNodes[r-1]:null;if(U&&i&&i.contentEditable=="false")return Yn(i);if((!i||i.contentEditable=="false")&&(!s||s.contentEditable=="false")){if(i)return Yn(i);if(s)return Yn(s)}}function Yn(n){return n.contentEditable="true",U&&n.draggable&&(n.draggable=!1,n.wasDraggable=!0),n}function ms(n){n.contentEditable="false",n.wasDraggable&&(n.draggable=!0,n.wasDraggable=null);}function $a(n){let e=n.dom.ownerDocument;e.removeEventListener("selectionchange",n.input.hideSelectionGuard);let t=n.domSelectionRange(),r=t.anchorNode,i=t.anchorOffset;e.addEventListener("selectionchange",n.input.hideSelectionGuard=()=>{(t.anchorNode!=r||t.anchorOffset!=i)&&(e.removeEventListener("selectionchange",n.input.hideSelectionGuard),setTimeout(()=>{(!js(n)||n.state.selection.visible)&&n.dom.classList.remove("ProseMirror-hideselection");},20));});}function Ha(n){let e=n.domSelection(),t=document.createRange(),r=n.cursorWrapper.dom,i=r.nodeName=="IMG";i?t.setEnd(r.parentNode,ne(r)+1):t.setEnd(r,0),t.collapse(!1),e.removeAllRanges(),e.addRange(t),!i&&!n.state.selection.visible&&Z&&Ae<=11&&(r.disabled=!0,r.disabled=!1);}function Ks(n,e){if(e instanceof M){let t=n.docView.descAt(e.from);t!=n.lastSelectedViewDesc&&(gs(n),t&&t.selectNode(),n.lastSelectedViewDesc=t);}else gs(n);}function gs(n){n.lastSelectedViewDesc&&(n.lastSelectedViewDesc.parent&&n.lastSelectedViewDesc.deselectNode(),n.lastSelectedViewDesc=void 0);}function xr(n,e,t,r){return n.someProp("createSelectionBetween",i=>i(n,e,t))||w.between(e,t,r)}function ys(n){return n.editable&&!n.hasFocus()?!1:qs(n)}function qs(n){let e=n.domSelectionRange();if(!e.anchorNode)return !1;try{return n.dom.contains(e.anchorNode.nodeType==3?e.anchorNode.parentNode:e.anchorNode)&&(n.editable||n.dom.contains(e.focusNode.nodeType==3?e.focusNode.parentNode:e.focusNode))}catch{return !1}}function Ja(n){let e=n.docView.domFromPos(n.state.selection.anchor,0),t=n.domSelectionRange();return Ze(e.node,e.offset,t.anchorNode,t.anchorOffset)}function ar(n,e){let{$anchor:t,$head:r}=n.selection,i=e>0?t.max(r):t.min(r),s=i.parent.inlineContent?i.depth?n.doc.resolve(e>0?i.after():i.before()):null:i;return s&&C.findFrom(s,e)}function qe(n,e){return n.dispatch(n.state.tr.setSelection(e).scrollIntoView()),!0}function bs(n,e,t){let r=n.state.selection;if(r instanceof w){if(!r.empty||t.indexOf("s")>-1)return !1;if(n.endOfTextblock(e>0?"forward":"backward")){let i=ar(n.state,e);return i&&i instanceof M?qe(n,i):!1}else if(!(se&&t.indexOf("m")>-1)){let i=r.$head,s=i.textOffset?null:e<0?i.nodeBefore:i.nodeAfter,o;if(!s||s.isText)return !1;let l=e<0?i.pos-s.nodeSize:i.pos;return s.isAtom||(o=n.docView.descAt(l))&&!o.contentDOM?M.isSelectable(s)?qe(n,new M(e<0?n.state.doc.resolve(i.pos-s.nodeSize):i)):un?qe(n,new w(n.state.doc.resolve(e<0?l:l+s.nodeSize))):!1:!1}}else {if(r instanceof M&&r.node.isInline)return qe(n,new w(e>0?r.$to:r.$from));{let i=ar(n.state,e);return i?qe(n,i):!1}}}function sn(n){return n.nodeType==3?n.nodeValue.length:n.childNodes.length}function It(n){let e=n.pmViewDesc;return e&&e.size==0&&(n.nextSibling||n.nodeName!="BR")}function Dt(n,e){return e<0?Wa(n):Us(n)}function Wa(n){let e=n.domSelectionRange(),t=e.focusNode,r=e.focusOffset;if(!t)return;let i,s,o=!1;for(de&&t.nodeType==1&&r<sn(t)&&It(t.childNodes[r])&&(o=!0);;)if(r>0){if(t.nodeType!=1)break;{let l=t.childNodes[r-1];if(It(l))i=t,s=--r;else if(l.nodeType==3)t=l,r=t.nodeValue.length;else break}}else {if(_s(t))break;{let l=t.previousSibling;for(;l&&It(l);)i=t.parentNode,s=ne(l),l=l.previousSibling;if(l)t=l,r=sn(t);else {if(t=t.parentNode,t==n.dom)break;r=0;}}}o?cr(n,t,r):i&&cr(n,i,s);}function Us(n){let e=n.domSelectionRange(),t=e.focusNode,r=e.focusOffset;if(!t)return;let i=sn(t),s,o;for(;;)if(r<i){if(t.nodeType!=1)break;let l=t.childNodes[r];if(It(l))s=t,o=++r;else break}else {if(_s(t))break;{let l=t.nextSibling;for(;l&&It(l);)s=l.parentNode,o=ne(l)+1,l=l.nextSibling;if(l)t=l,r=0,i=sn(t);else {if(t=t.parentNode,t==n.dom)break;r=i=0;}}}s&&cr(n,s,o);}function _s(n){let e=n.pmViewDesc;return e&&e.node&&e.node.isBlock}function cr(n,e,t){let r=n.domSelection();if(dn(r)){let s=document.createRange();s.setEnd(e,t),s.setStart(e,t),r.removeAllRanges(),r.addRange(s);}else r.extend&&r.extend(e,t);n.domObserver.setCurSelection();let{state:i}=n;setTimeout(()=>{n.state==i&&Me(n);},50);}function ks(n,e){let t=n.state.doc.resolve(e);if(!(W||ga)&&t.parent.inlineContent){let i=n.coordsAtPos(e);if(e>t.start()){let s=n.coordsAtPos(e-1),o=(s.top+s.bottom)/2;if(o>i.top&&o<i.bottom&&Math.abs(s.left-i.left)>1)return s.left<i.left?"ltr":"rtl"}if(e<t.end()){let s=n.coordsAtPos(e+1),o=(s.top+s.bottom)/2;if(o>i.top&&o<i.bottom&&Math.abs(s.left-i.left)>1)return s.left>i.left?"ltr":"rtl"}}return getComputedStyle(n.dom).direction=="rtl"?"rtl":"ltr"}function Ss(n,e,t){let r=n.state.selection;if(r instanceof w&&!r.empty||t.indexOf("s")>-1||se&&t.indexOf("m")>-1)return !1;let{$from:i,$to:s}=r;if(!i.parent.inlineContent||n.endOfTextblock(e<0?"up":"down")){let o=ar(n.state,e);if(o&&o instanceof M)return qe(n,o)}if(!i.parent.inlineContent){let o=e<0?i:s,l=r instanceof ee?C.near(o,e):C.findFrom(o,e);return l?qe(n,l):!1}return !1}function xs(n,e){if(!(n.state.selection instanceof w))return !0;let{$head:t,$anchor:r,empty:i}=n.state.selection;if(!t.sameParent(r))return !0;if(!i)return !1;if(n.endOfTextblock(e>0?"forward":"backward"))return !0;let s=!t.textOffset&&(e<0?t.nodeBefore:t.nodeAfter);if(s&&!s.isText){let o=n.state.tr;return e<0?o.delete(t.pos-s.nodeSize,t.pos):o.delete(t.pos,t.pos+s.nodeSize),n.dispatch(o),!0}return !1}function Ms(n,e,t){n.domObserver.stop(),e.contentEditable=t,n.domObserver.start();}function ja(n){if(!U||n.state.selection.$head.parentOffset>0)return !1;let{focusNode:e,focusOffset:t}=n.domSelectionRange();if(e&&e.nodeType==1&&t==0&&e.firstChild&&e.firstChild.contentEditable=="false"){let r=e.firstChild;Ms(n,r,"true"),setTimeout(()=>Ms(n,r,"false"),20);}return !1}function Ka(n){let e="";return n.ctrlKey&&(e+="c"),n.metaKey&&(e+="m"),n.altKey&&(e+="a"),n.shiftKey&&(e+="s"),e}function qa(n,e){let t=e.keyCode,r=Ka(e);if(t==8||se&&t==72&&r=="c")return xs(n,-1)||Dt(n,-1);if(t==46&&!e.shiftKey||se&&t==68&&r=="c")return xs(n,1)||Dt(n,1);if(t==13||t==27)return !0;if(t==37||se&&t==66&&r=="c"){let i=t==37?ks(n,n.state.selection.from)=="ltr"?-1:1:-1;return bs(n,i,r)||Dt(n,i)}else if(t==39||se&&t==70&&r=="c"){let i=t==39?ks(n,n.state.selection.from)=="ltr"?1:-1:1;return bs(n,i,r)||Dt(n,i)}else {if(t==38||se&&t==80&&r=="c")return Ss(n,-1,r)||Dt(n,-1);if(t==40||se&&t==78&&r=="c")return ja(n)||Ss(n,1,r)||Us(n);if(r==(se?"m":"c")&&(t==66||t==73||t==89||t==90))return !0}return !1}function Gs(n,e){n.someProp("transformCopied",h=>{e=h(e,n);});let t=[],{content:r,openStart:i,openEnd:s}=e;for(;i>1&&s>1&&r.childCount==1&&r.firstChild.childCount==1;){i--,s--;let h=r.firstChild;t.push(h.type.name,h.attrs!=h.type.defaultAttrs?h.attrs:null),r=h.content;}let o=n.someProp("clipboardSerializer")||ke.fromSchema(n.state.schema),l=to(),a=l.createElement("div");a.appendChild(o.serializeFragment(r,{document:l}));let c=a.firstChild,d,u=0;for(;c&&c.nodeType==1&&(d=eo[c.nodeName.toLowerCase()]);){for(let h=d.length-1;h>=0;h--){let p=l.createElement(d[h]);for(;a.firstChild;)p.appendChild(a.firstChild);a.appendChild(p),u++;}c=a.firstChild;}c&&c.nodeType==1&&c.setAttribute("data-pm-slice",`${i} ${s}${u?` -${u}`:""} ${JSON.stringify(t)}`);let f=n.someProp("clipboardTextSerializer",h=>h(e,n))||e.content.textBetween(0,e.content.size,`

`);return {dom:a,text:f}}function Ys(n,e,t,r,i){let s=i.parent.type.spec.code,o,l;if(!t&&!e)return null;let a=e&&(r||s||!t);if(a){if(n.someProp("transformPastedText",f=>{e=f(e,s||r,n);}),s)return e?new k(b.from(n.state.schema.text(e.replace(/\r\n?/g,`
`))),0,0):k.empty;let u=n.someProp("clipboardTextParser",f=>f(e,i,r,n));if(u)l=u;else {let f=i.marks(),{schema:h}=n.state,p=ke.fromSchema(h);o=document.createElement("div"),e.split(/(?:\r\n?|\n)+/).forEach(m=>{let g=o.appendChild(document.createElement("p"));m&&g.appendChild(p.serializeNode(h.text(m,f)));});}}else n.someProp("transformPastedHTML",u=>{t=u(t,n);}),o=Ga(t),un&&Ya(o);let c=o&&o.querySelector("[data-pm-slice]"),d=c&&/^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(c.getAttribute("data-pm-slice")||"");if(d&&d[3])for(let u=+d[3];u>0;u--){let f=o.firstChild;for(;f&&f.nodeType!=1;)f=f.nextSibling;if(!f)break;o=f;}if(l||(l=(n.someProp("clipboardParser")||n.someProp("domParser")||Je.fromSchema(n.state.schema)).parseSlice(o,{preserveWhitespace:!!(a||d),context:i,ruleFromNode(f){return f.nodeName=="BR"&&!f.nextSibling&&f.parentNode&&!Ua.test(f.parentNode.nodeName)?{ignore:!0}:null}})),d)l=Xa(Cs(l,+d[1],+d[2]),d[4]);else if(l=k.maxOpen(_a(l.content,i),!0),l.openStart||l.openEnd){let u=0,f=0;for(let h=l.content.firstChild;u<l.openStart&&!h.type.spec.isolating;u++,h=h.firstChild);for(let h=l.content.lastChild;f<l.openEnd&&!h.type.spec.isolating;f++,h=h.lastChild);l=Cs(l,u,f);}return n.someProp("transformPasted",u=>{l=u(l,n);}),l}var Ua=/^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;function _a(n,e){if(n.childCount<2)return n;for(let t=e.depth;t>=0;t--){let i=e.node(t).contentMatchAt(e.index(t)),s,o=[];if(n.forEach(l=>{if(!o)return;let a=i.findWrapping(l.type),c;if(!a)return o=null;if(c=o.length&&s.length&&Zs(a,s,l,o[o.length-1],0))o[o.length-1]=c;else {o.length&&(o[o.length-1]=Qs(o[o.length-1],s.length));let d=Xs(l,a);o.push(d),i=i.matchType(d.type),s=a;}}),o)return b.from(o)}return n}function Xs(n,e,t=0){for(let r=e.length-1;r>=t;r--)n=e[r].create(null,b.from(n));return n}function Zs(n,e,t,r,i){if(i<n.length&&i<e.length&&n[i]==e[i]){let s=Zs(n,e,t,r.lastChild,i+1);if(s)return r.copy(r.content.replaceChild(r.childCount-1,s));if(r.contentMatchAt(r.childCount).matchType(i==n.length-1?t.type:n[i+1]))return r.copy(r.content.append(b.from(Xs(t,n,i+1))))}}function Qs(n,e){if(e==0)return n;let t=n.content.replaceChild(n.childCount-1,Qs(n.lastChild,e-1)),r=n.contentMatchAt(n.childCount).fillBefore(b.empty,!0);return n.copy(t.append(r))}function dr(n,e,t,r,i,s){let o=e<0?n.firstChild:n.lastChild,l=o.content;return n.childCount>1&&(s=0),i<r-1&&(l=dr(l,e,t,r,i+1,s)),i>=t&&(l=e<0?o.contentMatchAt(0).fillBefore(l,s<=i).append(l):l.append(o.contentMatchAt(o.childCount).fillBefore(b.empty,!0))),n.replaceChild(e<0?0:n.childCount-1,o.copy(l))}function Cs(n,e,t){return e<n.openStart&&(n=new k(dr(n.content,-1,e,n.openStart,0,n.openEnd),e,n.openEnd)),t<n.openEnd&&(n=new k(dr(n.content,1,t,n.openEnd,0,0),n.openStart,t)),n}var eo={thead:["table"],tbody:["table"],tfoot:["table"],caption:["table"],colgroup:["table"],col:["table","colgroup"],tr:["table","tbody"],td:["table","tbody","tr"],th:["table","tbody","tr"]},ws=null;function to(){return ws||(ws=document.implementation.createHTMLDocument("title"))}function Ga(n){let e=/^(\s*<meta [^>]*>)*/.exec(n);e&&(n=n.slice(e[0].length));let t=to().createElement("div"),r=/<([a-z][^>\s]+)/i.exec(n),i;if((i=r&&eo[r[1].toLowerCase()])&&(n=i.map(s=>"<"+s+">").join("")+n+i.map(s=>"</"+s+">").reverse().join("")),t.innerHTML=n,i)for(let s=0;s<i.length;s++)t=t.querySelector(i[s])||t;return t}function Ya(n){let e=n.querySelectorAll(W?"span:not([class]):not([style])":"span.Apple-converted-space");for(let t=0;t<e.length;t++){let r=e[t];r.childNodes.length==1&&r.textContent=="\xA0"&&r.parentNode&&r.parentNode.replaceChild(n.ownerDocument.createTextNode(" "),r);}}function Xa(n,e){if(!n.size)return n;let t=n.content.firstChild.type.schema,r;try{r=JSON.parse(e);}catch{return n}let{content:i,openStart:s,openEnd:o}=n;for(let l=r.length-2;l>=0;l-=2){let a=t.nodes[r[l]];if(!a||a.hasRequiredAttrs())break;i=b.from(a.create(r[l+1],i)),s++,o++;}return new k(i,s,o)}var _={},G={},Za={touchstart:!0,touchmove:!0},ur=class{constructor(){this.shiftKey=!1,this.mouseDown=null,this.lastKeyCode=null,this.lastKeyCodeTime=0,this.lastClick={time:0,x:0,y:0,type:""},this.lastSelectionOrigin=null,this.lastSelectionTime=0,this.lastIOSEnter=0,this.lastIOSEnterFallbackTimeout=-1,this.lastFocus=0,this.lastTouch=0,this.lastAndroidDelete=0,this.composing=!1,this.composingTimeout=-1,this.compositionNodes=[],this.compositionEndedAt=-2e8,this.compositionID=1,this.domChangeCount=0,this.eventHandlers=Object.create(null),this.hideSelectionGuard=null;}};function Qa(n){for(let e in _){let t=_[e];n.dom.addEventListener(e,n.input.eventHandlers[e]=r=>{tc(n,r)&&!Mr(n,r)&&(n.editable||!(r.type in G))&&t(n,r);},Za[e]?{passive:!0}:void 0);}U&&n.dom.addEventListener("input",()=>null),fr(n);}function Ne(n,e){n.input.lastSelectionOrigin=e,n.input.lastSelectionTime=Date.now();}function ec(n){n.domObserver.stop();for(let e in n.input.eventHandlers)n.dom.removeEventListener(e,n.input.eventHandlers[e]);clearTimeout(n.input.composingTimeout),clearTimeout(n.input.lastIOSEnterFallbackTimeout);}function fr(n){n.someProp("handleDOMEvents",e=>{for(let t in e)n.input.eventHandlers[t]||n.dom.addEventListener(t,n.input.eventHandlers[t]=r=>Mr(n,r));});}function Mr(n,e){return n.someProp("handleDOMEvents",t=>{let r=t[e.type];return r?r(n,e)||e.defaultPrevented:!1})}function tc(n,e){if(!e.bubbles)return !0;if(e.defaultPrevented)return !1;for(let t=e.target;t!=n.dom;t=t.parentNode)if(!t||t.nodeType==11||t.pmViewDesc&&t.pmViewDesc.stopEvent(e))return !1;return !0}function nc(n,e){!Mr(n,e)&&_[e.type]&&(n.editable||!(e.type in G))&&_[e.type](n,e);}G.keydown=(n,e)=>{let t=e;if(n.input.shiftKey=t.keyCode==16||t.shiftKey,!ro(n,t)&&(n.input.lastKeyCode=t.keyCode,n.input.lastKeyCodeTime=Date.now(),!(ce&&W&&t.keyCode==13)))if(t.keyCode!=229&&n.domObserver.forceFlush(),dt&&t.keyCode==13&&!t.ctrlKey&&!t.altKey&&!t.metaKey){let r=Date.now();n.input.lastIOSEnter=r,n.input.lastIOSEnterFallbackTimeout=setTimeout(()=>{n.input.lastIOSEnter==r&&(n.someProp("handleKeyDown",i=>i(n,Ke(13,"Enter"))),n.input.lastIOSEnter=0);},200);}else n.someProp("handleKeyDown",r=>r(n,t))||qa(n,t)?t.preventDefault():Ne(n,"key");};G.keyup=(n,e)=>{e.keyCode==16&&(n.input.shiftKey=!1);};G.keypress=(n,e)=>{let t=e;if(ro(n,t)||!t.charCode||t.ctrlKey&&!t.altKey||se&&t.metaKey)return;if(n.someProp("handleKeyPress",i=>i(n,t))){t.preventDefault();return}let r=n.state.selection;if(!(r instanceof w)||!r.$from.sameParent(r.$to)){let i=String.fromCharCode(t.charCode);!/[\r\n]/.test(i)&&!n.someProp("handleTextInput",s=>s(n,r.$from.pos,r.$to.pos,i))&&n.dispatch(n.state.tr.insertText(i).scrollIntoView()),t.preventDefault();}};function fn(n){return {left:n.clientX,top:n.clientY}}function rc(n,e){let t=e.x-n.clientX,r=e.y-n.clientY;return t*t+r*r<100}function Cr(n,e,t,r,i){if(r==-1)return !1;let s=n.state.doc.resolve(r);for(let o=s.depth+1;o>0;o--)if(n.someProp(e,l=>o>s.depth?l(n,t,s.nodeAfter,s.before(o),i,!0):l(n,t,s.node(o),s.before(o),i,!1)))return !0;return !1}function ct(n,e,t){n.focused||n.focus();let r=n.state.tr.setSelection(e);t=="pointer"&&r.setMeta("pointer",!0),n.dispatch(r);}function ic(n,e){if(e==-1)return !1;let t=n.state.doc.resolve(e),r=t.nodeAfter;return r&&r.isAtom&&M.isSelectable(r)?(ct(n,new M(t),"pointer"),!0):!1}function sc(n,e){if(e==-1)return !1;let t=n.state.selection,r,i;t instanceof M&&(r=t.node);let s=n.state.doc.resolve(e);for(let o=s.depth+1;o>0;o--){let l=o>s.depth?s.nodeAfter:s.node(o);if(M.isSelectable(l)){r&&t.$from.depth>0&&o>=t.$from.depth&&s.before(t.$from.depth+1)==t.$from.pos?i=s.before(t.$from.depth):i=s.before(o);break}}return i!=null?(ct(n,M.create(n.state.doc,i),"pointer"),!0):!1}function oc(n,e,t,r,i){return Cr(n,"handleClickOn",e,t,r)||n.someProp("handleClick",s=>s(n,e,r))||(i?sc(n,t):ic(n,t))}function lc(n,e,t,r){return Cr(n,"handleDoubleClickOn",e,t,r)||n.someProp("handleDoubleClick",i=>i(n,e,r))}function ac(n,e,t,r){return Cr(n,"handleTripleClickOn",e,t,r)||n.someProp("handleTripleClick",i=>i(n,e,r))||cc(n,t,r)}function cc(n,e,t){if(t.button!=0)return !1;let r=n.state.doc;if(e==-1)return r.inlineContent?(ct(n,w.create(r,0,r.content.size),"pointer"),!0):!1;let i=r.resolve(e);for(let s=i.depth+1;s>0;s--){let o=s>i.depth?i.nodeAfter:i.node(s),l=i.before(s);if(o.inlineContent)ct(n,w.create(r,l+1,l+1+o.content.size),"pointer");else if(M.isSelectable(o))ct(n,M.create(r,l),"pointer");else continue;return !0}}function wr(n){return on(n)}var no=se?"metaKey":"ctrlKey";_.mousedown=(n,e)=>{let t=e;n.input.shiftKey=t.shiftKey;let r=wr(n),i=Date.now(),s="singleClick";i-n.input.lastClick.time<500&&rc(t,n.input.lastClick)&&!t[no]&&(n.input.lastClick.type=="singleClick"?s="doubleClick":n.input.lastClick.type=="doubleClick"&&(s="tripleClick")),n.input.lastClick={time:i,x:t.clientX,y:t.clientY,type:s};let o=n.posAtCoords(fn(t));o&&(s=="singleClick"?(n.input.mouseDown&&n.input.mouseDown.done(),n.input.mouseDown=new hr(n,o,t,!!r)):(s=="doubleClick"?lc:ac)(n,o.pos,o.inside,t)?t.preventDefault():Ne(n,"pointer"));};var hr=class{constructor(e,t,r,i){this.view=e,this.pos=t,this.event=r,this.flushed=i,this.delayedSelectionSync=!1,this.mightDrag=null,this.startDoc=e.state.doc,this.selectNode=!!r[no],this.allowDefault=r.shiftKey;let s,o;if(t.inside>-1)s=e.state.doc.nodeAt(t.inside),o=t.inside;else {let d=e.state.doc.resolve(t.pos);s=d.parent,o=d.depth?d.before():0;}let l=i?null:r.target,a=l?e.docView.nearestDesc(l,!0):null;this.target=a?a.dom:null;let{selection:c}=e.state;(r.button==0&&s.type.spec.draggable&&s.type.spec.selectable!==!1||c instanceof M&&c.from<=o&&c.to>o)&&(this.mightDrag={node:s,pos:o,addAttr:!!(this.target&&!this.target.draggable),setUneditable:!!(this.target&&de&&!this.target.hasAttribute("contentEditable"))}),this.target&&this.mightDrag&&(this.mightDrag.addAttr||this.mightDrag.setUneditable)&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!0),this.mightDrag.setUneditable&&setTimeout(()=>{this.view.input.mouseDown==this&&this.target.setAttribute("contentEditable","false");},20),this.view.domObserver.start()),e.root.addEventListener("mouseup",this.up=this.up.bind(this)),e.root.addEventListener("mousemove",this.move=this.move.bind(this)),Ne(e,"pointer");}done(){this.view.root.removeEventListener("mouseup",this.up),this.view.root.removeEventListener("mousemove",this.move),this.mightDrag&&this.target&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&this.target.removeAttribute("draggable"),this.mightDrag.setUneditable&&this.target.removeAttribute("contentEditable"),this.view.domObserver.start()),this.delayedSelectionSync&&setTimeout(()=>Me(this.view)),this.view.input.mouseDown=null;}up(e){if(this.done(),!this.view.dom.contains(e.target))return;let t=this.pos;this.view.state.doc!=this.startDoc&&(t=this.view.posAtCoords(fn(e))),this.updateAllowDefault(e),this.allowDefault||!t?Ne(this.view,"pointer"):oc(this.view,t.pos,t.inside,e,this.selectNode)?e.preventDefault():e.button==0&&(this.flushed||U&&this.mightDrag&&!this.mightDrag.node.isAtom||W&&!this.view.state.selection.visible&&Math.min(Math.abs(t.pos-this.view.state.selection.from),Math.abs(t.pos-this.view.state.selection.to))<=2)?(ct(this.view,C.near(this.view.state.doc.resolve(t.pos)),"pointer"),e.preventDefault()):Ne(this.view,"pointer");}move(e){this.updateAllowDefault(e),Ne(this.view,"pointer"),e.buttons==0&&this.done();}updateAllowDefault(e){!this.allowDefault&&(Math.abs(this.event.x-e.clientX)>4||Math.abs(this.event.y-e.clientY)>4)&&(this.allowDefault=!0);}};_.touchstart=n=>{n.input.lastTouch=Date.now(),wr(n),Ne(n,"pointer");};_.touchmove=n=>{n.input.lastTouch=Date.now(),Ne(n,"pointer");};_.contextmenu=n=>wr(n);function ro(n,e){return n.composing?!0:U&&Math.abs(e.timeStamp-n.input.compositionEndedAt)<500?(n.input.compositionEndedAt=-2e8,!0):!1}var dc=ce?5e3:-1;G.compositionstart=G.compositionupdate=n=>{if(!n.composing){n.domObserver.flush();let{state:e}=n,t=e.selection.$from;if(e.selection.empty&&(e.storedMarks||!t.textOffset&&t.parentOffset&&t.nodeBefore.marks.some(r=>r.type.spec.inclusive===!1)))n.markCursor=n.state.storedMarks||t.marks(),on(n,!0),n.markCursor=null;else if(on(n),de&&e.selection.empty&&t.parentOffset&&!t.textOffset&&t.nodeBefore.marks.length){let r=n.domSelectionRange();for(let i=r.focusNode,s=r.focusOffset;i&&i.nodeType==1&&s!=0;){let o=s<0?i.lastChild:i.childNodes[s-1];if(!o)break;if(o.nodeType==3){n.domSelection().collapse(o,o.nodeValue.length);break}else i=o,s=-1;}}n.input.composing=!0;}io(n,dc);};G.compositionend=(n,e)=>{n.composing&&(n.input.composing=!1,n.input.compositionEndedAt=e.timeStamp,n.input.compositionID++,io(n,20));};function io(n,e){clearTimeout(n.input.composingTimeout),e>-1&&(n.input.composingTimeout=setTimeout(()=>on(n),e));}function so(n){for(n.composing&&(n.input.composing=!1,n.input.compositionEndedAt=uc());n.input.compositionNodes.length>0;)n.input.compositionNodes.pop().markParentsDirty();}function uc(){let n=document.createEvent("Event");return n.initEvent("event",!0,!0),n.timeStamp}function on(n,e=!1){if(!(ce&&n.domObserver.flushingSoon>=0)){if(n.domObserver.forceFlush(),so(n),e||n.docView&&n.docView.dirty){let t=Sr(n);return t&&!t.eq(n.state.selection)?n.dispatch(n.state.tr.setSelection(t)):n.updateState(n.state),!0}return !1}}function fc(n,e){if(!n.dom.parentNode)return;let t=n.dom.parentNode.appendChild(document.createElement("div"));t.appendChild(e),t.style.cssText="position: fixed; left: -10000px; top: 10px";let r=getSelection(),i=document.createRange();i.selectNodeContents(e),n.dom.blur(),r.removeAllRanges(),r.addRange(i),setTimeout(()=>{t.parentNode&&t.parentNode.removeChild(t),n.focus();},50);}var ft=Z&&Ae<15||dt&&ya<604;_.copy=G.cut=(n,e)=>{let t=e,r=n.state.selection,i=t.type=="cut";if(r.empty)return;let s=ft?null:t.clipboardData,o=r.content(),{dom:l,text:a}=Gs(n,o);s?(t.preventDefault(),s.clearData(),s.setData("text/html",l.innerHTML),s.setData("text/plain",a)):fc(n,l),i&&n.dispatch(n.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent","cut"));};function hc(n){return n.openStart==0&&n.openEnd==0&&n.content.childCount==1?n.content.firstChild:null}function pc(n,e){if(!n.dom.parentNode)return;let t=n.input.shiftKey||n.state.selection.$from.parent.type.spec.code,r=n.dom.parentNode.appendChild(document.createElement(t?"textarea":"div"));t||(r.contentEditable="true"),r.style.cssText="position: fixed; left: -10000px; top: 10px",r.focus();let i=n.input.shiftKey&&n.input.lastKeyCode!=45;setTimeout(()=>{n.focus(),r.parentNode&&r.parentNode.removeChild(r),t?Pt(n,r.value,null,i,e):Pt(n,r.textContent,r.innerHTML,i,e);},50);}function Pt(n,e,t,r,i){let s=Ys(n,e,t,r,n.state.selection.$from);if(n.someProp("handlePaste",a=>a(n,i,s||k.empty)))return !0;if(!s)return !1;let o=hc(s),l=o?n.state.tr.replaceSelectionWith(o,r):n.state.tr.replaceSelection(s);return n.dispatch(l.scrollIntoView().setMeta("paste",!0).setMeta("uiEvent","paste")),!0}G.paste=(n,e)=>{let t=e;if(n.composing&&!ce)return;let r=ft?null:t.clipboardData,i=n.input.shiftKey&&n.input.lastKeyCode!=45;r&&Pt(n,r.getData("text/plain"),r.getData("text/html"),i,t)?t.preventDefault():pc(n,t);};var pr=class{constructor(e,t){this.slice=e,this.move=t;}},oo=se?"altKey":"ctrlKey";_.dragstart=(n,e)=>{let t=e,r=n.input.mouseDown;if(r&&r.done(),!t.dataTransfer)return;let i=n.state.selection,s=i.empty?null:n.posAtCoords(fn(t));if(!(s&&s.pos>=i.from&&s.pos<=(i instanceof M?i.to-1:i.to))){if(r&&r.mightDrag)n.dispatch(n.state.tr.setSelection(M.create(n.state.doc,r.mightDrag.pos)));else if(t.target&&t.target.nodeType==1){let c=n.docView.nearestDesc(t.target,!0);c&&c.node.type.spec.draggable&&c!=n.docView&&n.dispatch(n.state.tr.setSelection(M.create(n.state.doc,c.posBefore)));}}let o=n.state.selection.content(),{dom:l,text:a}=Gs(n,o);t.dataTransfer.clearData(),t.dataTransfer.setData(ft?"Text":"text/html",l.innerHTML),t.dataTransfer.effectAllowed="copyMove",ft||t.dataTransfer.setData("text/plain",a),n.dragging=new pr(o,!t[oo]);};_.dragend=n=>{let e=n.dragging;window.setTimeout(()=>{n.dragging==e&&(n.dragging=null);},50);};G.dragover=G.dragenter=(n,e)=>e.preventDefault();G.drop=(n,e)=>{let t=e,r=n.dragging;if(n.dragging=null,!t.dataTransfer)return;let i=n.posAtCoords(fn(t));if(!i)return;let s=n.state.doc.resolve(i.pos),o=r&&r.slice;o?n.someProp("transformPasted",p=>{o=p(o,n);}):o=Ys(n,t.dataTransfer.getData(ft?"Text":"text/plain"),ft?null:t.dataTransfer.getData("text/html"),!1,s);let l=!!(r&&!t[oo]);if(n.someProp("handleDrop",p=>p(n,t,o||k.empty,l))){t.preventDefault();return}if(!o)return;t.preventDefault();let a=o?Yt(n.state.doc,s.pos,o):s.pos;a==null&&(a=s.pos);let c=n.state.tr;l&&c.deleteSelection();let d=c.mapping.map(a),u=o.openStart==0&&o.openEnd==0&&o.content.childCount==1,f=c.doc;if(u?c.replaceRangeWith(d,d,o.content.firstChild):c.replaceRange(d,d,o),c.doc.eq(f))return;let h=c.doc.resolve(d);if(u&&M.isSelectable(o.content.firstChild)&&h.nodeAfter&&h.nodeAfter.sameMarkup(o.content.firstChild))c.setSelection(new M(h));else {let p=c.mapping.map(a);c.mapping.maps[c.mapping.maps.length-1].forEach((m,g,y,x)=>p=x),c.setSelection(xr(n,h,c.doc.resolve(p)));}n.focus(),n.dispatch(c.setMeta("uiEvent","drop"));};_.focus=n=>{n.input.lastFocus=Date.now(),n.focused||(n.domObserver.stop(),n.dom.classList.add("ProseMirror-focused"),n.domObserver.start(),n.focused=!0,setTimeout(()=>{n.docView&&n.hasFocus()&&!n.domObserver.currentSelection.eq(n.domSelectionRange())&&Me(n);},20));};_.blur=(n,e)=>{let t=e;n.focused&&(n.domObserver.stop(),n.dom.classList.remove("ProseMirror-focused"),n.domObserver.start(),t.relatedTarget&&n.dom.contains(t.relatedTarget)&&n.domObserver.currentSelection.clear(),n.focused=!1);};_.beforeinput=(n,e)=>{if(W&&ce&&e.inputType=="deleteContentBackward"){n.domObserver.flushSoon();let{domChangeCount:r}=n.input;setTimeout(()=>{if(n.input.domChangeCount!=r||(n.dom.blur(),n.focus(),n.someProp("handleKeyDown",s=>s(n,Ke(8,"Backspace")))))return;let{$cursor:i}=n.state.selection;i&&i.pos>0&&n.dispatch(n.state.tr.delete(i.pos-1,i.pos).scrollIntoView());},50);}};for(let n in G)_[n]=G[n];function Bt(n,e){if(n==e)return !0;for(let t in n)if(n[t]!==e[t])return !1;for(let t in e)if(!(t in n))return !1;return !0}var mr=class n{constructor(e,t){this.toDOM=e,this.spec=t||Ye,this.side=this.spec.side||0;}map(e,t,r,i){let{pos:s,deleted:o}=e.mapResult(t.from+i,this.side<0?-1:1);return o?null:new pe(s-r,s-r,this)}valid(){return !0}eq(e){return this==e||e instanceof n&&(this.spec.key&&this.spec.key==e.spec.key||this.toDOM==e.toDOM&&Bt(this.spec,e.spec))}destroy(e){this.spec.destroy&&this.spec.destroy(e);}},Ge=class n{constructor(e,t){this.attrs=e,this.spec=t||Ye;}map(e,t,r,i){let s=e.map(t.from+i,this.spec.inclusiveStart?-1:1)-r,o=e.map(t.to+i,this.spec.inclusiveEnd?1:-1)-r;return s>=o?null:new pe(s,o,this)}valid(e,t){return t.from<t.to}eq(e){return this==e||e instanceof n&&Bt(this.attrs,e.attrs)&&Bt(this.spec,e.spec)}static is(e){return e.type instanceof n}destroy(){}},gr=class n{constructor(e,t){this.attrs=e,this.spec=t||Ye;}map(e,t,r,i){let s=e.mapResult(t.from+i,1);if(s.deleted)return null;let o=e.mapResult(t.to+i,-1);return o.deleted||o.pos<=s.pos?null:new pe(s.pos-r,o.pos-r,this)}valid(e,t){let{index:r,offset:i}=e.content.findIndex(t.from),s;return i==t.from&&!(s=e.child(r)).isText&&i+s.nodeSize==t.to}eq(e){return this==e||e instanceof n&&Bt(this.attrs,e.attrs)&&Bt(this.spec,e.spec)}destroy(){}},pe=class n{constructor(e,t,r){this.from=e,this.to=t,this.type=r;}copy(e,t){return new n(e,t,this.type)}eq(e,t=0){return this.type.eq(e.type)&&this.from+t==e.from&&this.to+t==e.to}map(e,t,r){return this.type.map(e,this,t,r)}static widget(e,t,r){return new n(e,e,new mr(t,r))}static inline(e,t,r,i){return new n(e,t,new Ge(r,i))}static node(e,t,r,i){return new n(e,t,new gr(r,i))}get spec(){return this.type.spec}get inline(){return this.type instanceof Ge}},at=[],Ye={},Q=class n{constructor(e,t){this.local=e.length?e:at,this.children=t.length?t:at;}static create(e,t){return t.length?an(t,e,0,Ye):J}find(e,t,r){let i=[];return this.findInner(e??0,t??1e9,i,0,r),i}findInner(e,t,r,i,s){for(let o=0;o<this.local.length;o++){let l=this.local[o];l.from<=t&&l.to>=e&&(!s||s(l.spec))&&r.push(l.copy(l.from+i,l.to+i));}for(let o=0;o<this.children.length;o+=3)if(this.children[o]<t&&this.children[o+1]>e){let l=this.children[o]+1;this.children[o+2].findInner(e-l,t-l,r,i+l,s);}}map(e,t,r){return this==J||e.maps.length==0?this:this.mapInner(e,t,0,0,r||Ye)}mapInner(e,t,r,i,s){let o;for(let l=0;l<this.local.length;l++){let a=this.local[l].map(e,r,i);a&&a.type.valid(t,a)?(o||(o=[])).push(a):s.onRemove&&s.onRemove(this.local[l].spec);}return this.children.length?mc(this.children,o||[],e,t,r,i,s):o?new n(o.sort(Xe),at):J}add(e,t){return t.length?this==J?n.create(e,t):this.addInner(e,t,0):this}addInner(e,t,r){let i,s=0;e.forEach((l,a)=>{let c=a+r,d;if(d=ao(t,l,c)){for(i||(i=this.children.slice());s<i.length&&i[s]<a;)s+=3;i[s]==a?i[s+2]=i[s+2].addInner(l,d,c+1):i.splice(s,0,a,a+l.nodeSize,an(d,l,c+1,Ye)),s+=3;}});let o=lo(s?co(t):t,-r);for(let l=0;l<o.length;l++)o[l].type.valid(e,o[l])||o.splice(l--,1);return new n(o.length?this.local.concat(o).sort(Xe):this.local,i||this.children)}remove(e){return e.length==0||this==J?this:this.removeInner(e,0)}removeInner(e,t){let r=this.children,i=this.local;for(let s=0;s<r.length;s+=3){let o,l=r[s]+t,a=r[s+1]+t;for(let d=0,u;d<e.length;d++)(u=e[d])&&u.from>l&&u.to<a&&(e[d]=null,(o||(o=[])).push(u));if(!o)continue;r==this.children&&(r=this.children.slice());let c=r[s+2].removeInner(o,l+1);c!=J?r[s+2]=c:(r.splice(s,3),s-=3);}if(i.length){for(let s=0,o;s<e.length;s++)if(o=e[s])for(let l=0;l<i.length;l++)i[l].eq(o,t)&&(i==this.local&&(i=this.local.slice()),i.splice(l--,1));}return r==this.children&&i==this.local?this:i.length||r.length?new n(i,r):J}forChild(e,t){if(this==J)return this;if(t.isLeaf)return n.empty;let r,i;for(let l=0;l<this.children.length;l+=3)if(this.children[l]>=e){this.children[l]==e&&(r=this.children[l+2]);break}let s=e+1,o=s+t.content.size;for(let l=0;l<this.local.length;l++){let a=this.local[l];if(a.from<o&&a.to>s&&a.type instanceof Ge){let c=Math.max(s,a.from)-s,d=Math.min(o,a.to)-s;c<d&&(i||(i=[])).push(a.copy(c,d));}}if(i){let l=new n(i.sort(Xe),at);return r?new ln([l,r]):l}return r||J}eq(e){if(this==e)return !0;if(!(e instanceof n)||this.local.length!=e.local.length||this.children.length!=e.children.length)return !1;for(let t=0;t<this.local.length;t++)if(!this.local[t].eq(e.local[t]))return !1;for(let t=0;t<this.children.length;t+=3)if(this.children[t]!=e.children[t]||this.children[t+1]!=e.children[t+1]||!this.children[t+2].eq(e.children[t+2]))return !1;return !0}locals(e){return Or(this.localsInner(e))}localsInner(e){if(this==J)return at;if(e.inlineContent||!this.local.some(Ge.is))return this.local;let t=[];for(let r=0;r<this.local.length;r++)this.local[r].type instanceof Ge||t.push(this.local[r]);return t}};Q.empty=new Q([],[]);Q.removeOverlap=Or;var J=Q.empty,ln=class n{constructor(e){this.members=e;}map(e,t){let r=this.members.map(i=>i.map(e,t,Ye));return n.from(r)}forChild(e,t){if(t.isLeaf)return Q.empty;let r=[];for(let i=0;i<this.members.length;i++){let s=this.members[i].forChild(e,t);s!=J&&(s instanceof n?r=r.concat(s.members):r.push(s));}return n.from(r)}eq(e){if(!(e instanceof n)||e.members.length!=this.members.length)return !1;for(let t=0;t<this.members.length;t++)if(!this.members[t].eq(e.members[t]))return !1;return !0}locals(e){let t,r=!0;for(let i=0;i<this.members.length;i++){let s=this.members[i].localsInner(e);if(s.length)if(!t)t=s;else {r&&(t=t.slice(),r=!1);for(let o=0;o<s.length;o++)t.push(s[o]);}}return t?Or(r?t:t.sort(Xe)):at}static from(e){switch(e.length){case 0:return J;case 1:return e[0];default:return new n(e.every(t=>t instanceof Q)?e:e.reduce((t,r)=>t.concat(r instanceof Q?r:r.members),[]))}}};function mc(n,e,t,r,i,s,o){let l=n.slice();for(let c=0,d=s;c<t.maps.length;c++){let u=0;t.maps[c].forEach((f,h,p,m)=>{let g=m-p-(h-f);for(let y=0;y<l.length;y+=3){let x=l[y+1];if(x<0||f>x+d-u)continue;let T=l[y]+d-u;h>=T?l[y+1]=f<=T?-2:-1:p>=i&&g&&(l[y]+=g,l[y+1]+=g);}u+=g;}),d=t.maps[c].map(d,-1);}let a=!1;for(let c=0;c<l.length;c+=3)if(l[c+1]<0){if(l[c+1]==-2){a=!0,l[c+1]=-1;continue}let d=t.map(n[c]+s),u=d-i;if(u<0||u>=r.content.size){a=!0;continue}let f=t.map(n[c+1]+s,-1),h=f-i,{index:p,offset:m}=r.content.findIndex(u),g=r.maybeChild(p);if(g&&m==u&&m+g.nodeSize==h){let y=l[c+2].mapInner(t,g,d+1,n[c]+s+1,o);y!=J?(l[c]=u,l[c+1]=h,l[c+2]=y):(l[c+1]=-2,a=!0);}else a=!0;}if(a){let c=gc(l,n,e,t,i,s,o),d=an(c,r,0,o);e=d.local;for(let u=0;u<l.length;u+=3)l[u+1]<0&&(l.splice(u,3),u-=3);for(let u=0,f=0;u<d.children.length;u+=3){let h=d.children[u];for(;f<l.length&&l[f]<h;)f+=3;l.splice(f,0,d.children[u],d.children[u+1],d.children[u+2]);}}return new Q(e.sort(Xe),l)}function lo(n,e){if(!e||!n.length)return n;let t=[];for(let r=0;r<n.length;r++){let i=n[r];t.push(new pe(i.from+e,i.to+e,i.type));}return t}function gc(n,e,t,r,i,s,o){function l(a,c){for(let d=0;d<a.local.length;d++){let u=a.local[d].map(r,i,c);u?t.push(u):o.onRemove&&o.onRemove(a.local[d].spec);}for(let d=0;d<a.children.length;d+=3)l(a.children[d+2],a.children[d]+c+1);}for(let a=0;a<n.length;a+=3)n[a+1]==-1&&l(n[a+2],e[a]+s+1);return t}function ao(n,e,t){if(e.isLeaf)return null;let r=t+e.nodeSize,i=null;for(let s=0,o;s<n.length;s++)(o=n[s])&&o.from>t&&o.to<r&&((i||(i=[])).push(o),n[s]=null);return i}function co(n){let e=[];for(let t=0;t<n.length;t++)n[t]!=null&&e.push(n[t]);return e}function an(n,e,t,r){let i=[],s=!1;e.forEach((l,a)=>{let c=ao(n,l,a+t);if(c){s=!0;let d=an(c,l,t+a+1,r);d!=J&&i.push(a,a+l.nodeSize,d);}});let o=lo(s?co(n):n,-t).sort(Xe);for(let l=0;l<o.length;l++)o[l].type.valid(e,o[l])||(r.onRemove&&r.onRemove(o[l].spec),o.splice(l--,1));return o.length||i.length?new Q(o,i):J}function Xe(n,e){return n.from-e.from||n.to-e.to}function Or(n){let e=n;for(let t=0;t<e.length-1;t++){let r=e[t];if(r.from!=r.to)for(let i=t+1;i<e.length;i++){let s=e[i];if(s.from==r.from){s.to!=r.to&&(e==n&&(e=n.slice()),e[i]=s.copy(s.from,r.to),Os(e,i+1,s.copy(r.to,s.to)));continue}else {s.from<r.to&&(e==n&&(e=n.slice()),e[t]=r.copy(r.from,s.from),Os(e,i,r.copy(s.from,r.to)));break}}}return e}function Os(n,e,t){for(;e<n.length&&Xe(t,n[e])>0;)e++;n.splice(e,0,t);}function Xn(n){let e=[];return n.someProp("decorations",t=>{let r=t(n.state);r&&r!=J&&e.push(r);}),n.cursorWrapper&&e.push(Q.create(n.state.doc,[n.cursorWrapper.deco])),ln.from(e)}var yc={childList:!0,characterData:!0,characterDataOldValue:!0,attributes:!0,attributeOldValue:!0,subtree:!0},bc=Z&&Ae<=11,yr=class{constructor(){this.anchorNode=null,this.anchorOffset=0,this.focusNode=null,this.focusOffset=0;}set(e){this.anchorNode=e.anchorNode,this.anchorOffset=e.anchorOffset,this.focusNode=e.focusNode,this.focusOffset=e.focusOffset;}clear(){this.anchorNode=this.focusNode=null;}eq(e){return e.anchorNode==this.anchorNode&&e.anchorOffset==this.anchorOffset&&e.focusNode==this.focusNode&&e.focusOffset==this.focusOffset}},br=class{constructor(e,t){this.view=e,this.handleDOMChange=t,this.queue=[],this.flushingSoon=-1,this.observer=null,this.currentSelection=new yr,this.onCharData=null,this.suppressingSelectionUpdates=!1,this.observer=window.MutationObserver&&new window.MutationObserver(r=>{for(let i=0;i<r.length;i++)this.queue.push(r[i]);Z&&Ae<=11&&r.some(i=>i.type=="childList"&&i.removedNodes.length||i.type=="characterData"&&i.oldValue.length>i.target.nodeValue.length)?this.flushSoon():this.flush();}),bc&&(this.onCharData=r=>{this.queue.push({target:r.target,type:"characterData",oldValue:r.prevValue}),this.flushSoon();}),this.onSelectionChange=this.onSelectionChange.bind(this);}flushSoon(){this.flushingSoon<0&&(this.flushingSoon=window.setTimeout(()=>{this.flushingSoon=-1,this.flush();},20));}forceFlush(){this.flushingSoon>-1&&(window.clearTimeout(this.flushingSoon),this.flushingSoon=-1,this.flush());}start(){this.observer&&(this.observer.takeRecords(),this.observer.observe(this.view.dom,yc)),this.onCharData&&this.view.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.connectSelection();}stop(){if(this.observer){let e=this.observer.takeRecords();if(e.length){for(let t=0;t<e.length;t++)this.queue.push(e[t]);window.setTimeout(()=>this.flush(),20);}this.observer.disconnect();}this.onCharData&&this.view.dom.removeEventListener("DOMCharacterDataModified",this.onCharData),this.disconnectSelection();}connectSelection(){this.view.dom.ownerDocument.addEventListener("selectionchange",this.onSelectionChange);}disconnectSelection(){this.view.dom.ownerDocument.removeEventListener("selectionchange",this.onSelectionChange);}suppressSelectionUpdates(){this.suppressingSelectionUpdates=!0,setTimeout(()=>this.suppressingSelectionUpdates=!1,50);}onSelectionChange(){if(ys(this.view)){if(this.suppressingSelectionUpdates)return Me(this.view);if(Z&&Ae<=11&&!this.view.state.selection.empty){let e=this.view.domSelectionRange();if(e.focusNode&&Ze(e.focusNode,e.focusOffset,e.anchorNode,e.anchorOffset))return this.flushSoon()}this.flush();}}setCurSelection(){this.currentSelection.set(this.view.domSelectionRange());}ignoreSelectionChange(e){if(!e.focusNode)return !0;let t=new Set,r;for(let s=e.focusNode;s;s=Rt(s))t.add(s);for(let s=e.anchorNode;s;s=Rt(s))if(t.has(s)){r=s;break}let i=r&&this.view.docView.nearestDesc(r);if(i&&i.ignoreMutation({type:"selection",target:r.nodeType==3?r.parentNode:r}))return this.setCurSelection(),!0}flush(){let{view:e}=this;if(!e.docView||this.flushingSoon>-1)return;let t=this.observer?this.observer.takeRecords():[];this.queue.length&&(t=this.queue.concat(t),this.queue.length=0);let r=e.domSelectionRange(),i=!this.suppressingSelectionUpdates&&!this.currentSelection.eq(r)&&ys(e)&&!this.ignoreSelectionChange(r),s=-1,o=-1,l=!1,a=[];if(e.editable)for(let d=0;d<t.length;d++){let u=this.registerMutation(t[d],a);u&&(s=s<0?u.from:Math.min(u.from,s),o=o<0?u.to:Math.max(u.to,o),u.typeOver&&(l=!0));}if(de&&a.length>1){let d=a.filter(u=>u.nodeName=="BR");if(d.length==2){let u=d[0],f=d[1];u.parentNode&&u.parentNode.parentNode==f.parentNode?f.remove():u.remove();}}let c=null;s<0&&i&&e.input.lastFocus>Date.now()-200&&Math.max(e.input.lastTouch,e.input.lastClick.time)<Date.now()-300&&dn(r)&&(c=Sr(e))&&c.eq(C.near(e.state.doc.resolve(0),1))?(e.input.lastFocus=0,Me(e),this.currentSelection.set(r),e.scrollToSelection()):(s>-1||i)&&(s>-1&&(e.docView.markDirty(s,o),kc(e)),this.handleDOMChange(s,o,l,a),e.docView&&e.docView.dirty?e.updateState(e.state):this.currentSelection.eq(r)||Me(e),this.currentSelection.set(r));}registerMutation(e,t){if(t.indexOf(e.target)>-1)return null;let r=this.view.docView.nearestDesc(e.target);if(e.type=="attributes"&&(r==this.view.docView||e.attributeName=="contenteditable"||e.attributeName=="style"&&!e.oldValue&&!e.target.getAttribute("style"))||!r||r.ignoreMutation(e))return null;if(e.type=="childList"){for(let d=0;d<e.addedNodes.length;d++)t.push(e.addedNodes[d]);if(r.contentDOM&&r.contentDOM!=r.dom&&!r.contentDOM.contains(e.target))return {from:r.posBefore,to:r.posAfter};let i=e.previousSibling,s=e.nextSibling;if(Z&&Ae<=11&&e.addedNodes.length)for(let d=0;d<e.addedNodes.length;d++){let{previousSibling:u,nextSibling:f}=e.addedNodes[d];(!u||Array.prototype.indexOf.call(e.addedNodes,u)<0)&&(i=u),(!f||Array.prototype.indexOf.call(e.addedNodes,f)<0)&&(s=f);}let o=i&&i.parentNode==e.target?ne(i)+1:0,l=r.localPosFromDOM(e.target,o,-1),a=s&&s.parentNode==e.target?ne(s):e.target.childNodes.length,c=r.localPosFromDOM(e.target,a,1);return {from:l,to:c}}else return e.type=="attributes"?{from:r.posAtStart-r.border,to:r.posAtEnd+r.border}:{from:r.posAtStart,to:r.posAtEnd,typeOver:e.target.nodeValue==e.oldValue}}},Ts=new WeakMap,Es=!1;function kc(n){if(!Ts.has(n)&&(Ts.set(n,null),["normal","nowrap","pre-line"].indexOf(getComputedStyle(n.dom).whiteSpace)!==-1)){if(n.requiresGeckoHackNode=de,Es)return;console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package."),Es=!0;}}function Sc(n){let e;function t(a){a.preventDefault(),a.stopImmediatePropagation(),e=a.getTargetRanges()[0];}n.dom.addEventListener("beforeinput",t,!0),document.execCommand("indent"),n.dom.removeEventListener("beforeinput",t,!0);let r=e.startContainer,i=e.startOffset,s=e.endContainer,o=e.endOffset,l=n.domAtPos(n.state.selection.anchor);return Ze(l.node,l.offset,s,o)&&([r,i,s,o]=[s,o,r,i]),{anchorNode:r,anchorOffset:i,focusNode:s,focusOffset:o}}function xc(n,e,t){let{node:r,fromOffset:i,toOffset:s,from:o,to:l}=n.docView.parseRange(e,t),a=n.domSelectionRange(),c,d=a.anchorNode;if(d&&n.dom.contains(d.nodeType==1?d:d.parentNode)&&(c=[{node:d,offset:a.anchorOffset}],dn(a)||c.push({node:a.focusNode,offset:a.focusOffset})),W&&n.input.lastKeyCode===8)for(let g=s;g>i;g--){let y=r.childNodes[g-1],x=y.pmViewDesc;if(y.nodeName=="BR"&&!x){s=g;break}if(!x||x.size)break}let u=n.state.doc,f=n.someProp("domParser")||Je.fromSchema(n.state.schema),h=u.resolve(o),p=null,m=f.parse(r,{topNode:h.parent,topMatch:h.parent.contentMatchAt(h.index()),topOpen:!0,from:i,to:s,preserveWhitespace:h.parent.type.whitespace=="pre"?"full":!0,findPositions:c,ruleFromNode:Mc,context:h});if(c&&c[0].pos!=null){let g=c[0].pos,y=c[1]&&c[1].pos;y==null&&(y=g),p={anchor:g+o,head:y+o};}return {doc:m,sel:p,from:o,to:l}}function Mc(n){let e=n.pmViewDesc;if(e)return e.parseRule();if(n.nodeName=="BR"&&n.parentNode){if(U&&/^(ul|ol)$/i.test(n.parentNode.nodeName)){let t=document.createElement("div");return t.appendChild(document.createElement("li")),{skip:t}}else if(n.parentNode.lastChild==n||U&&/^(tr|table)$/i.test(n.parentNode.nodeName))return {ignore:!0}}else if(n.nodeName=="IMG"&&n.getAttribute("mark-placeholder"))return {ignore:!0};return null}var Cc=/^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;function wc(n,e,t,r,i){if(e<0){let E=n.input.lastSelectionTime>Date.now()-50?n.input.lastSelectionOrigin:null,we=Sr(n,E);if(we&&!n.state.selection.eq(we)){if(W&&ce&&n.input.lastKeyCode===13&&Date.now()-100<n.input.lastKeyCodeTime&&n.someProp("handleKeyDown",Ml=>Ml(n,Ke(13,"Enter"))))return;let zt=n.state.tr.setSelection(we);E=="pointer"?zt.setMeta("pointer",!0):E=="key"&&zt.scrollIntoView(),n.composing&&zt.setMeta("composition",n.input.compositionID),n.dispatch(zt);}return}let s=n.state.doc.resolve(e),o=s.sharedDepth(t);e=s.before(o+1),t=n.state.doc.resolve(t).after(o+1);let l=n.state.selection,a=xc(n,e,t),c=n.state.doc,d=c.slice(a.from,a.to),u,f;n.input.lastKeyCode===8&&Date.now()-100<n.input.lastKeyCodeTime?(u=n.state.selection.to,f="end"):(u=n.state.selection.from,f="start"),n.input.lastKeyCode=null;let h=Ec(d.content,a.doc.content,a.from,u,f);if((dt&&n.input.lastIOSEnter>Date.now()-225||ce)&&i.some(E=>E.nodeType==1&&!Cc.test(E.nodeName))&&(!h||h.endA>=h.endB)&&n.someProp("handleKeyDown",E=>E(n,Ke(13,"Enter")))){n.input.lastIOSEnter=0;return}if(!h)if(r&&l instanceof w&&!l.empty&&l.$head.sameParent(l.$anchor)&&!n.composing&&!(a.sel&&a.sel.anchor!=a.sel.head))h={start:l.from,endA:l.to,endB:l.to};else {if(a.sel){let E=Ns(n,n.state.doc,a.sel);if(E&&!E.eq(n.state.selection)){let we=n.state.tr.setSelection(E);n.composing&&we.setMeta("composition",n.input.compositionID),n.dispatch(we);}}return}if(W&&n.cursorWrapper&&a.sel&&a.sel.anchor==n.cursorWrapper.deco.from&&a.sel.head==a.sel.anchor){let E=h.endB-h.start;a.sel={anchor:a.sel.anchor+E,head:a.sel.anchor+E};}n.input.domChangeCount++,n.state.selection.from<n.state.selection.to&&h.start==h.endB&&n.state.selection instanceof w&&(h.start>n.state.selection.from&&h.start<=n.state.selection.from+2&&n.state.selection.from>=a.from?h.start=n.state.selection.from:h.endA<n.state.selection.to&&h.endA>=n.state.selection.to-2&&n.state.selection.to<=a.to&&(h.endB+=n.state.selection.to-h.endA,h.endA=n.state.selection.to)),Z&&Ae<=11&&h.endB==h.start+1&&h.endA==h.start&&h.start>a.from&&a.doc.textBetween(h.start-a.from-1,h.start-a.from+1)==" \xA0"&&(h.start--,h.endA--,h.endB--);let p=a.doc.resolveNoCache(h.start-a.from),m=a.doc.resolveNoCache(h.endB-a.from),g=c.resolve(h.start),y=p.sameParent(m)&&p.parent.inlineContent&&g.end()>=h.endA,x;if((dt&&n.input.lastIOSEnter>Date.now()-225&&(!y||i.some(E=>E.nodeName=="DIV"||E.nodeName=="P"))||!y&&p.pos<a.doc.content.size&&!p.sameParent(m)&&(x=C.findFrom(a.doc.resolve(p.pos+1),1,!0))&&x.head==m.pos)&&n.someProp("handleKeyDown",E=>E(n,Ke(13,"Enter")))){n.input.lastIOSEnter=0;return}if(n.state.selection.anchor>h.start&&Tc(c,h.start,h.endA,p,m)&&n.someProp("handleKeyDown",E=>E(n,Ke(8,"Backspace")))){ce&&W&&n.domObserver.suppressSelectionUpdates();return}W&&ce&&h.endB==h.start&&(n.input.lastAndroidDelete=Date.now()),ce&&!y&&p.start()!=m.start()&&m.parentOffset==0&&p.depth==m.depth&&a.sel&&a.sel.anchor==a.sel.head&&a.sel.head==h.endA&&(h.endB-=2,m=a.doc.resolveNoCache(h.endB-a.from),setTimeout(()=>{n.someProp("handleKeyDown",function(E){return E(n,Ke(13,"Enter"))});},20));let T=h.start,I=h.endA,D,L,q;if(y){if(p.pos==m.pos)Z&&Ae<=11&&p.parentOffset==0&&(n.domObserver.suppressSelectionUpdates(),setTimeout(()=>Me(n),20)),D=n.state.tr.delete(T,I),L=c.resolve(h.start).marksAcross(c.resolve(h.endA));else if(h.endA==h.endB&&(q=Oc(p.parent.content.cut(p.parentOffset,m.parentOffset),g.parent.content.cut(g.parentOffset,h.endA-g.start()))))D=n.state.tr,q.type=="add"?D.addMark(T,I,q.mark):D.removeMark(T,I,q.mark);else if(p.parent.child(p.index()).isText&&p.index()==m.index()-(m.textOffset?0:1)){let E=p.parent.textBetween(p.parentOffset,m.parentOffset);if(n.someProp("handleTextInput",we=>we(n,T,I,E)))return;D=n.state.tr.insertText(E,T,I);}}if(D||(D=n.state.tr.replace(T,I,a.doc.slice(h.start-a.from,h.endB-a.from))),a.sel){let E=Ns(n,D.doc,a.sel);E&&!(W&&ce&&n.composing&&E.empty&&(h.start!=h.endB||n.input.lastAndroidDelete<Date.now()-100)&&(E.head==T||E.head==D.mapping.map(I)-1)||Z&&E.empty&&E.head==T)&&D.setSelection(E);}L&&D.ensureMarks(L),n.composing&&D.setMeta("composition",n.input.compositionID),n.dispatch(D.scrollIntoView());}function Ns(n,e,t){return Math.max(t.anchor,t.head)>e.content.size?null:xr(n,e.resolve(t.anchor),e.resolve(t.head))}function Oc(n,e){let t=n.firstChild.marks,r=e.firstChild.marks,i=t,s=r,o,l,a;for(let d=0;d<r.length;d++)i=r[d].removeFromSet(i);for(let d=0;d<t.length;d++)s=t[d].removeFromSet(s);if(i.length==1&&s.length==0)l=i[0],o="add",a=d=>d.mark(l.addToSet(d.marks));else if(i.length==0&&s.length==1)l=s[0],o="remove",a=d=>d.mark(l.removeFromSet(d.marks));else return null;let c=[];for(let d=0;d<e.childCount;d++)c.push(a(e.child(d)));if(b.from(c).eq(n))return {mark:l,type:o}}function Tc(n,e,t,r,i){if(!r.parent.isTextblock||t-e<=i.pos-r.pos||Zn(r,!0,!1)<i.pos)return !1;let s=n.resolve(e);if(s.parentOffset<s.parent.content.size||!s.parent.isTextblock)return !1;let o=n.resolve(Zn(s,!0,!0));return !o.parent.isTextblock||o.pos>t||Zn(o,!0,!1)<t?!1:r.parent.content.cut(r.parentOffset).eq(o.parent.content)}function Zn(n,e,t){let r=n.depth,i=e?n.end():n.pos;for(;r>0&&(e||n.indexAfter(r)==n.node(r).childCount);)r--,i++,e=!1;if(t){let s=n.node(r).maybeChild(n.indexAfter(r));for(;s&&!s.isLeaf;)s=s.firstChild,i++;}return i}function Ec(n,e,t,r,i){let s=n.findDiffStart(e,t);if(s==null)return null;let{a:o,b:l}=n.findDiffEnd(e,t+n.size,t+e.size);if(i=="end"){let a=Math.max(0,s-Math.min(o,l));r-=o+a-s;}if(o<s&&n.size<e.size){let a=r<=s&&r>=o?s-r:0;s-=a,l=s+(l-o),o=s;}else if(l<s){let a=r<=s&&r>=l?s-r:0;s-=a,o=s+(o-l),l=s;}return {start:s,endA:o,endB:l}}var cn=class{constructor(e,t){this._root=null,this.focused=!1,this.trackWrites=null,this.mounted=!1,this.markCursor=null,this.cursorWrapper=null,this.lastSelectedViewDesc=void 0,this.input=new ur,this.prevDirectPlugins=[],this.pluginViews=[],this.requiresGeckoHackNode=!1,this.dragging=null,this._props=t,this.state=t.state,this.directPlugins=t.plugins||[],this.directPlugins.forEach(Rs),this.dispatch=this.dispatch.bind(this),this.dom=e&&e.mount||document.createElement("div"),e&&(e.appendChild?e.appendChild(this.dom):typeof e=="function"?e(this.dom):e.mount&&(this.mounted=!0)),this.editable=vs(this),Ds(this),this.nodeViews=Is(this),this.docView=us(this.state.doc,As(this),Xn(this),this.dom,this),this.domObserver=new br(this,(r,i,s,o)=>wc(this,r,i,s,o)),this.domObserver.start(),Qa(this),this.updatePluginViews();}get composing(){return this.input.composing}get props(){if(this._props.state!=this.state){let e=this._props;this._props={};for(let t in e)this._props[t]=e[t];this._props.state=this.state;}return this._props}update(e){e.handleDOMEvents!=this._props.handleDOMEvents&&fr(this);let t=this._props;this._props=e,e.plugins&&(e.plugins.forEach(Rs),this.directPlugins=e.plugins),this.updateStateInner(e.state,t);}setProps(e){let t={};for(let r in this._props)t[r]=this._props[r];t.state=this.state;for(let r in e)t[r]=e[r];this.update(t);}updateState(e){this.updateStateInner(e,this._props);}updateStateInner(e,t){let r=this.state,i=!1,s=!1;e.storedMarks&&this.composing&&(so(this),s=!0),this.state=e;let o=r.plugins!=e.plugins||this._props.plugins!=t.plugins;if(o||this._props.plugins!=t.plugins||this._props.nodeViews!=t.nodeViews){let f=Is(this);Ac(f,this.nodeViews)&&(this.nodeViews=f,i=!0);}(o||t.handleDOMEvents!=this._props.handleDOMEvents)&&fr(this),this.editable=vs(this),Ds(this);let l=Xn(this),a=As(this),c=r.plugins!=e.plugins&&!r.doc.eq(e.doc)?"reset":e.scrollToSelection>r.scrollToSelection?"to selection":"preserve",d=i||!this.docView.matchesNode(e.doc,a,l);(d||!e.selection.eq(r.selection))&&(s=!0);let u=c=="preserve"&&s&&this.dom.style.overflowAnchor==null&&Sa(this);if(s){this.domObserver.stop();let f=d&&(Z||W)&&!this.composing&&!r.selection.empty&&!e.selection.empty&&Nc(r.selection,e.selection);if(d){let h=W?this.trackWrites=this.domSelectionRange().focusNode:null;(i||!this.docView.update(e.doc,a,l,this))&&(this.docView.updateOuterDeco([]),this.docView.destroy(),this.docView=us(e.doc,a,l,this.dom,this)),h&&!this.trackWrites&&(f=!0);}f||!(this.input.mouseDown&&this.domObserver.currentSelection.eq(this.domSelectionRange())&&Ja(this))?Me(this,f):(Ks(this,e.selection),this.domObserver.setCurSelection()),this.domObserver.start();}this.updatePluginViews(r),c=="reset"?this.dom.scrollTop=0:c=="to selection"?this.scrollToSelection():u&&xa(u);}scrollToSelection(){let e=this.domSelectionRange().focusNode;if(!this.someProp("handleScrollToSelection",t=>t(this)))if(this.state.selection instanceof M){let t=this.docView.domAfterPos(this.state.selection.from);t.nodeType==1&&is(this,t.getBoundingClientRect(),e);}else is(this,this.coordsAtPos(this.state.selection.head,1),e);}destroyPluginViews(){let e;for(;e=this.pluginViews.pop();)e.destroy&&e.destroy();}updatePluginViews(e){if(!e||e.plugins!=this.state.plugins||this.directPlugins!=this.prevDirectPlugins){this.prevDirectPlugins=this.directPlugins,this.destroyPluginViews();for(let t=0;t<this.directPlugins.length;t++){let r=this.directPlugins[t];r.spec.view&&this.pluginViews.push(r.spec.view(this));}for(let t=0;t<this.state.plugins.length;t++){let r=this.state.plugins[t];r.spec.view&&this.pluginViews.push(r.spec.view(this));}}else for(let t=0;t<this.pluginViews.length;t++){let r=this.pluginViews[t];r.update&&r.update(this,e);}}someProp(e,t){let r=this._props&&this._props[e],i;if(r!=null&&(i=t?t(r):r))return i;for(let o=0;o<this.directPlugins.length;o++){let l=this.directPlugins[o].props[e];if(l!=null&&(i=t?t(l):l))return i}let s=this.state.plugins;if(s)for(let o=0;o<s.length;o++){let l=s[o].props[e];if(l!=null&&(i=t?t(l):l))return i}}hasFocus(){if(Z){let e=this.root.activeElement;if(e==this.dom)return !0;if(!e||!this.dom.contains(e))return !1;for(;e&&this.dom!=e&&this.dom.contains(e);){if(e.contentEditable=="false")return !1;e=e.parentElement;}return !0}return this.root.activeElement==this.dom}focus(){this.domObserver.stop(),this.editable&&Ma(this.dom),Me(this),this.domObserver.start();}get root(){let e=this._root;if(e==null){for(let t=this.dom.parentNode;t;t=t.parentNode)if(t.nodeType==9||t.nodeType==11&&t.host)return t.getSelection||(Object.getPrototypeOf(t).getSelection=()=>t.ownerDocument.getSelection()),this._root=t}return e||document}posAtCoords(e){return Ea(this,e)}coordsAtPos(e,t=1){return Vs(this,e,t)}domAtPos(e,t=0){return this.docView.domFromPos(e,t)}nodeDOM(e){let t=this.docView.descAt(e);return t?t.nodeDOM:null}posAtDOM(e,t,r=-1){let i=this.docView.posFromDOM(e,t,r);if(i==null)throw new RangeError("DOM position not inside the editor");return i}endOfTextblock(e,t){return Ia(this,t||this.state,e)}pasteHTML(e,t){return Pt(this,"",e,!1,t||new ClipboardEvent("paste"))}pasteText(e,t){return Pt(this,e,null,!0,t||new ClipboardEvent("paste"))}destroy(){this.docView&&(ec(this),this.destroyPluginViews(),this.mounted?(this.docView.update(this.state.doc,[],Xn(this),this),this.dom.textContent=""):this.dom.parentNode&&this.dom.parentNode.removeChild(this.dom),this.docView.destroy(),this.docView=null);}get isDestroyed(){return this.docView==null}dispatchEvent(e){return nc(this,e)}dispatch(e){let t=this._props.dispatchTransaction;t?t.call(this,e):this.updateState(this.state.apply(e));}domSelectionRange(){return U&&this.root.nodeType===11&&ha(this.dom.ownerDocument)==this.dom?Sc(this):this.domSelection()}domSelection(){return this.root.getSelection()}};function As(n){let e=Object.create(null);return e.class="ProseMirror",e.contenteditable=String(n.editable),n.someProp("attributes",t=>{if(typeof t=="function"&&(t=t(n.state)),t)for(let r in t)r=="class"?e.class+=" "+t[r]:r=="style"?e.style=(e.style?e.style+";":"")+t[r]:!e[r]&&r!="contenteditable"&&r!="nodeName"&&(e[r]=String(t[r]));}),e.translate||(e.translate="no"),[pe.node(0,n.state.doc.content.size,e)]}function Ds(n){if(n.markCursor){let e=document.createElement("img");e.className="ProseMirror-separator",e.setAttribute("mark-placeholder","true"),e.setAttribute("alt",""),n.cursorWrapper={dom:e,deco:pe.widget(n.state.selection.head,e,{raw:!0,marks:n.markCursor})};}else n.cursorWrapper=null;}function vs(n){return !n.someProp("editable",e=>e(n.state)===!1)}function Nc(n,e){let t=Math.min(n.$anchor.sharedDepth(n.head),e.$anchor.sharedDepth(e.head));return n.$anchor.start(t)!=e.$anchor.start(t)}function Is(n){let e=Object.create(null);function t(r){for(let i in r)Object.prototype.hasOwnProperty.call(e,i)||(e[i]=r[i]);}return n.someProp("nodeViews",t),n.someProp("markViews",t),e}function Ac(n,e){let t=0,r=0;for(let i in n){if(n[i]!=e[i])return !0;t++;}for(let i in e)r++;return t!=r}function Rs(n){if(n.spec.state||n.spec.filterTransaction||n.spec.appendTransaction)throw new RangeError("Plugins passed directly to the view must not have a state component")}var Ce={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},pn={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"'},Dc=typeof navigator<"u"&&/Mac/.test(navigator.platform),vc=typeof navigator<"u"&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);for(B=0;B<10;B++)Ce[48+B]=Ce[96+B]=String(B);var B;for(B=1;B<=24;B++)Ce[B+111]="F"+B;var B;for(B=65;B<=90;B++)Ce[B]=String.fromCharCode(B+32),pn[B]=String.fromCharCode(B);var B;for(hn in Ce)pn.hasOwnProperty(hn)||(pn[hn]=Ce[hn]);var hn;function uo(n){var e=Dc&&n.metaKey&&n.shiftKey&&!n.ctrlKey&&!n.altKey||vc&&n.shiftKey&&n.key&&n.key.length==1||n.key=="Unidentified",t=!e&&n.key||(n.shiftKey?pn:Ce)[n.keyCode]||n.key||"Unidentified";return t=="Esc"&&(t="Escape"),t=="Del"&&(t="Delete"),t=="Left"&&(t="ArrowLeft"),t=="Up"&&(t="ArrowUp"),t=="Right"&&(t="ArrowRight"),t=="Down"&&(t="ArrowDown"),t}var Ic=typeof navigator<"u"?/Mac|iP(hone|[oa]d)/.test(navigator.platform):!1;function Rc(n){let e=n.split(/-(?!$)/),t=e[e.length-1];t=="Space"&&(t=" ");let r,i,s,o;for(let l=0;l<e.length-1;l++){let a=e[l];if(/^(cmd|meta|m)$/i.test(a))o=!0;else if(/^a(lt)?$/i.test(a))r=!0;else if(/^(c|ctrl|control)$/i.test(a))i=!0;else if(/^s(hift)?$/i.test(a))s=!0;else if(/^mod$/i.test(a))Ic?o=!0:i=!0;else throw new Error("Unrecognized modifier name: "+a)}return r&&(t="Alt-"+t),i&&(t="Ctrl-"+t),o&&(t="Meta-"+t),s&&(t="Shift-"+t),t}function Pc(n){let e=Object.create(null);for(let t in n)e[Rc(t)]=n[t];return e}function Tr(n,e,t=!0){return e.altKey&&(n="Alt-"+n),e.ctrlKey&&(n="Ctrl-"+n),e.metaKey&&(n="Meta-"+n),t&&e.shiftKey&&(n="Shift-"+n),n}function fo(n){return new P({props:{handleKeyDown:Er(n)}})}function Er(n){let e=Pc(n);return function(t,r){let i=uo(r),s,o=e[Tr(i,r)];if(o&&o(t.state,t.dispatch,t))return !0;if(i.length==1&&i!=" "){if(r.shiftKey){let l=e[Tr(i,r,!1)];if(l&&l(t.state,t.dispatch,t))return !0}if((r.shiftKey||r.altKey||r.metaKey||i.charCodeAt(0)>127)&&(s=Ce[r.keyCode])&&s!=i){let l=e[Tr(s,r)];if(l&&l(t.state,t.dispatch,t))return !0}}return !1}}var mn=(n,e)=>n.selection.empty?!1:(e&&e(n.tr.deleteSelection().scrollIntoView()),!0);function Bc(n,e){let{$cursor:t}=n.selection;return !t||(e?!e.endOfTextblock("backward",n):t.parentOffset>0)?null:t}var Ar=(n,e,t)=>{let r=Bc(n,t);if(!r)return !1;let i=po(r);if(!i){let o=r.blockRange(),l=o&&Se(o);return l==null?!1:(e&&e(n.tr.lift(o,l).scrollIntoView()),!0)}let s=i.nodeBefore;if(!s.type.spec.isolating&&So(n,i,e))return !0;if(r.parent.content.size==0&&(ht(s,"end")||M.isSelectable(s))){let o=Xt(n.doc,r.before(),r.after(),k.empty);if(o&&o.slice.size<o.to-o.from){if(e){let l=n.tr.step(o);l.setSelection(ht(s,"end")?C.findFrom(l.doc.resolve(l.mapping.map(i.pos,-1)),-1):M.create(l.doc,i.pos-s.nodeSize)),e(l.scrollIntoView());}return !0}}return s.isAtom&&i.depth==r.depth-1?(e&&e(n.tr.delete(i.pos-s.nodeSize,i.pos).scrollIntoView()),!0):!1};function ht(n,e,t=!1){for(let r=n;r;r=e=="start"?r.firstChild:r.lastChild){if(r.isTextblock)return !0;if(t&&r.childCount!=1)return !1}return !1}var Dr=(n,e,t)=>{let{$head:r,empty:i}=n.selection,s=r;if(!i)return !1;if(r.parent.isTextblock){if(t?!t.endOfTextblock("backward",n):r.parentOffset>0)return !1;s=po(r);}let o=s&&s.nodeBefore;return !o||!M.isSelectable(o)?!1:(e&&e(n.tr.setSelection(M.create(n.doc,s.pos-o.nodeSize)).scrollIntoView()),!0)};function po(n){if(!n.parent.type.spec.isolating)for(let e=n.depth-1;e>=0;e--){if(n.index(e)>0)return n.doc.resolve(n.before(e+1));if(n.node(e).type.spec.isolating)break}return null}function Lc(n,e){let{$cursor:t}=n.selection;return !t||(e?!e.endOfTextblock("forward",n):t.parentOffset<t.parent.content.size)?null:t}var vr=(n,e,t)=>{let r=Lc(n,t);if(!r)return !1;let i=mo(r);if(!i)return !1;let s=i.nodeAfter;if(So(n,i,e))return !0;if(r.parent.content.size==0&&(ht(s,"start")||M.isSelectable(s))){let o=Xt(n.doc,r.before(),r.after(),k.empty);if(o&&o.slice.size<o.to-o.from){if(e){let l=n.tr.step(o);l.setSelection(ht(s,"start")?C.findFrom(l.doc.resolve(l.mapping.map(i.pos)),1):M.create(l.doc,l.mapping.map(i.pos))),e(l.scrollIntoView());}return !0}}return s.isAtom&&i.depth==r.depth-1?(e&&e(n.tr.delete(i.pos,i.pos+s.nodeSize).scrollIntoView()),!0):!1},Ir=(n,e,t)=>{let{$head:r,empty:i}=n.selection,s=r;if(!i)return !1;if(r.parent.isTextblock){if(t?!t.endOfTextblock("forward",n):r.parentOffset<r.parent.content.size)return !1;s=mo(r);}let o=s&&s.nodeAfter;return !o||!M.isSelectable(o)?!1:(e&&e(n.tr.setSelection(M.create(n.doc,s.pos)).scrollIntoView()),!0)};function mo(n){if(!n.parent.type.spec.isolating)for(let e=n.depth-1;e>=0;e--){let t=n.node(e);if(n.index(e)+1<t.childCount)return n.doc.resolve(n.after(e+1));if(t.type.spec.isolating)break}return null}var go=(n,e)=>{let t=n.selection,r=t instanceof M,i;if(r){if(t.node.isTextblock||!ae(n.doc,t.from))return !1;i=t.from;}else if(i=st(n.doc,t.from,-1),i==null)return !1;if(e){let s=n.tr.join(i);r&&s.setSelection(M.create(s.doc,i-n.doc.resolve(i).nodeBefore.nodeSize)),e(s.scrollIntoView());}return !0},yo=(n,e)=>{let t=n.selection,r;if(t instanceof M){if(t.node.isTextblock||!ae(n.doc,t.to))return !1;r=t.to;}else if(r=st(n.doc,t.to,1),r==null)return !1;return e&&e(n.tr.join(r).scrollIntoView()),!0},bo=(n,e)=>{let{$from:t,$to:r}=n.selection,i=t.blockRange(r),s=i&&Se(i);return s==null?!1:(e&&e(n.tr.lift(i,s).scrollIntoView()),!0)},Rr=(n,e)=>{let{$head:t,$anchor:r}=n.selection;return !t.parent.type.spec.code||!t.sameParent(r)?!1:(e&&e(n.tr.insertText(`
`).scrollIntoView()),!0)};function Pr(n){for(let e=0;e<n.edgeCount;e++){let{type:t}=n.edge(e);if(t.isTextblock&&!t.hasRequiredAttrs())return t}return null}var Br=(n,e)=>{let{$head:t,$anchor:r}=n.selection;if(!t.parent.type.spec.code||!t.sameParent(r))return !1;let i=t.node(-1),s=t.indexAfter(-1),o=Pr(i.contentMatchAt(s));if(!o||!i.canReplaceWith(s,s,o))return !1;if(e){let l=t.after(),a=n.tr.replaceWith(l,l,o.createAndFill());a.setSelection(C.near(a.doc.resolve(l),1)),e(a.scrollIntoView());}return !0},Lr=(n,e)=>{let t=n.selection,{$from:r,$to:i}=t;if(t instanceof ee||r.parent.inlineContent||i.parent.inlineContent)return !1;let s=Pr(i.parent.contentMatchAt(i.indexAfter()));if(!s||!s.isTextblock)return !1;if(e){let o=(!r.parentOffset&&i.index()<i.parent.childCount?r:i).pos,l=n.tr.insert(o,s.createAndFill());l.setSelection(w.create(l.doc,o+1)),e(l.scrollIntoView());}return !0},Fr=(n,e)=>{let{$cursor:t}=n.selection;if(!t||t.parent.content.size)return !1;if(t.depth>1&&t.after()!=t.end(-1)){let s=t.before();if(ie(n.doc,s))return e&&e(n.tr.split(s).scrollIntoView()),!0}let r=t.blockRange(),i=r&&Se(r);return i==null?!1:(e&&e(n.tr.lift(r,i).scrollIntoView()),!0)};var ko=(n,e)=>{let{$from:t,to:r}=n.selection,i,s=t.sharedDepth(r);return s==0?!1:(i=t.before(s),e&&e(n.tr.setSelection(M.create(n.doc,i))),!0)};function $c(n,e,t){let r=e.nodeBefore,i=e.nodeAfter,s=e.index();return !r||!i||!r.type.compatibleContent(i.type)?!1:!r.content.size&&e.parent.canReplace(s-1,s)?(t&&t(n.tr.delete(e.pos-r.nodeSize,e.pos).scrollIntoView()),!0):!e.parent.canReplace(s,s+1)||!(i.isTextblock||ae(n.doc,e.pos))?!1:(t&&t(n.tr.clearIncompatible(e.pos,r.type,r.contentMatchAt(r.childCount)).join(e.pos).scrollIntoView()),!0)}function So(n,e,t){let r=e.nodeBefore,i=e.nodeAfter,s,o;if(r.type.spec.isolating||i.type.spec.isolating)return !1;if($c(n,e,t))return !0;let l=e.parent.canReplace(e.index(),e.index()+1);if(l&&(s=(o=r.contentMatchAt(r.childCount)).findWrapping(i.type))&&o.matchType(s[0]||i.type).validEnd){if(t){let u=e.pos+i.nodeSize,f=b.empty;for(let m=s.length-1;m>=0;m--)f=b.from(s[m].create(null,f));f=b.from(r.copy(f));let h=n.tr.step(new R(e.pos-1,u,e.pos,u,new k(f,1,0),s.length,!0)),p=u+2*s.length;ae(h.doc,p)&&h.join(p),t(h.scrollIntoView());}return !0}let a=C.findFrom(e,1),c=a&&a.$from.blockRange(a.$to),d=c&&Se(c);if(d!=null&&d>=e.depth)return t&&t(n.tr.lift(c,d).scrollIntoView()),!0;if(l&&ht(i,"start",!0)&&ht(r,"end")){let u=r,f=[];for(;f.push(u),!u.isTextblock;)u=u.lastChild;let h=i,p=1;for(;!h.isTextblock;h=h.firstChild)p++;if(u.canReplace(u.childCount,u.childCount,h.content)){if(t){let m=b.empty;for(let y=f.length-1;y>=0;y--)m=b.from(f[y].copy(m));let g=n.tr.step(new R(e.pos-f.length,e.pos+i.nodeSize,e.pos+p,e.pos+i.nodeSize-p,new k(m,f.length,0),0,!0));t(g.scrollIntoView());}return !0}}return !1}function xo(n){return function(e,t){let r=e.selection,i=n<0?r.$from:r.$to,s=i.depth;for(;i.node(s).isInline;){if(!s)return !1;s--;}return i.node(s).isTextblock?(t&&t(e.tr.setSelection(w.create(e.doc,n<0?i.start(s):i.end(s)))),!0):!1}}var zr=xo(-1),Vr=xo(1);function Mo(n,e=null){return function(t,r){let{$from:i,$to:s}=t.selection,o=i.blockRange(s),l=o&&it(o,n,e);return l?(r&&r(t.tr.wrap(o,l).scrollIntoView()),!0):!1}}function $r(n,e=null){return function(t,r){let i=!1;for(let s=0;s<t.selection.ranges.length&&!i;s++){let{$from:{pos:o},$to:{pos:l}}=t.selection.ranges[s];t.doc.nodesBetween(o,l,(a,c)=>{if(i)return !1;if(!(!a.isTextblock||a.hasMarkup(n,e)))if(a.type==n)i=!0;else {let d=t.doc.resolve(c),u=d.index();i=d.parent.canReplaceWith(u,u+1,n);}});}if(!i)return !1;if(r){let s=t.tr;for(let o=0;o<t.selection.ranges.length;o++){let{$from:{pos:l},$to:{pos:a}}=t.selection.ranges[o];s.setBlockType(l,a,n,e);}r(s.scrollIntoView());}return !0}}typeof navigator<"u"?/Mac|iP(hone|[oa]d)/.test(navigator.platform):typeof os<"u"&&os.platform?os.platform()=="darwin":!1;function Co(n,e=null){return function(t,r){let{$from:i,$to:s}=t.selection,o=i.blockRange(s),l=!1,a=o;if(!o)return !1;if(o.depth>=2&&i.node(o.depth-1).type.compatibleContent(n)&&o.startIndex==0){if(i.index(o.depth-1)==0)return !1;let d=t.doc.resolve(o.start-2);a=new $e(d,d,o.depth),o.endIndex<o.parent.childCount&&(o=new $e(i,t.doc.resolve(s.end(o.depth)),o.depth)),l=!0;}let c=it(a,n,e,o);return c?(r&&r(Jc(t.tr,o,c,l,n).scrollIntoView()),!0):!1}}function Jc(n,e,t,r,i){let s=b.empty;for(let d=t.length-1;d>=0;d--)s=b.from(t[d].type.create(t[d].attrs,s));n.step(new R(e.start-(r?2:0),e.end,e.start,e.end,new k(s,0,0),t.length,!0));let o=0;for(let d=0;d<t.length;d++)t[d].type==i&&(o=d+1);let l=t.length-o,a=e.start+t.length-(r?2:0),c=e.parent;for(let d=e.startIndex,u=e.endIndex,f=!0;d<u;d++,f=!1)!f&&ie(n.doc,a,l)&&(n.split(a,l),a+=2*l),a+=c.child(d).nodeSize;return n}function wo(n){return function(e,t){let{$from:r,$to:i}=e.selection,s=r.blockRange(i,o=>o.childCount>0&&o.firstChild.type==n);return s?t?r.node(s.depth-1).type==n?Wc(e,t,n,s):jc(e,t,s):!0:!1}}function Wc(n,e,t,r){let i=n.tr,s=r.end,o=r.$to.end(r.depth);s<o&&(i.step(new R(s-1,o,s,o,new k(b.from(t.create(null,r.parent.copy())),1,0),1,!0)),r=new $e(i.doc.resolve(r.$from.pos),i.doc.resolve(o),r.depth));let l=Se(r);if(l==null)return !1;i.lift(r,l);let a=i.mapping.map(s,-1)-1;return ae(i.doc,a)&&i.join(a),e(i.scrollIntoView()),!0}function jc(n,e,t){let r=n.tr,i=t.parent;for(let h=t.end,p=t.endIndex-1,m=t.startIndex;p>m;p--)h-=i.child(p).nodeSize,r.delete(h-1,h+1);let s=r.doc.resolve(t.start),o=s.nodeAfter;if(r.mapping.map(t.end)!=t.start+s.nodeAfter.nodeSize)return !1;let l=t.startIndex==0,a=t.endIndex==i.childCount,c=s.node(-1),d=s.index(-1);if(!c.canReplace(d+(l?0:1),d+1,o.content.append(a?b.empty:b.from(i))))return !1;let u=s.pos,f=u+o.nodeSize;return r.step(new R(u-(l?1:0),f+(a?1:0),u+1,f-1,new k((l?b.empty:b.from(i.copy(b.empty))).append(a?b.empty:b.from(i.copy(b.empty))),l?0:1,a?0:1),l?0:1)),e(r.scrollIntoView()),!0}function Oo(n){return function(e,t){let{$from:r,$to:i}=e.selection,s=r.blockRange(i,c=>c.childCount>0&&c.firstChild.type==n);if(!s)return !1;let o=s.startIndex;if(o==0)return !1;let l=s.parent,a=l.child(o-1);if(a.type!=n)return !1;if(t){let c=a.lastChild&&a.lastChild.type==l.type,d=b.from(c?n.create():null),u=new k(b.from(n.create(null,b.from(l.type.create(null,d)))),c?3:1,0),f=s.start,h=s.end;t(e.tr.step(new R(f-(c?3:1),h,f,h,u,1,!0)).scrollIntoView());}return !0}}function Sn(n){let{state:e,transaction:t}=n,{selection:r}=t,{doc:i}=t,{storedMarks:s}=t;return {...e,apply:e.apply.bind(e),applyTransaction:e.applyTransaction.bind(e),filterTransaction:e.filterTransaction,plugins:e.plugins,schema:e.schema,reconfigure:e.reconfigure.bind(e),toJSON:e.toJSON.bind(e),get storedMarks(){return s},get selection(){return r},get doc(){return i},get tr(){return r=t.selection,i=t.doc,s=t.storedMarks,t}}}var pt=class{constructor(e){this.editor=e.editor,this.rawCommands=this.editor.extensionManager.commands,this.customState=e.state;}get hasCustomState(){return !!this.customState}get state(){return this.customState||this.editor.state}get commands(){let{rawCommands:e,editor:t,state:r}=this,{view:i}=t,{tr:s}=r,o=this.buildProps(s);return Object.fromEntries(Object.entries(e).map(([l,a])=>[l,(...d)=>{let u=a(...d)(o);return !s.getMeta("preventDispatch")&&!this.hasCustomState&&i.dispatch(s),u}]))}get chain(){return ()=>this.createChain()}get can(){return ()=>this.createCan()}createChain(e,t=!0){let{rawCommands:r,editor:i,state:s}=this,{view:o}=i,l=[],a=!!e,c=e||s.tr,d=()=>(!a&&t&&!c.getMeta("preventDispatch")&&!this.hasCustomState&&o.dispatch(c),l.every(f=>f===!0)),u={...Object.fromEntries(Object.entries(r).map(([f,h])=>[f,(...m)=>{let g=this.buildProps(c,t),y=h(...m)(g);return l.push(y),u}])),run:d};return u}createCan(e){let{rawCommands:t,state:r}=this,i=!1,s=e||r.tr,o=this.buildProps(s,i);return {...Object.fromEntries(Object.entries(t).map(([a,c])=>[a,(...d)=>c(...d)({...o,dispatch:void 0})])),chain:()=>this.createChain(s,i)}}buildProps(e,t=!0){let{rawCommands:r,editor:i,state:s}=this,{view:o}=i,l={tr:e,editor:i,view:o,state:Sn({state:s,transaction:e}),dispatch:t?()=>{}:void 0,chain:()=>this.createChain(e,t),can:()=>this.createCan(e),get commands(){return Object.fromEntries(Object.entries(r).map(([a,c])=>[a,(...d)=>c(...d)(l)]))}};return l}},Ur=class{constructor(){this.callbacks={};}on(e,t){return this.callbacks[e]||(this.callbacks[e]=[]),this.callbacks[e].push(t),this}emit(e,...t){let r=this.callbacks[e];return r&&r.forEach(i=>i.apply(this,t)),this}off(e,t){let r=this.callbacks[e];return r&&(t?this.callbacks[e]=r.filter(i=>i!==t):delete this.callbacks[e]),this}removeAllListeners(){this.callbacks={};}};function S(n,e,t){return n.config[e]===void 0&&n.parent?S(n.parent,e,t):typeof n.config[e]=="function"?n.config[e].bind({...t,parent:n.parent?S(n.parent,e,t):null}):n.config[e]}function xn(n){let e=n.filter(i=>i.type==="extension"),t=n.filter(i=>i.type==="node"),r=n.filter(i=>i.type==="mark");return {baseExtensions:e,nodeExtensions:t,markExtensions:r}}function Ro(n){let e=[],{nodeExtensions:t,markExtensions:r}=xn(n),i=[...t,...r],s={default:null,rendered:!0,renderHTML:null,parseHTML:null,keepOnSplit:!0,isRequired:!1};return n.forEach(o=>{let l={name:o.name,options:o.options,storage:o.storage},a=S(o,"addGlobalAttributes",l);if(!a)return;a().forEach(d=>{d.types.forEach(u=>{Object.entries(d.attributes).forEach(([f,h])=>{e.push({type:u,name:f,attribute:{...s,...h}});});});});}),i.forEach(o=>{let l={name:o.name,options:o.options,storage:o.storage},a=S(o,"addAttributes",l);if(!a)return;let c=a();Object.entries(c).forEach(([d,u])=>{let f={...s,...u};typeof(f==null?void 0:f.default)=="function"&&(f.default=f.default()),f!=null&&f.isRequired&&(f==null?void 0:f.default)===void 0&&delete f.default,e.push({type:o.name,name:d,attribute:f});});}),e}function F(n,e){if(typeof n=="string"){if(!e.nodes[n])throw Error(`There is no node type named '${n}'. Maybe you forgot to add the extension?`);return e.nodes[n]}return n}function N(...n){return n.filter(e=>!!e).reduce((e,t)=>{let r={...e};return Object.entries(t).forEach(([i,s])=>{if(!r[i]){r[i]=s;return}if(i==="class"){let l=s?s.split(" "):[],a=r[i]?r[i].split(" "):[],c=l.filter(d=>!a.includes(d));r[i]=[...a,...c].join(" ");}else i==="style"?r[i]=[r[i],s].join("; "):r[i]=s;}),r},{})}function _r(n,e){return e.filter(t=>t.attribute.rendered).map(t=>t.attribute.renderHTML?t.attribute.renderHTML(n.attrs)||{}:{[t.name]:n.attrs[t.name]}).reduce((t,r)=>N(t,r),{})}function Po(n){return typeof n=="function"}function O(n,e=void 0,...t){return Po(n)?e?n.bind(e)(...t):n(...t):n}function Kc(n={}){return Object.keys(n).length===0&&n.constructor===Object}function qc(n){return typeof n!="string"?n:n.match(/^[+-]?(?:\d*\.)?\d+$/)?Number(n):n==="true"?!0:n==="false"?!1:n}function To(n,e){return n.style?n:{...n,getAttrs:t=>{let r=n.getAttrs?n.getAttrs(t):n.attrs;if(r===!1)return !1;let i=e.reduce((s,o)=>{let l=o.attribute.parseHTML?o.attribute.parseHTML(t):qc(t.getAttribute(o.name));return l==null?s:{...s,[o.name]:l}},{});return {...r,...i}}}}function Eo(n){return Object.fromEntries(Object.entries(n).filter(([e,t])=>e==="attrs"&&Kc(t)?!1:t!=null))}function Uc(n,e){var t;let r=Ro(n),{nodeExtensions:i,markExtensions:s}=xn(n),o=(t=i.find(c=>S(c,"topNode")))===null||t===void 0?void 0:t.name,l=Object.fromEntries(i.map(c=>{let d=r.filter(y=>y.type===c.name),u={name:c.name,options:c.options,storage:c.storage,editor:e},f=n.reduce((y,x)=>{let T=S(x,"extendNodeSchema",u);return {...y,...T?T(c):{}}},{}),h=Eo({...f,content:O(S(c,"content",u)),marks:O(S(c,"marks",u)),group:O(S(c,"group",u)),inline:O(S(c,"inline",u)),atom:O(S(c,"atom",u)),selectable:O(S(c,"selectable",u)),draggable:O(S(c,"draggable",u)),code:O(S(c,"code",u)),defining:O(S(c,"defining",u)),isolating:O(S(c,"isolating",u)),attrs:Object.fromEntries(d.map(y=>{var x;return [y.name,{default:(x=y==null?void 0:y.attribute)===null||x===void 0?void 0:x.default}]}))}),p=O(S(c,"parseHTML",u));p&&(h.parseDOM=p.map(y=>To(y,d)));let m=S(c,"renderHTML",u);m&&(h.toDOM=y=>m({node:y,HTMLAttributes:_r(y,d)}));let g=S(c,"renderText",u);return g&&(h.toText=g),[c.name,h]})),a=Object.fromEntries(s.map(c=>{let d=r.filter(g=>g.type===c.name),u={name:c.name,options:c.options,storage:c.storage,editor:e},f=n.reduce((g,y)=>{let x=S(y,"extendMarkSchema",u);return {...g,...x?x(c):{}}},{}),h=Eo({...f,inclusive:O(S(c,"inclusive",u)),excludes:O(S(c,"excludes",u)),group:O(S(c,"group",u)),spanning:O(S(c,"spanning",u)),code:O(S(c,"code",u)),attrs:Object.fromEntries(d.map(g=>{var y;return [g.name,{default:(y=g==null?void 0:g.attribute)===null||y===void 0?void 0:y.default}]}))}),p=O(S(c,"parseHTML",u));p&&(h.parseDOM=p.map(g=>To(g,d)));let m=S(c,"renderHTML",u);return m&&(h.toDOM=g=>m({mark:g,HTMLAttributes:_r(g,d)})),[c.name,h]}));return new jt({topNode:o,nodes:l,marks:a})}function Jr(n,e){return e.nodes[n]||e.marks[n]||null}function No(n,e){return Array.isArray(e)?e.some(t=>(typeof t=="string"?t:t.name)===n.name):e}var _c=(n,e=500)=>{let t="",r=n.parentOffset;return n.parent.nodesBetween(Math.max(0,r-e),r,(i,s,o,l)=>{var a,c;let d=((c=(a=i.type.spec).toText)===null||c===void 0?void 0:c.call(a,{node:i,pos:s,parent:o,index:l}))||i.textContent||"%leaf%";t+=d.slice(0,Math.max(0,r-s));}),t};function ei(n){return Object.prototype.toString.call(n)==="[object RegExp]"}var mt=class{constructor(e){this.find=e.find,this.handler=e.handler;}},Gc=(n,e)=>{if(ei(e))return e.exec(n);let t=e(n);if(!t)return null;let r=[t.text];return r.index=t.index,r.input=n,r.data=t.data,t.replaceWith&&(t.text.includes(t.replaceWith)||console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".'),r.push(t.replaceWith)),r};function Wr(n){var e;let{editor:t,from:r,to:i,text:s,rules:o,plugin:l}=n,{view:a}=t;if(a.composing)return !1;let c=a.state.doc.resolve(r);if(c.parent.type.spec.code||!((e=c.nodeBefore||c.nodeAfter)===null||e===void 0)&&e.marks.find(f=>f.type.spec.code))return !1;let d=!1,u=_c(c)+s;return o.forEach(f=>{if(d)return;let h=Gc(u,f.find);if(!h)return;let p=a.state.tr,m=Sn({state:a.state,transaction:p}),g={from:r-(h[0].length-s.length),to:i},{commands:y,chain:x,can:T}=new pt({editor:t,state:m});f.handler({state:m,range:g,match:h,commands:y,chain:x,can:T})===null||!p.steps.length||(p.setMeta(l,{transform:p,from:r,to:i,text:s}),a.dispatch(p),d=!0);}),d}function Yc(n){let{editor:e,rules:t}=n,r=new P({state:{init(){return null},apply(i,s){let o=i.getMeta(r);return o||(i.selectionSet||i.docChanged?null:s)}},props:{handleTextInput(i,s,o,l){return Wr({editor:e,from:s,to:o,text:l,rules:t,plugin:r})},handleDOMEvents:{compositionend:i=>(setTimeout(()=>{let{$cursor:s}=i.state.selection;s&&Wr({editor:e,from:s.pos,to:s.pos,text:"",rules:t,plugin:r});}),!1)},handleKeyDown(i,s){if(s.key!=="Enter")return !1;let{$cursor:o}=i.state.selection;return o?Wr({editor:e,from:o.pos,to:o.pos,text:`
`,rules:t,plugin:r}):!1}},isInputRules:!0});return r}function Xc(n){return typeof n=="number"}var Gr=class{constructor(e){this.find=e.find,this.handler=e.handler;}},Zc=(n,e,t)=>{if(ei(e))return [...n.matchAll(e)];let r=e(n,t);return r?r.map(i=>{let s=[i.text];return s.index=i.index,s.input=n,s.data=i.data,i.replaceWith&&(i.text.includes(i.replaceWith)||console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".'),s.push(i.replaceWith)),s}):[]};function Qc(n){let{editor:e,state:t,from:r,to:i,rule:s,pasteEvent:o,dropEvent:l}=n,{commands:a,chain:c,can:d}=new pt({editor:e,state:t}),u=[];return t.doc.nodesBetween(r,i,(h,p)=>{if(!h.isTextblock||h.type.spec.code)return;let m=Math.max(r,p),g=Math.min(i,p+h.content.size),y=h.textBetween(m-p,g-p,void 0,"\uFFFC");Zc(y,s.find,o).forEach(T=>{if(T.index===void 0)return;let I=m+T.index+1,D=I+T[0].length,L={from:t.tr.mapping.map(I),to:t.tr.mapping.map(D)},q=s.handler({state:t,range:L,match:T,commands:a,chain:c,can:d,pasteEvent:o,dropEvent:l});u.push(q);});}),u.every(h=>h!==null)}function ed(n){let{editor:e,rules:t}=n,r=null,i=!1,s=!1,o=new ClipboardEvent("paste"),l=new DragEvent("drop");return t.map(c=>new P({view(d){let u=f=>{var h;r=!((h=d.dom.parentElement)===null||h===void 0)&&h.contains(f.target)?d.dom.parentElement:null;};return window.addEventListener("dragstart",u),{destroy(){window.removeEventListener("dragstart",u);}}},props:{handleDOMEvents:{drop:(d,u)=>(s=r===d.dom.parentElement,l=u,!1),paste:(d,u)=>{var f;let h=(f=u.clipboardData)===null||f===void 0?void 0:f.getData("text/html");return o=u,i=!!(h!=null&&h.includes("data-pm-slice")),!1}}},appendTransaction:(d,u,f)=>{let h=d[0],p=h.getMeta("uiEvent")==="paste"&&!i,m=h.getMeta("uiEvent")==="drop"&&!s;if(!p&&!m)return;let g=u.doc.content.findDiffStart(f.doc.content),y=u.doc.content.findDiffEnd(f.doc.content);if(!Xc(g)||!y||g===y.b)return;let x=f.tr,T=Sn({state:f,transaction:x});if(!(!Qc({editor:e,state:T,from:Math.max(g-1,0),to:y.b-1,rule:c,pasteEvent:o,dropEvent:l})||!x.steps.length))return l=new DragEvent("drop"),o=new ClipboardEvent("paste"),x}}))}function td(n){let e=n.filter((t,r)=>n.indexOf(t)!==r);return [...new Set(e)]}var Yr=class n{constructor(e,t){this.splittableMarks=[],this.editor=t,this.extensions=n.resolve(e),this.schema=Uc(this.extensions,t),this.extensions.forEach(r=>{var i;this.editor.extensionStorage[r.name]=r.storage;let s={name:r.name,options:r.options,storage:r.storage,editor:this.editor,type:Jr(r.name,this.schema)};r.type==="mark"&&(!((i=O(S(r,"keepOnSplit",s)))!==null&&i!==void 0)||i)&&this.splittableMarks.push(r.name);let o=S(r,"onBeforeCreate",s);o&&this.editor.on("beforeCreate",o);let l=S(r,"onCreate",s);l&&this.editor.on("create",l);let a=S(r,"onUpdate",s);a&&this.editor.on("update",a);let c=S(r,"onSelectionUpdate",s);c&&this.editor.on("selectionUpdate",c);let d=S(r,"onTransaction",s);d&&this.editor.on("transaction",d);let u=S(r,"onFocus",s);u&&this.editor.on("focus",u);let f=S(r,"onBlur",s);f&&this.editor.on("blur",f);let h=S(r,"onDestroy",s);h&&this.editor.on("destroy",h);});}static resolve(e){let t=n.sort(n.flatten(e)),r=td(t.map(i=>i.name));return r.length&&console.warn(`[tiptap warn]: Duplicate extension names found: [${r.map(i=>`'${i}'`).join(", ")}]. This can lead to issues.`),t}static flatten(e){return e.map(t=>{let r={name:t.name,options:t.options,storage:t.storage},i=S(t,"addExtensions",r);return i?[t,...this.flatten(i())]:t}).flat(10)}static sort(e){return e.sort((r,i)=>{let s=S(r,"priority")||100,o=S(i,"priority")||100;return s>o?-1:s<o?1:0})}get commands(){return this.extensions.reduce((e,t)=>{let r={name:t.name,options:t.options,storage:t.storage,editor:this.editor,type:Jr(t.name,this.schema)},i=S(t,"addCommands",r);return i?{...e,...i()}:e},{})}get plugins(){let{editor:e}=this,t=n.sort([...this.extensions].reverse()),r=[],i=[],s=t.map(o=>{let l={name:o.name,options:o.options,storage:o.storage,editor:e,type:Jr(o.name,this.schema)},a=[],c=S(o,"addKeyboardShortcuts",l),d={};if(o.type==="mark"&&o.config.exitable&&(d.ArrowRight=()=>Y.handleExit({editor:e,mark:o})),c){let m=Object.fromEntries(Object.entries(c()).map(([g,y])=>[g,()=>y({editor:e})]));d={...d,...m};}let u=fo(d);a.push(u);let f=S(o,"addInputRules",l);No(o,e.options.enableInputRules)&&f&&r.push(...f());let h=S(o,"addPasteRules",l);No(o,e.options.enablePasteRules)&&h&&i.push(...h());let p=S(o,"addProseMirrorPlugins",l);if(p){let m=p();a.push(...m);}return a}).flat();return [Yc({editor:e,rules:r}),...ed({editor:e,rules:i}),...s]}get attributes(){return Ro(this.extensions)}get nodeViews(){let{editor:e}=this,{nodeExtensions:t}=xn(this.extensions);return Object.fromEntries(t.filter(r=>!!S(r,"addNodeView")).map(r=>{let i=this.attributes.filter(a=>a.type===r.name),s={name:r.name,options:r.options,storage:r.storage,editor:e,type:F(r.name,this.schema)},o=S(r,"addNodeView",s);if(!o)return [];let l=(a,c,d,u)=>{let f=_r(a,i);return o()({editor:e,node:a,getPos:d,decorations:u,HTMLAttributes:f,extension:r})};return [r.name,l]}))}};function nd(n){return Object.prototype.toString.call(n).slice(8,-1)}function jr(n){return nd(n)!=="Object"?!1:n.constructor===Object&&Object.getPrototypeOf(n)===Object.prototype}function Mn(n,e){let t={...n};return jr(n)&&jr(e)&&Object.keys(e).forEach(r=>{jr(e[r])?r in n?t[r]=Mn(n[r],e[r]):Object.assign(t,{[r]:e[r]}):Object.assign(t,{[r]:e[r]});}),t}var j=class n{constructor(e={}){this.type="extension",this.name="extension",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...e},this.name=this.config.name,e.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=O(S(this,"addOptions",{name:this.name}))),this.storage=O(S(this,"addStorage",{name:this.name,options:this.options}))||{};}static create(e={}){return new n(e)}configure(e={}){let t=this.extend();return t.options=Mn(this.options,e),t.storage=O(S(t,"addStorage",{name:t.name,options:t.options})),t}extend(e={}){let t=new n(e);return t.parent=this,this.child=t,t.name=e.name?e.name:t.parent.name,e.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${t.name}".`),t.options=O(S(t,"addOptions",{name:t.name})),t.storage=O(S(t,"addStorage",{name:t.name,options:t.options})),t}};function Bo(n,e,t){let{from:r,to:i}=e,{blockSeparator:s=`

`,textSerializers:o={}}=t||{},l="",a=!0;return n.nodesBetween(r,i,(c,d,u,f)=>{var h;let p=o==null?void 0:o[c.type.name];p?(c.isBlock&&!a&&(l+=s,a=!0),u&&(l+=p({node:c,pos:d,parent:u,index:f,range:e}))):c.isText?(l+=(h=c==null?void 0:c.text)===null||h===void 0?void 0:h.slice(Math.max(r,d)-d,i-d),a=!1):c.isBlock&&!a&&(l+=s,a=!0);}),l}function Lo(n){return Object.fromEntries(Object.entries(n.nodes).filter(([,e])=>e.spec.toText).map(([e,t])=>[e,t.spec.toText]))}var rd=j.create({name:"clipboardTextSerializer",addProseMirrorPlugins(){return [new P({key:new te("clipboardTextSerializer"),props:{clipboardTextSerializer:()=>{let{editor:n}=this,{state:e,schema:t}=n,{doc:r,selection:i}=e,{ranges:s}=i,o=Math.min(...s.map(d=>d.$from.pos)),l=Math.max(...s.map(d=>d.$to.pos)),a=Lo(t);return Bo(r,{from:o,to:l},{textSerializers:a})}}})]}}),id=()=>({editor:n,view:e})=>(requestAnimationFrame(()=>{var t;n.isDestroyed||(e.dom.blur(),(t=window==null?void 0:window.getSelection())===null||t===void 0||t.removeAllRanges());}),!0),sd=(n=!1)=>({commands:e})=>e.setContent("",n),od=()=>({state:n,tr:e,dispatch:t})=>{let{selection:r}=e,{ranges:i}=r;return t&&i.forEach(({$from:s,$to:o})=>{n.doc.nodesBetween(s.pos,o.pos,(l,a)=>{if(l.type.isText)return;let{doc:c,mapping:d}=e,u=c.resolve(d.map(a)),f=c.resolve(d.map(a+l.nodeSize)),h=u.blockRange(f);if(!h)return;let p=Se(h);if(l.type.isTextblock){let{defaultType:m}=u.parent.contentMatchAt(u.index());e.setNodeMarkup(h.start,m);}(p||p===0)&&e.lift(h,p);});}),!0},ld=n=>e=>n(e),ad=()=>({state:n,dispatch:e})=>Lr(n,e),cd=(n,e)=>({editor:t,tr:r})=>{let{state:i}=t,s=i.doc.slice(n.from,n.to);r.deleteRange(n.from,n.to);let o=r.mapping.map(e);return r.insert(o,s.content),r.setSelection(new w(r.doc.resolve(o-1))),!0},dd=()=>({tr:n,dispatch:e})=>{let{selection:t}=n,r=t.$anchor.node();if(r.content.size>0)return !1;let i=n.selection.$anchor;for(let s=i.depth;s>0;s-=1)if(i.node(s).type===r.type){if(e){let l=i.before(s),a=i.after(s);n.delete(l,a).scrollIntoView();}return !0}return !1},ud=n=>({tr:e,state:t,dispatch:r})=>{let i=F(n,t.schema),s=e.selection.$anchor;for(let o=s.depth;o>0;o-=1)if(s.node(o).type===i){if(r){let a=s.before(o),c=s.after(o);e.delete(a,c).scrollIntoView();}return !0}return !1},fd=n=>({tr:e,dispatch:t})=>{let{from:r,to:i}=n;return t&&e.delete(r,i),!0},hd=()=>({state:n,dispatch:e})=>mn(n,e),pd=()=>({commands:n})=>n.keyboardShortcut("Enter"),md=()=>({state:n,dispatch:e})=>Br(n,e);function yn(n,e,t={strict:!0}){let r=Object.keys(e);return r.length?r.every(i=>t.strict?e[i]===n[i]:ei(e[i])?e[i].test(n[i]):e[i]===n[i]):!0}function Xr(n,e,t={}){return n.find(r=>r.type===e&&yn(r.attrs,t))}function gd(n,e,t={}){return !!Xr(n,e,t)}function ti(n,e,t={}){if(!n||!e)return;let r=n.parent.childAfter(n.parentOffset);if(n.parentOffset===r.offset&&r.offset!==0&&(r=n.parent.childBefore(n.parentOffset)),!r.node)return;let i=Xr([...r.node.marks],e,t);if(!i)return;let s=r.index,o=n.start()+r.offset,l=s+1,a=o+r.node.nodeSize;for(Xr([...r.node.marks],e,t);s>0&&i.isInSet(n.parent.child(s-1).marks);)s-=1,o-=n.parent.child(s).nodeSize;for(;l<n.parent.childCount&&gd([...n.parent.child(l).marks],e,t);)a+=n.parent.child(l).nodeSize,l+=1;return {from:o,to:a}}function Re(n,e){if(typeof n=="string"){if(!e.marks[n])throw Error(`There is no mark type named '${n}'. Maybe you forgot to add the extension?`);return e.marks[n]}return n}var yd=(n,e={})=>({tr:t,state:r,dispatch:i})=>{let s=Re(n,r.schema),{doc:o,selection:l}=t,{$from:a,from:c,to:d}=l;if(i){let u=ti(a,s,e);if(u&&u.from<=c&&u.to>=d){let f=w.create(o,u.from,u.to);t.setSelection(f);}}return !0},bd=n=>e=>{let t=typeof n=="function"?n(e):n;for(let r=0;r<t.length;r+=1)if(t[r](e))return !0;return !1};function Fo(n){return n instanceof w}function et(n=0,e=0,t=0){return Math.min(Math.max(n,e),t)}function zo(n,e=null){if(!e)return null;let t=C.atStart(n),r=C.atEnd(n);if(e==="start"||e===!0)return t;if(e==="end")return r;let i=t.from,s=r.to;return e==="all"?w.create(n,et(0,i,s),et(n.content.size,i,s)):w.create(n,et(e,i,s),et(e,i,s))}function ni(){return ["iPad Simulator","iPhone Simulator","iPod Simulator","iPad","iPhone","iPod"].includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document}var kd=(n=null,e={})=>({editor:t,view:r,tr:i,dispatch:s})=>{e={scrollIntoView:!0,...e};let o=()=>{ni()&&r.dom.focus(),requestAnimationFrame(()=>{t.isDestroyed||(r.focus(),e!=null&&e.scrollIntoView&&t.commands.scrollIntoView());});};if(r.hasFocus()&&n===null||n===!1)return !0;if(s&&n===null&&!Fo(t.state.selection))return o(),!0;let l=zo(i.doc,n)||t.state.selection,a=t.state.selection.eq(l);return s&&(a||i.setSelection(l),a&&i.storedMarks&&i.setStoredMarks(i.storedMarks),o()),!0},Sd=(n,e)=>t=>n.every((r,i)=>e(r,{...t,index:i})),xd=(n,e)=>({tr:t,commands:r})=>r.insertContentAt({from:t.selection.from,to:t.selection.to},n,e),Zr=n=>{let e=n.childNodes;for(let t=e.length-1;t>=0;t-=1){let r=e[t];r.nodeType===3&&r.nodeValue&&!/\S/.test(r.nodeValue)?n.removeChild(r):r.nodeType===1&&Zr(r);}return n};function Ao(n){let e=`<body>${n}</body>`,t=new window.DOMParser().parseFromString(e,"text/html").body;return Zr(t),Zr(t)}function bn(n,e,t){if(t={slice:!0,parseOptions:{},...t},typeof n=="object"&&n!==null)try{return Array.isArray(n)&&n.length>0?b.fromArray(n.map(r=>e.nodeFromJSON(r))):e.nodeFromJSON(n)}catch(r){return console.warn("[tiptap warn]: Invalid content.","Passed value:",n,"Error:",r),bn("",e,t)}if(typeof n=="string"){let r=Je.fromSchema(e);return t.slice?r.parseSlice(Ao(n),t.parseOptions).content:r.parse(Ao(n),t.parseOptions)}return bn("",e,t)}function Md(n,e,t){let r=n.steps.length-1;if(r<e)return;let i=n.steps[r];if(!(i instanceof X||i instanceof R))return;let s=n.mapping.maps[r],o=0;s.forEach((l,a,c,d)=>{o===0&&(o=d);}),n.setSelection(C.near(n.doc.resolve(o),t));}var Cd=n=>n.toString().startsWith("<"),wd=(n,e,t)=>({tr:r,dispatch:i,editor:s})=>{if(i){t={parseOptions:{},updateSelection:!0,...t};let o=bn(e,s.schema,{parseOptions:{preserveWhitespace:"full",...t.parseOptions}});if(o.toString()==="<>")return !0;let{from:l,to:a}=typeof n=="number"?{from:n,to:n}:{from:n.from,to:n.to},c=!0,d=!0;if((Cd(o)?o:[o]).forEach(f=>{f.check(),c=c?f.isText&&f.marks.length===0:!1,d=d?f.isBlock:!1;}),l===a&&d){let{parent:f}=r.doc.resolve(l);f.isTextblock&&!f.type.spec.code&&!f.childCount&&(l-=1,a+=1);}c?Array.isArray(e)?r.insertText(e.map(f=>f.text||"").join(""),l,a):typeof e=="object"&&e&&e.text?r.insertText(e.text,l,a):r.insertText(e,l,a):r.replaceWith(l,a,o),t.updateSelection&&Md(r,r.steps.length-1,-1);}return !0},Od=()=>({state:n,dispatch:e})=>go(n,e),Td=()=>({state:n,dispatch:e})=>yo(n,e),Ed=()=>({state:n,dispatch:e})=>Ar(n,e),Nd=()=>({state:n,dispatch:e})=>vr(n,e),Ad=()=>({tr:n,state:e,dispatch:t})=>{try{let r=st(e.doc,e.selection.$from.pos,-1);return r==null?!1:(n.join(r,2),t&&t(n),!0)}catch{return !1}},Dd=()=>({state:n,dispatch:e,tr:t})=>{try{let r=st(n.doc,n.selection.$from.pos,1);return r==null?!1:(t.join(r,2),e&&e(t),!0)}catch{return !1}};function Cn(){return typeof navigator<"u"?/Mac/.test(navigator.platform):!1}function vd(n){let e=n.split(/-(?!$)/),t=e[e.length-1];t==="Space"&&(t=" ");let r,i,s,o;for(let l=0;l<e.length-1;l+=1){let a=e[l];if(/^(cmd|meta|m)$/i.test(a))o=!0;else if(/^a(lt)?$/i.test(a))r=!0;else if(/^(c|ctrl|control)$/i.test(a))i=!0;else if(/^s(hift)?$/i.test(a))s=!0;else if(/^mod$/i.test(a))ni()||Cn()?o=!0:i=!0;else throw new Error(`Unrecognized modifier name: ${a}`)}return r&&(t=`Alt-${t}`),i&&(t=`Ctrl-${t}`),o&&(t=`Meta-${t}`),s&&(t=`Shift-${t}`),t}var Id=n=>({editor:e,view:t,tr:r,dispatch:i})=>{let s=vd(n).split(/-(?!$)/),o=s.find(c=>!["Alt","Ctrl","Meta","Shift"].includes(c)),l=new KeyboardEvent("keydown",{key:o==="Space"?" ":o,altKey:s.includes("Alt"),ctrlKey:s.includes("Ctrl"),metaKey:s.includes("Meta"),shiftKey:s.includes("Shift"),bubbles:!0,cancelable:!0}),a=e.captureTransaction(()=>{t.someProp("handleKeyDown",c=>c(t,l));});return a==null||a.steps.forEach(c=>{let d=c.map(r.mapping);d&&i&&r.maybeStep(d);}),!0};function Lt(n,e,t={}){let{from:r,to:i,empty:s}=n.selection,o=e?F(e,n.schema):null,l=[];n.doc.nodesBetween(r,i,(u,f)=>{if(u.isText)return;let h=Math.max(r,f),p=Math.min(i,f+u.nodeSize);l.push({node:u,from:h,to:p});});let a=i-r,c=l.filter(u=>o?o.name===u.node.type.name:!0).filter(u=>yn(u.node.attrs,t,{strict:!1}));return s?!!c.length:c.reduce((u,f)=>u+f.to-f.from,0)>=a}var Rd=(n,e={})=>({state:t,dispatch:r})=>{let i=F(n,t.schema);return Lt(t,i,e)?bo(t,r):!1},Pd=()=>({state:n,dispatch:e})=>Fr(n,e),Bd=n=>({state:e,dispatch:t})=>{let r=F(n,e.schema);return wo(r)(e,t)},Ld=()=>({state:n,dispatch:e})=>Rr(n,e);function wn(n,e){return e.nodes[n]?"node":e.marks[n]?"mark":null}function Do(n,e){let t=typeof e=="string"?[e]:e;return Object.keys(n).reduce((r,i)=>(t.includes(i)||(r[i]=n[i]),r),{})}var Fd=(n,e)=>({tr:t,state:r,dispatch:i})=>{let s=null,o=null,l=wn(typeof n=="string"?n:n.name,r.schema);return l?(l==="node"&&(s=F(n,r.schema)),l==="mark"&&(o=Re(n,r.schema)),i&&t.selection.ranges.forEach(a=>{r.doc.nodesBetween(a.$from.pos,a.$to.pos,(c,d)=>{s&&s===c.type&&t.setNodeMarkup(d,void 0,Do(c.attrs,e)),o&&c.marks.length&&c.marks.forEach(u=>{o===u.type&&t.addMark(d,d+c.nodeSize,o.create(Do(u.attrs,e)));});});}),!0):!1},zd=()=>({tr:n,dispatch:e})=>(e&&n.scrollIntoView(),!0),Vd=()=>({tr:n,commands:e})=>e.setTextSelection({from:0,to:n.doc.content.size}),$d=()=>({state:n,dispatch:e})=>Dr(n,e),Hd=()=>({state:n,dispatch:e})=>Ir(n,e),Jd=()=>({state:n,dispatch:e})=>ko(n,e),Wd=()=>({state:n,dispatch:e})=>Vr(n,e),jd=()=>({state:n,dispatch:e})=>zr(n,e);function Vo(n,e,t={}){return bn(n,e,{slice:!1,parseOptions:t})}var Kd=(n,e=!1,t={})=>({tr:r,editor:i,dispatch:s})=>{let{doc:o}=r,l=Vo(n,i.schema,t);return s&&r.replaceWith(0,o.content.size,l).setMeta("preventUpdate",!e),!0};function gt(n,e){let t=Re(e,n.schema),{from:r,to:i,empty:s}=n.selection,o=[];s?(n.storedMarks&&o.push(...n.storedMarks),o.push(...n.selection.$head.marks())):n.doc.nodesBetween(r,i,a=>{o.push(...a.marks);});let l=o.find(a=>a.type.name===t.name);return l?{...l.attrs}:{}}function qd(n){for(let e=0;e<n.edgeCount;e+=1){let{type:t}=n.edge(e);if(t.isTextblock&&!t.hasRequiredAttrs())return t}return null}function Ud(n,e){for(let t=n.depth;t>0;t-=1){let r=n.node(t);if(e(r))return {pos:t>0?n.before(t):0,start:n.start(t),depth:t,node:r}}}function ri(n){return e=>Ud(e.$from,n)}function _d(n,e){let t=ke.fromSchema(e).serializeFragment(n),i=document.implementation.createHTMLDocument().createElement("div");return i.appendChild(t),i.innerHTML}function Gd(n,e){let t={from:0,to:n.content.size};return Bo(n,t,e)}function Yd(n,e){let t=F(e,n.schema),{from:r,to:i}=n.selection,s=[];n.doc.nodesBetween(r,i,l=>{s.push(l);});let o=s.reverse().find(l=>l.type.name===t.name);return o?{...o.attrs}:{}}function Xd(n,e){let t=wn(typeof e=="string"?e:e.name,n.schema);return t==="node"?Yd(n,e):t==="mark"?gt(n,e):{}}function $o(n,e,t){let r=[];return n===e?t.resolve(n).marks().forEach(i=>{let s=t.resolve(n-1),o=ti(s,i.type);o&&r.push({mark:i,...o});}):t.nodesBetween(n,e,(i,s)=>{!i||i.nodeSize===void 0||r.push(...i.marks.map(o=>({from:s,to:s+i.nodeSize,mark:o})));}),r}function gn(n,e,t){return Object.fromEntries(Object.entries(t).filter(([r])=>{let i=n.find(s=>s.type===e&&s.name===r);return i?i.attribute.keepOnSplit:!1}))}function Qr(n,e,t={}){let{empty:r,ranges:i}=n.selection,s=e?Re(e,n.schema):null;if(r)return !!(n.storedMarks||n.selection.$from.marks()).filter(u=>s?s.name===u.type.name:!0).find(u=>yn(u.attrs,t,{strict:!1}));let o=0,l=[];if(i.forEach(({$from:u,$to:f})=>{let h=u.pos,p=f.pos;n.doc.nodesBetween(h,p,(m,g)=>{if(!m.isText&&!m.marks.length)return;let y=Math.max(h,g),x=Math.min(p,g+m.nodeSize),T=x-y;o+=T,l.push(...m.marks.map(I=>({mark:I,from:y,to:x})));});}),o===0)return !1;let a=l.filter(u=>s?s.name===u.mark.type.name:!0).filter(u=>yn(u.mark.attrs,t,{strict:!1})).reduce((u,f)=>u+f.to-f.from,0),c=l.filter(u=>s?u.mark.type!==s&&u.mark.type.excludes(s):!0).reduce((u,f)=>u+f.to-f.from,0);return (a>0?a+c:a)>=o}function Zd(n,e,t={}){if(!e)return Lt(n,null,t)||Qr(n,null,t);let r=wn(e,n.schema);return r==="node"?Lt(n,e,t):r==="mark"?Qr(n,e,t):!1}function vo(n,e){let{nodeExtensions:t}=xn(e),r=t.find(o=>o.name===n);if(!r)return !1;let i={name:r.name,options:r.options,storage:r.storage},s=O(S(r,"group",i));return typeof s!="string"?!1:s.split(" ").includes("list")}function Qd(n){var e;let t=(e=n.type.createAndFill())===null||e===void 0?void 0:e.toJSON(),r=n.toJSON();return JSON.stringify(t)===JSON.stringify(r)}function eu(n,e,t){var r;let{selection:i}=e,s=null;if(Fo(i)&&(s=i.$cursor),s){let l=(r=n.storedMarks)!==null&&r!==void 0?r:s.marks();return !!t.isInSet(l)||!l.some(a=>a.type.excludes(t))}let{ranges:o}=i;return o.some(({$from:l,$to:a})=>{let c=l.depth===0?n.doc.inlineContent&&n.doc.type.allowsMarkType(t):!1;return n.doc.nodesBetween(l.pos,a.pos,(d,u,f)=>{if(c)return !1;if(d.isInline){let h=!f||f.type.allowsMarkType(t),p=!!t.isInSet(d.marks)||!d.marks.some(m=>m.type.excludes(t));c=h&&p;}return !c}),c})}var tu=(n,e={})=>({tr:t,state:r,dispatch:i})=>{let{selection:s}=t,{empty:o,ranges:l}=s,a=Re(n,r.schema);if(i)if(o){let c=gt(r,a);t.addStoredMark(a.create({...c,...e}));}else l.forEach(c=>{let d=c.$from.pos,u=c.$to.pos;r.doc.nodesBetween(d,u,(f,h)=>{let p=Math.max(h,d),m=Math.min(h+f.nodeSize,u);f.marks.find(y=>y.type===a)?f.marks.forEach(y=>{a===y.type&&t.addMark(p,m,a.create({...y.attrs,...e}));}):t.addMark(p,m,a.create(e));});});return eu(r,t,a)},nu=(n,e)=>({tr:t})=>(t.setMeta(n,e),!0),ru=(n,e={})=>({state:t,dispatch:r,chain:i})=>{let s=F(n,t.schema);return s.isTextblock?i().command(({commands:o})=>$r(s,e)(t)?!0:o.clearNodes()).command(({state:o})=>$r(s,e)(o,r)).run():(console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.'),!1)},iu=n=>({tr:e,dispatch:t})=>{if(t){let{doc:r}=e,i=et(n,0,r.content.size),s=M.create(r,i);e.setSelection(s);}return !0},su=n=>({tr:e,dispatch:t})=>{if(t){let{doc:r}=e,{from:i,to:s}=typeof n=="number"?{from:n,to:n}:n,o=w.atStart(r).from,l=w.atEnd(r).to,a=et(i,o,l),c=et(s,o,l),d=w.create(r,a,c);e.setSelection(d);}return !0},ou=n=>({state:e,dispatch:t})=>{let r=F(n,e.schema);return Oo(r)(e,t)};function Io(n,e){let t=n.storedMarks||n.selection.$to.parentOffset&&n.selection.$from.marks();if(t){let r=t.filter(i=>e==null?void 0:e.includes(i.type.name));n.tr.ensureMarks(r);}}var lu=({keepMarks:n=!0}={})=>({tr:e,state:t,dispatch:r,editor:i})=>{let{selection:s,doc:o}=e,{$from:l,$to:a}=s,c=i.extensionManager.attributes,d=gn(c,l.node().type.name,l.node().attrs);if(s instanceof M&&s.node.isBlock)return !l.parentOffset||!ie(o,l.pos)?!1:(r&&(n&&Io(t,i.extensionManager.splittableMarks),e.split(l.pos).scrollIntoView()),!0);if(!l.parent.isBlock)return !1;if(r){let u=a.parentOffset===a.parent.content.size;s instanceof w&&e.deleteSelection();let f=l.depth===0?void 0:qd(l.node(-1).contentMatchAt(l.indexAfter(-1))),h=u&&f?[{type:f,attrs:d}]:void 0,p=ie(e.doc,e.mapping.map(l.pos),1,h);if(!h&&!p&&ie(e.doc,e.mapping.map(l.pos),1,f?[{type:f}]:void 0)&&(p=!0,h=f?[{type:f,attrs:d}]:void 0),p&&(e.split(e.mapping.map(l.pos),1,h),f&&!u&&!l.parentOffset&&l.parent.type!==f)){let m=e.mapping.map(l.before()),g=e.doc.resolve(m);l.node(-1).canReplaceWith(g.index(),g.index()+1,f)&&e.setNodeMarkup(e.mapping.map(l.before()),f);}n&&Io(t,i.extensionManager.splittableMarks),e.scrollIntoView();}return !0},au=n=>({tr:e,state:t,dispatch:r,editor:i})=>{var s;let o=F(n,t.schema),{$from:l,$to:a}=t.selection,c=t.selection.node;if(c&&c.isBlock||l.depth<2||!l.sameParent(a))return !1;let d=l.node(-1);if(d.type!==o)return !1;let u=i.extensionManager.attributes;if(l.parent.content.size===0&&l.node(-1).childCount===l.indexAfter(-1)){if(l.depth===2||l.node(-3).type!==o||l.index(-2)!==l.node(-2).childCount-1)return !1;if(r){let g=b.empty,y=l.index(-1)?1:l.index(-2)?2:3;for(let q=l.depth-y;q>=l.depth-3;q-=1)g=b.from(l.node(q).copy(g));let x=l.indexAfter(-1)<l.node(-2).childCount?1:l.indexAfter(-2)<l.node(-3).childCount?2:3,T=gn(u,l.node().type.name,l.node().attrs),I=((s=o.contentMatch.defaultType)===null||s===void 0?void 0:s.createAndFill(T))||void 0;g=g.append(b.from(o.createAndFill(null,I)||void 0));let D=l.before(l.depth-(y-1));e.replace(D,l.after(-x),new k(g,4-y,0));let L=-1;e.doc.nodesBetween(D,e.doc.content.size,(q,E)=>{if(L>-1)return !1;q.isTextblock&&q.content.size===0&&(L=E+1);}),L>-1&&e.setSelection(w.near(e.doc.resolve(L))),e.scrollIntoView();}return !0}let f=a.pos===l.end()?d.contentMatchAt(0).defaultType:null,h=gn(u,d.type.name,d.attrs),p=gn(u,l.node().type.name,l.node().attrs);e.delete(l.pos,a.pos);let m=f?[{type:o,attrs:h},{type:f,attrs:p}]:[{type:o,attrs:h}];if(!ie(e.doc,l.pos,2))return !1;if(r){let{selection:g,storedMarks:y}=t,{splittableMarks:x}=i.extensionManager,T=y||g.$to.parentOffset&&g.$from.marks();if(e.split(l.pos,2,m).scrollIntoView(),!T||!r)return !0;let I=T.filter(D=>x.includes(D.type.name));e.ensureMarks(I);}return !0},Kr=(n,e)=>{let t=ri(o=>o.type===e)(n.selection);if(!t)return !0;let r=n.doc.resolve(Math.max(0,t.pos-1)).before(t.depth);if(r===void 0)return !0;let i=n.doc.nodeAt(r);return t.node.type===(i==null?void 0:i.type)&&ae(n.doc,t.pos)&&n.join(t.pos),!0},qr=(n,e)=>{let t=ri(o=>o.type===e)(n.selection);if(!t)return !0;let r=n.doc.resolve(t.start).after(t.depth);if(r===void 0)return !0;let i=n.doc.nodeAt(r);return t.node.type===(i==null?void 0:i.type)&&ae(n.doc,r)&&n.join(r),!0},cu=(n,e,t,r={})=>({editor:i,tr:s,state:o,dispatch:l,chain:a,commands:c,can:d})=>{let{extensions:u,splittableMarks:f}=i.extensionManager,h=F(n,o.schema),p=F(e,o.schema),{selection:m,storedMarks:g}=o,{$from:y,$to:x}=m,T=y.blockRange(x),I=g||m.$to.parentOffset&&m.$from.marks();if(!T)return !1;let D=ri(L=>vo(L.type.name,u))(m);if(T.depth>=1&&D&&T.depth-D.depth<=1){if(D.node.type===h)return c.liftListItem(p);if(vo(D.node.type.name,u)&&h.validContent(D.node.content)&&l)return a().command(()=>(s.setNodeMarkup(D.pos,h),!0)).command(()=>Kr(s,h)).command(()=>qr(s,h)).run()}return !t||!I||!l?a().command(()=>d().wrapInList(h,r)?!0:c.clearNodes()).wrapInList(h,r).command(()=>Kr(s,h)).command(()=>qr(s,h)).run():a().command(()=>{let L=d().wrapInList(h,r),q=I.filter(E=>f.includes(E.type.name));return s.ensureMarks(q),L?!0:c.clearNodes()}).wrapInList(h,r).command(()=>Kr(s,h)).command(()=>qr(s,h)).run()},du=(n,e={},t={})=>({state:r,commands:i})=>{let{extendEmptyMarkRange:s=!1}=t,o=Re(n,r.schema);return Qr(r,o,e)?i.unsetMark(o,{extendEmptyMarkRange:s}):i.setMark(o,e)},uu=(n,e,t={})=>({state:r,commands:i})=>{let s=F(n,r.schema),o=F(e,r.schema);return Lt(r,s,t)?i.setNode(o):i.setNode(s,t)},fu=(n,e={})=>({state:t,commands:r})=>{let i=F(n,t.schema);return Lt(t,i,e)?r.lift(i):r.wrapIn(i,e)},hu=()=>({state:n,dispatch:e})=>{let t=n.plugins;for(let r=0;r<t.length;r+=1){let i=t[r],s;if(i.spec.isInputRules&&(s=i.getState(n))){if(e){let o=n.tr,l=s.transform;for(let a=l.steps.length-1;a>=0;a-=1)o.step(l.steps[a].invert(l.docs[a]));if(s.text){let a=o.doc.resolve(s.from).marks();o.replaceWith(s.from,s.to,n.schema.text(s.text,a));}else o.delete(s.from,s.to);}return !0}}return !1},pu=()=>({tr:n,dispatch:e})=>{let{selection:t}=n,{empty:r,ranges:i}=t;return r||e&&i.forEach(s=>{n.removeMark(s.$from.pos,s.$to.pos);}),!0},mu=(n,e={})=>({tr:t,state:r,dispatch:i})=>{var s;let{extendEmptyMarkRange:o=!1}=e,{selection:l}=t,a=Re(n,r.schema),{$from:c,empty:d,ranges:u}=l;if(!i)return !0;if(d&&o){let{from:f,to:h}=l,p=(s=c.marks().find(g=>g.type===a))===null||s===void 0?void 0:s.attrs,m=ti(c,a,p);m&&(f=m.from,h=m.to),t.removeMark(f,h,a);}else u.forEach(f=>{t.removeMark(f.$from.pos,f.$to.pos,a);});return t.removeStoredMark(a),!0},gu=(n,e={})=>({tr:t,state:r,dispatch:i})=>{let s=null,o=null,l=wn(typeof n=="string"?n:n.name,r.schema);return l?(l==="node"&&(s=F(n,r.schema)),l==="mark"&&(o=Re(n,r.schema)),i&&t.selection.ranges.forEach(a=>{let c=a.$from.pos,d=a.$to.pos;r.doc.nodesBetween(c,d,(u,f)=>{s&&s===u.type&&t.setNodeMarkup(f,void 0,{...u.attrs,...e}),o&&u.marks.length&&u.marks.forEach(h=>{if(o===h.type){let p=Math.max(f,c),m=Math.min(f+u.nodeSize,d);t.addMark(p,m,o.create({...h.attrs,...e}));}});});}),!0):!1},yu=(n,e={})=>({state:t,dispatch:r})=>{let i=F(n,t.schema);return Mo(i,e)(t,r)},bu=(n,e={})=>({state:t,dispatch:r})=>{let i=F(n,t.schema);return Co(i,e)(t,r)},ku=Object.freeze({__proto__:null,blur:id,clearContent:sd,clearNodes:od,command:ld,createParagraphNear:ad,cut:cd,deleteCurrentNode:dd,deleteNode:ud,deleteRange:fd,deleteSelection:hd,enter:pd,exitCode:md,extendMarkRange:yd,first:bd,focus:kd,forEach:Sd,insertContent:xd,insertContentAt:wd,joinUp:Od,joinDown:Td,joinBackward:Ed,joinForward:Nd,joinItemBackward:Ad,joinItemForward:Dd,keyboardShortcut:Id,lift:Rd,liftEmptyBlock:Pd,liftListItem:Bd,newlineInCode:Ld,resetAttributes:Fd,scrollIntoView:zd,selectAll:Vd,selectNodeBackward:$d,selectNodeForward:Hd,selectParentNode:Jd,selectTextblockEnd:Wd,selectTextblockStart:jd,setContent:Kd,setMark:tu,setMeta:nu,setNode:ru,setNodeSelection:iu,setTextSelection:su,sinkListItem:ou,splitBlock:lu,splitListItem:au,toggleList:cu,toggleMark:du,toggleNode:uu,toggleWrap:fu,undoInputRule:hu,unsetAllMarks:pu,unsetMark:mu,updateAttributes:gu,wrapIn:yu,wrapInList:bu}),Su=j.create({name:"commands",addCommands(){return {...ku}}}),xu=j.create({name:"editable",addProseMirrorPlugins(){return [new P({key:new te("editable"),props:{editable:()=>this.editor.options.editable}})]}}),Mu=j.create({name:"focusEvents",addProseMirrorPlugins(){let{editor:n}=this;return [new P({key:new te("focusEvents"),props:{handleDOMEvents:{focus:(e,t)=>{n.isFocused=!0;let r=n.state.tr.setMeta("focus",{event:t}).setMeta("addToHistory",!1);return e.dispatch(r),!1},blur:(e,t)=>{n.isFocused=!1;let r=n.state.tr.setMeta("blur",{event:t}).setMeta("addToHistory",!1);return e.dispatch(r),!1}}}})]}}),Cu=j.create({name:"keymap",addKeyboardShortcuts(){let n=()=>this.editor.commands.first(({commands:o})=>[()=>o.undoInputRule(),()=>o.command(({tr:l})=>{let{selection:a,doc:c}=l,{empty:d,$anchor:u}=a,{pos:f,parent:h}=u,p=u.parent.isTextblock?l.doc.resolve(f-1):u,m=p.parent.type.spec.isolating,g=u.pos-u.parentOffset,y=m&&p.parent.childCount===1?g===u.pos:C.atStart(c).from===f;return !d||!y||!h.type.isTextblock||h.textContent.length?!1:o.clearNodes()}),()=>o.deleteSelection(),()=>o.joinBackward(),()=>o.selectNodeBackward()]),e=()=>this.editor.commands.first(({commands:o})=>[()=>o.deleteSelection(),()=>o.deleteCurrentNode(),()=>o.joinForward(),()=>o.selectNodeForward()]),r={Enter:()=>this.editor.commands.first(({commands:o})=>[()=>o.newlineInCode(),()=>o.createParagraphNear(),()=>o.liftEmptyBlock(),()=>o.splitBlock()]),"Mod-Enter":()=>this.editor.commands.exitCode(),Backspace:n,"Mod-Backspace":n,"Shift-Backspace":n,Delete:e,"Mod-Delete":e,"Mod-a":()=>this.editor.commands.selectAll()},i={...r},s={...r,"Ctrl-h":n,"Alt-Backspace":n,"Ctrl-d":e,"Ctrl-Alt-Backspace":e,"Alt-Delete":e,"Alt-d":e,"Ctrl-a":()=>this.editor.commands.selectTextblockStart(),"Ctrl-e":()=>this.editor.commands.selectTextblockEnd()};return ni()||Cn()?s:i},addProseMirrorPlugins(){return [new P({key:new te("clearDocument"),appendTransaction:(n,e,t)=>{if(!(n.some(p=>p.docChanged)&&!e.doc.eq(t.doc)))return;let{empty:i,from:s,to:o}=e.selection,l=C.atStart(e.doc).from,a=C.atEnd(e.doc).to;if(i||!(s===l&&o===a)||!(t.doc.textBetween(0,t.doc.content.size," "," ").length===0))return;let u=t.tr,f=Sn({state:t,transaction:u}),{commands:h}=new pt({editor:this.editor,state:f});if(h.clearNodes(),!!u.steps.length)return u}})]}}),wu=j.create({name:"tabindex",addProseMirrorPlugins(){return [new P({key:new te("tabindex"),props:{attributes:this.editor.isEditable?{tabindex:"0"}:{}}})]}}),Ou=Object.freeze({__proto__:null,ClipboardTextSerializer:rd,Commands:Su,Editable:xu,FocusEvents:Mu,Keymap:Cu,Tabindex:wu}),Tu=`.ProseMirror {
  position: relative;
}

.ProseMirror {
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
}

.ProseMirror [contenteditable="false"] {
  white-space: normal;
}

.ProseMirror [contenteditable="false"] [contenteditable="true"] {
  white-space: pre-wrap;
}

.ProseMirror pre {
  white-space: pre-wrap;
}

img.ProseMirror-separator {
  display: inline !important;
  border: none !important;
  margin: 0 !important;
  width: 1px !important;
  height: 1px !important;
}

.ProseMirror-gapcursor {
  display: none;
  pointer-events: none;
  position: absolute;
  margin: 0;
}

.ProseMirror-gapcursor:after {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  width: 20px;
  border-top: 1px solid black;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

.ProseMirror-hideselection *::selection {
  background: transparent;
}

.ProseMirror-hideselection *::-moz-selection {
  background: transparent;
}

.ProseMirror-hideselection * {
  caret-color: transparent;
}

.ProseMirror-focused .ProseMirror-gapcursor {
  display: block;
}

.tippy-box[data-animation=fade][data-state=hidden] {
  opacity: 0
}`;function Eu(n,e,t){let r=document.querySelector(`style[data-tiptap-style${t?`-${t}`:""}]`);if(r!==null)return r;let i=document.createElement("style");return e&&i.setAttribute("nonce",e),i.setAttribute(`data-tiptap-style${t?`-${t}`:""}`,""),i.innerHTML=n,document.getElementsByTagName("head")[0].appendChild(i),i}var kn=class extends Ur{constructor(e={}){super(),this.isFocused=!1,this.extensionStorage={},this.options={element:document.createElement("div"),content:"",injectCSS:!0,injectNonce:void 0,extensions:[],autofocus:!1,editable:!0,editorProps:{},parseOptions:{},enableInputRules:!0,enablePasteRules:!0,enableCoreExtensions:!0,onBeforeCreate:()=>null,onCreate:()=>null,onUpdate:()=>null,onSelectionUpdate:()=>null,onTransaction:()=>null,onFocus:()=>null,onBlur:()=>null,onDestroy:()=>null},this.isCapturingTransaction=!1,this.capturedTransaction=null,this.setOptions(e),this.createExtensionManager(),this.createCommandManager(),this.createSchema(),this.on("beforeCreate",this.options.onBeforeCreate),this.emit("beforeCreate",{editor:this}),this.createView(),this.injectCSS(),this.on("create",this.options.onCreate),this.on("update",this.options.onUpdate),this.on("selectionUpdate",this.options.onSelectionUpdate),this.on("transaction",this.options.onTransaction),this.on("focus",this.options.onFocus),this.on("blur",this.options.onBlur),this.on("destroy",this.options.onDestroy),window.setTimeout(()=>{this.isDestroyed||(this.commands.focus(this.options.autofocus),this.emit("create",{editor:this}));},0);}get storage(){return this.extensionStorage}get commands(){return this.commandManager.commands}chain(){return this.commandManager.chain()}can(){return this.commandManager.can()}injectCSS(){this.options.injectCSS&&document&&(this.css=Eu(Tu,this.options.injectNonce));}setOptions(e={}){this.options={...this.options,...e},!(!this.view||!this.state||this.isDestroyed)&&(this.options.editorProps&&this.view.setProps(this.options.editorProps),this.view.updateState(this.state));}setEditable(e,t=!0){this.setOptions({editable:e}),t&&this.emit("update",{editor:this,transaction:this.state.tr});}get isEditable(){return this.options.editable&&this.view&&this.view.editable}get state(){return this.view.state}registerPlugin(e,t){let r=Po(t)?t(e,[...this.state.plugins]):[...this.state.plugins,e],i=this.state.reconfigure({plugins:r});this.view.updateState(i);}unregisterPlugin(e){if(this.isDestroyed)return;let t=typeof e=="string"?`${e}$`:e.key,r=this.state.reconfigure({plugins:this.state.plugins.filter(i=>!i.key.startsWith(t))});this.view.updateState(r);}createExtensionManager(){let t=[...this.options.enableCoreExtensions?Object.values(Ou):[],...this.options.extensions].filter(r=>["extension","node","mark"].includes(r==null?void 0:r.type));this.extensionManager=new Yr(t,this);}createCommandManager(){this.commandManager=new pt({editor:this});}createSchema(){this.schema=this.extensionManager.schema;}createView(){let e=Vo(this.options.content,this.schema,this.options.parseOptions),t=zo(e,this.options.autofocus);this.view=new cn(this.options.element,{...this.options.editorProps,dispatchTransaction:this.dispatchTransaction.bind(this),state:en.create({doc:e,selection:t||void 0})});let r=this.state.reconfigure({plugins:this.extensionManager.plugins});this.view.updateState(r),this.createNodeViews(),this.prependClass();let i=this.view.dom;i.editor=this;}createNodeViews(){this.view.setProps({nodeViews:this.extensionManager.nodeViews});}prependClass(){this.view.dom.className=`tiptap ${this.view.dom.className}`;}captureTransaction(e){this.isCapturingTransaction=!0,e(),this.isCapturingTransaction=!1;let t=this.capturedTransaction;return this.capturedTransaction=null,t}dispatchTransaction(e){if(this.view.isDestroyed)return;if(this.isCapturingTransaction){if(!this.capturedTransaction){this.capturedTransaction=e;return}e.steps.forEach(o=>{var l;return (l=this.capturedTransaction)===null||l===void 0?void 0:l.step(o)});return}let t=this.state.apply(e),r=!this.state.selection.eq(t.selection);this.view.updateState(t),this.emit("transaction",{editor:this,transaction:e}),r&&this.emit("selectionUpdate",{editor:this,transaction:e});let i=e.getMeta("focus"),s=e.getMeta("blur");i&&this.emit("focus",{editor:this,event:i.event,transaction:e}),s&&this.emit("blur",{editor:this,event:s.event,transaction:e}),!(!e.docChanged||e.getMeta("preventUpdate"))&&this.emit("update",{editor:this,transaction:e});}getAttributes(e){return Xd(this.state,e)}isActive(e,t){let r=typeof e=="string"?e:null,i=typeof e=="string"?t:e;return Zd(this.state,r,i)}getJSON(){return this.state.doc.toJSON()}getHTML(){return _d(this.state.doc.content,this.schema)}getText(e){let{blockSeparator:t=`

`,textSerializers:r={}}=e||{};return Gd(this.state.doc,{blockSeparator:t,textSerializers:{...Lo(this.schema),...r}})}get isEmpty(){return Qd(this.state.doc)}getCharacterCount(){return console.warn('[tiptap warn]: "editor.getCharacterCount()" is deprecated. Please use "editor.storage.characterCount.characters()" instead.'),this.state.doc.content.size-2}destroy(){this.emit("destroy"),this.view&&this.view.destroy(),this.removeAllListeners();}get isDestroyed(){var e;return !(!((e=this.view)===null||e===void 0)&&e.docView)}};function me(n){return new mt({find:n.find,handler:({state:e,range:t,match:r})=>{let i=O(n.getAttributes,void 0,r);if(i===!1||i===null)return null;let{tr:s}=e,o=r[r.length-1],l=r[0];if(o){let a=l.search(/\S/),c=t.from+l.indexOf(o),d=c+o.length;if($o(t.from,t.to,e.doc).filter(h=>h.mark.type.excluded.find(m=>m===n.type&&m!==h.mark.type)).filter(h=>h.to>c).length)return null;d<t.to&&s.delete(d,t.to),c>t.from&&s.delete(t.from+a,c);let f=t.from+a+o.length;s.addMark(t.from+a,f,n.type.create(i||{})),s.removeStoredMark(n.type);}}})}function On(n){return new mt({find:n.find,handler:({state:e,range:t,match:r})=>{let i=O(n.getAttributes,void 0,r)||{},{tr:s}=e,o=t.from,l=t.to,a=n.type.create(i);if(r[1]){let c=r[0].lastIndexOf(r[1]),d=o+c;d>l?d=l:l=d+r[1].length;let u=r[0][r[0].length-1];s.insertText(u,o+r[0].length-1),s.replaceWith(d,l,a);}else r[0]&&s.insert(o-1,n.type.create(i)).delete(s.mapping.map(o),s.mapping.map(l));s.scrollIntoView();}})}function Ft(n){return new mt({find:n.find,handler:({state:e,range:t,match:r})=>{let i=e.doc.resolve(t.from),s=O(n.getAttributes,void 0,r)||{};if(!i.node(-1).canReplaceWith(i.index(-1),i.indexAfter(-1),n.type))return null;e.tr.delete(t.from,t.to).setBlockType(t.from,t.from,n.type,s);}})}function Pe(n){return new mt({find:n.find,handler:({state:e,range:t,match:r,chain:i})=>{let s=O(n.getAttributes,void 0,r)||{},o=e.tr.delete(t.from,t.to),a=o.doc.resolve(t.from).blockRange(),c=a&&it(a,n.type,s);if(!c)return null;if(o.wrap(a,c),n.keepMarks&&n.editor){let{selection:u,storedMarks:f}=e,{splittableMarks:h}=n.editor.extensionManager,p=f||u.$to.parentOffset&&u.$from.marks();if(p){let m=p.filter(g=>h.includes(g.type.name));o.ensureMarks(m);}}if(n.keepAttributes){let u=n.type.name==="bulletList"||n.type.name==="orderedList"?"listItem":"taskList";i().updateAttributes(u,s).run();}let d=o.doc.resolve(t.from-1).nodeBefore;d&&d.type===n.type&&ae(o.doc,t.from-1)&&(!n.joinPredicate||n.joinPredicate(r,d))&&o.join(t.from-1);}})}var Y=class n{constructor(e={}){this.type="mark",this.name="mark",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...e},this.name=this.config.name,e.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=O(S(this,"addOptions",{name:this.name}))),this.storage=O(S(this,"addStorage",{name:this.name,options:this.options}))||{};}static create(e={}){return new n(e)}configure(e={}){let t=this.extend();return t.options=Mn(this.options,e),t.storage=O(S(t,"addStorage",{name:t.name,options:t.options})),t}extend(e={}){let t=new n(e);return t.parent=this,this.child=t,t.name=e.name?e.name:t.parent.name,e.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${t.name}".`),t.options=O(S(t,"addOptions",{name:t.name})),t.storage=O(S(t,"addStorage",{name:t.name,options:t.options})),t}static handleExit({editor:e,mark:t}){let{tr:r}=e.state,i=e.state.selection.$from;if(i.pos===i.end()){let o=i.marks();if(!!!o.find(c=>(c==null?void 0:c.type.name)===t.name))return !1;let a=o.find(c=>(c==null?void 0:c.type.name)===t.name);return a&&r.removeStoredMark(a),r.insertText(" ",i.pos),e.view.dispatch(r),!0}return !1}},v=class n{constructor(e={}){this.type="node",this.name="node",this.parent=null,this.child=null,this.config={name:this.name,defaultOptions:{}},this.config={...this.config,...e},this.name=this.config.name,e.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`),this.options=this.config.defaultOptions,this.config.addOptions&&(this.options=O(S(this,"addOptions",{name:this.name}))),this.storage=O(S(this,"addStorage",{name:this.name,options:this.options}))||{};}static create(e={}){return new n(e)}configure(e={}){let t=this.extend();return t.options=Mn(this.options,e),t.storage=O(S(t,"addStorage",{name:t.name,options:t.options})),t}extend(e={}){let t=new n(e);return t.parent=this,this.child=t,t.name=e.name?e.name:t.parent.name,e.defaultOptions&&console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${t.name}".`),t.options=O(S(t,"addOptions",{name:t.name})),t.storage=O(S(t,"addStorage",{name:t.name,options:t.options})),t}};function ge(n){return new Gr({find:n.find,handler:({state:e,range:t,match:r,pasteEvent:i})=>{let s=O(n.getAttributes,void 0,r,i);if(s===!1||s===null)return null;let{tr:o}=e,l=r[r.length-1],a=r[0],c=t.to;if(l){let d=a.search(/\S/),u=t.from+a.indexOf(l),f=u+l.length;if($o(t.from,t.to,e.doc).filter(p=>p.mark.type.excluded.find(g=>g===n.type&&g!==p.mark.type)).filter(p=>p.to>u).length)return null;f<t.to&&o.delete(f,t.to),u>t.from&&o.delete(t.from+d,u),c=t.from+d+l.length,o.addMark(t.from+d,c,n.type.create(s||{})),o.removeStoredMark(n.type);}}})}var vu=({renderers:n})=>re__default.default.createElement(re__default.default.Fragment,null,Object.entries(n).map(([e,t])=>Au__default.default.createPortal(t.reactElement,t.element,e))),si=class extends re__default.default.Component{constructor(e){super(e),this.editorContentRef=re__default.default.createRef(),this.initialized=!1,this.state={renderers:{}};}componentDidMount(){this.init();}componentDidUpdate(){this.init();}init(){let{editor:e}=this.props;if(e&&e.options.element){if(e.contentComponent)return;let t=this.editorContentRef.current;t.append(...e.options.element.childNodes),e.setOptions({element:t}),e.contentComponent=this,e.createNodeViews(),this.initialized=!0;}}maybeFlushSync(e){this.initialized?Au.flushSync(e):e();}setRenderer(e,t){this.maybeFlushSync(()=>{this.setState(({renderers:r})=>({renderers:{...r,[e]:t}}));});}removeRenderer(e){this.maybeFlushSync(()=>{this.setState(({renderers:t})=>{let r={...t};return delete r[e],{renderers:r}});});}componentWillUnmount(){let{editor:e}=this.props;if(!e||(this.initialized=!1,e.isDestroyed||e.view.setProps({nodeViews:{}}),e.contentComponent=null,!e.options.element.firstChild))return;let t=document.createElement("div");t.append(...e.options.element.childNodes),e.setOptions({element:t});}render(){let{editor:e,...t}=this.props;return re__default.default.createElement(re__default.default.Fragment,null,re__default.default.createElement("div",{ref:this.editorContentRef,...t}),re__default.default.createElement(vu,{renderers:this.state.renderers}))}},Iu=n=>{let e=re__default.default.useMemo(()=>Math.floor(Math.random()*4294967295).toString(),[n.editor]);return re__default.default.createElement(si,{key:e,...n})},Wo=re__default.default.memo(Iu),oi=class extends kn{constructor(){super(...arguments),this.contentComponent=null;}};function Ru(){let[,n]=re.useState(0);return ()=>n(e=>e+1)}var jo=(n={},e=[])=>{let[t,r]=re.useState(null),i=Ru(),{onBeforeCreate:s,onBlur:o,onCreate:l,onDestroy:a,onFocus:c,onSelectionUpdate:d,onTransaction:u,onUpdate:f}=n,h=re.useRef(s),p=re.useRef(o),m=re.useRef(l),g=re.useRef(a),y=re.useRef(c),x=re.useRef(d),T=re.useRef(u),I=re.useRef(f);return re.useEffect(()=>{t&&(s&&(t.off("beforeCreate",h.current),t.on("beforeCreate",s),h.current=s),o&&(t.off("blur",p.current),t.on("blur",o),p.current=o),l&&(t.off("create",m.current),t.on("create",l),m.current=l),a&&(t.off("destroy",g.current),t.on("destroy",a),g.current=a),c&&(t.off("focus",y.current),t.on("focus",c),y.current=c),d&&(t.off("selectionUpdate",x.current),t.on("selectionUpdate",d),x.current=d),u&&(t.off("transaction",T.current),t.on("transaction",u),T.current=u),f&&(t.off("update",I.current),t.on("update",f),I.current=f));},[s,o,l,a,c,d,u,f,t]),re.useEffect(()=>{let D=!0,L=new oi(n);return r(L),L.on("transaction",()=>{requestAnimationFrame(()=>{requestAnimationFrame(()=>{D&&i();});});}),()=>{D=!1;}},e),re.useEffect(()=>()=>{t==null||t.destroy();},[t]),t},Pu=re.createContext({editor:null});Pu.Consumer;var Bu=re.createContext({onDragStart:void 0}),Lu=()=>re.useContext(Bu);re__default.default.forwardRef((n,e)=>{let{onDragStart:t}=Lu(),r=n.as||"div";return re__default.default.createElement(r,{...n,ref:e,"data-node-view-wrapper":"",onDragStart:t,style:{whiteSpace:"normal",...n.style}})});var Fu=/^\s*>\s$/,Ko=v.create({name:"blockquote",addOptions(){return {HTMLAttributes:{}}},content:"block+",group:"block",defining:!0,parseHTML(){return [{tag:"blockquote"}]},renderHTML({HTMLAttributes:n}){return ["blockquote",N(this.options.HTMLAttributes,n),0]},addCommands(){return {setBlockquote:()=>({commands:n})=>n.wrapIn(this.name),toggleBlockquote:()=>({commands:n})=>n.toggleWrap(this.name),unsetBlockquote:()=>({commands:n})=>n.lift(this.name)}},addKeyboardShortcuts(){return {"Mod-Shift-b":()=>this.editor.commands.toggleBlockquote()}},addInputRules(){return [Pe({find:Fu,type:this.type})]}});var zu=/(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))$/,Vu=/(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))/g,$u=/(?:^|\s)((?:__)((?:[^__]+))(?:__))$/,Hu=/(?:^|\s)((?:__)((?:[^__]+))(?:__))/g,qo=Y.create({name:"bold",addOptions(){return {HTMLAttributes:{}}},parseHTML(){return [{tag:"strong"},{tag:"b",getAttrs:n=>n.style.fontWeight!=="normal"&&null},{style:"font-weight",getAttrs:n=>/^(bold(er)?|[5-9]\d{2,})$/.test(n)&&null}]},renderHTML({HTMLAttributes:n}){return ["strong",N(this.options.HTMLAttributes,n),0]},addCommands(){return {setBold:()=>({commands:n})=>n.setMark(this.name),toggleBold:()=>({commands:n})=>n.toggleMark(this.name),unsetBold:()=>({commands:n})=>n.unsetMark(this.name)}},addKeyboardShortcuts(){return {"Mod-b":()=>this.editor.commands.toggleBold(),"Mod-B":()=>this.editor.commands.toggleBold()}},addInputRules(){return [me({find:zu,type:this.type}),me({find:$u,type:this.type})]},addPasteRules(){return [ge({find:Vu,type:this.type}),ge({find:Hu,type:this.type})]}});var Ju=v.create({name:"listItem",addOptions(){return {HTMLAttributes:{},bulletListTypeName:"bulletList",orderedListTypeName:"orderedList"}},content:"paragraph block*",defining:!0,parseHTML(){return [{tag:"li"}]},renderHTML({HTMLAttributes:n}){return ["li",N(this.options.HTMLAttributes,n),0]},addKeyboardShortcuts(){return {Enter:()=>this.editor.commands.splitListItem(this.name),Tab:()=>this.editor.commands.sinkListItem(this.name),"Shift-Tab":()=>this.editor.commands.liftListItem(this.name)}}}),Uo=Y.create({name:"textStyle",addOptions(){return {HTMLAttributes:{}}},parseHTML(){return [{tag:"span",getAttrs:n=>n.hasAttribute("style")?{}:!1}]},renderHTML({HTMLAttributes:n}){return ["span",N(this.options.HTMLAttributes,n),0]},addCommands(){return {removeEmptyTextStyle:()=>({state:n,commands:e})=>{let t=gt(n,this.type);return Object.entries(t).some(([,i])=>!!i)?!0:e.unsetMark(this.name)}}}}),_o=/^\s*([-+*])\s$/,Go=v.create({name:"bulletList",addOptions(){return {itemTypeName:"listItem",HTMLAttributes:{},keepMarks:!1,keepAttributes:!1}},group:"block list",content(){return `${this.options.itemTypeName}+`},parseHTML(){return [{tag:"ul"}]},renderHTML({HTMLAttributes:n}){return ["ul",N(this.options.HTMLAttributes,n),0]},addCommands(){return {toggleBulletList:()=>({commands:n,chain:e})=>this.options.keepAttributes?e().toggleList(this.name,this.options.itemTypeName,this.options.keepMarks).updateAttributes(Ju.name,this.editor.getAttributes(Uo.name)).run():n.toggleList(this.name,this.options.itemTypeName,this.options.keepMarks)}},addKeyboardShortcuts(){return {"Mod-Shift-8":()=>this.editor.commands.toggleBulletList()}},addInputRules(){let n=Pe({find:_o,type:this.type});return (this.options.keepMarks||this.options.keepAttributes)&&(n=Pe({find:_o,type:this.type,keepMarks:this.options.keepMarks,keepAttributes:this.options.keepAttributes,getAttributes:()=>this.editor.getAttributes(Uo.name),editor:this.editor})),[n]}});var Wu=/(?:^|\s)((?:`)((?:[^`]+))(?:`))$/,ju=/(?:^|\s)((?:`)((?:[^`]+))(?:`))/g,Yo=Y.create({name:"code",addOptions(){return {HTMLAttributes:{}}},excludes:"_",code:!0,exitable:!0,parseHTML(){return [{tag:"code"}]},renderHTML({HTMLAttributes:n}){return ["code",N(this.options.HTMLAttributes,n),0]},addCommands(){return {setCode:()=>({commands:n})=>n.setMark(this.name),toggleCode:()=>({commands:n})=>n.toggleMark(this.name),unsetCode:()=>({commands:n})=>n.unsetMark(this.name)}},addKeyboardShortcuts(){return {"Mod-e":()=>this.editor.commands.toggleCode()}},addInputRules(){return [me({find:Wu,type:this.type})]},addPasteRules(){return [ge({find:ju,type:this.type})]}});var Ku=/^```([a-z]+)?[\s\n]$/,qu=/^~~~([a-z]+)?[\s\n]$/,Xo=v.create({name:"codeBlock",addOptions(){return {languageClassPrefix:"language-",exitOnTripleEnter:!0,exitOnArrowDown:!0,HTMLAttributes:{}}},content:"text*",marks:"",group:"block",code:!0,defining:!0,addAttributes(){return {language:{default:null,parseHTML:n=>{var e;let{languageClassPrefix:t}=this.options,s=[...((e=n.firstElementChild)===null||e===void 0?void 0:e.classList)||[]].filter(o=>o.startsWith(t)).map(o=>o.replace(t,""))[0];return s||null},rendered:!1}}},parseHTML(){return [{tag:"pre",preserveWhitespace:"full"}]},renderHTML({node:n,HTMLAttributes:e}){return ["pre",N(this.options.HTMLAttributes,e),["code",{class:n.attrs.language?this.options.languageClassPrefix+n.attrs.language:null},0]]},addCommands(){return {setCodeBlock:n=>({commands:e})=>e.setNode(this.name,n),toggleCodeBlock:n=>({commands:e})=>e.toggleNode(this.name,"paragraph",n)}},addKeyboardShortcuts(){return {"Mod-Alt-c":()=>this.editor.commands.toggleCodeBlock(),Backspace:()=>{let{empty:n,$anchor:e}=this.editor.state.selection,t=e.pos===1;return !n||e.parent.type.name!==this.name?!1:t||!e.parent.textContent.length?this.editor.commands.clearNodes():!1},Enter:({editor:n})=>{if(!this.options.exitOnTripleEnter)return !1;let{state:e}=n,{selection:t}=e,{$from:r,empty:i}=t;if(!i||r.parent.type!==this.type)return !1;let s=r.parentOffset===r.parent.nodeSize-2,o=r.parent.textContent.endsWith(`

`);return !s||!o?!1:n.chain().command(({tr:l})=>(l.delete(r.pos-2,r.pos),!0)).exitCode().run()},ArrowDown:({editor:n})=>{if(!this.options.exitOnArrowDown)return !1;let{state:e}=n,{selection:t,doc:r}=e,{$from:i,empty:s}=t;if(!s||i.parent.type!==this.type||!(i.parentOffset===i.parent.nodeSize-2))return !1;let l=i.after();return l===void 0||r.nodeAt(l)?!1:n.commands.exitCode()}}},addInputRules(){return [Ft({find:Ku,type:this.type,getAttributes:n=>({language:n[1]})}),Ft({find:qu,type:this.type,getAttributes:n=>({language:n[1]})})]},addProseMirrorPlugins(){return [new P({key:new te("codeBlockVSCodeHandler"),props:{handlePaste:(n,e)=>{if(!e.clipboardData||this.editor.isActive(this.type.name))return !1;let t=e.clipboardData.getData("text/plain"),r=e.clipboardData.getData("vscode-editor-data"),i=r?JSON.parse(r):void 0,s=i==null?void 0:i.mode;if(!t||!s)return !1;let{tr:o}=n.state;return o.replaceSelectionWith(this.type.create({language:s})),o.setSelection(w.near(o.doc.resolve(Math.max(0,o.selection.from-2)))),o.insertText(t.replace(/\r\n?/g,`
`)),o.setMeta("paste",!0),n.dispatch(o),!0}}})]}});var Zo=v.create({name:"doc",topNode:!0,content:"block+"});function Qo(n={}){return new P({view(e){return new li(e,n)}})}var li=class{constructor(e,t){var r;this.editorView=e,this.cursorPos=null,this.element=null,this.timeout=-1,this.width=(r=t.width)!==null&&r!==void 0?r:1,this.color=t.color===!1?void 0:t.color||"black",this.class=t.class,this.handlers=["dragover","dragend","drop","dragleave"].map(i=>{let s=o=>{this[i](o);};return e.dom.addEventListener(i,s),{name:i,handler:s}});}destroy(){this.handlers.forEach(({name:e,handler:t})=>this.editorView.dom.removeEventListener(e,t));}update(e,t){this.cursorPos!=null&&t.doc!=e.state.doc&&(this.cursorPos>e.state.doc.content.size?this.setCursor(null):this.updateOverlay());}setCursor(e){e!=this.cursorPos&&(this.cursorPos=e,e==null?(this.element.parentNode.removeChild(this.element),this.element=null):this.updateOverlay());}updateOverlay(){let e=this.editorView.state.doc.resolve(this.cursorPos),t=!e.parent.inlineContent,r;if(t){let l=e.nodeBefore,a=e.nodeAfter;if(l||a){let c=this.editorView.nodeDOM(this.cursorPos-(l?l.nodeSize:0));if(c){let d=c.getBoundingClientRect(),u=l?d.bottom:d.top;l&&a&&(u=(u+this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top)/2),r={left:d.left,right:d.right,top:u-this.width/2,bottom:u+this.width/2};}}}if(!r){let l=this.editorView.coordsAtPos(this.cursorPos);r={left:l.left-this.width/2,right:l.left+this.width/2,top:l.top,bottom:l.bottom};}let i=this.editorView.dom.offsetParent;this.element||(this.element=i.appendChild(document.createElement("div")),this.class&&(this.element.className=this.class),this.element.style.cssText="position: absolute; z-index: 50; pointer-events: none;",this.color&&(this.element.style.backgroundColor=this.color)),this.element.classList.toggle("prosemirror-dropcursor-block",t),this.element.classList.toggle("prosemirror-dropcursor-inline",!t);let s,o;if(!i||i==document.body&&getComputedStyle(i).position=="static")s=-pageXOffset,o=-pageYOffset;else {let l=i.getBoundingClientRect();s=l.left-i.scrollLeft,o=l.top-i.scrollTop;}this.element.style.left=r.left-s+"px",this.element.style.top=r.top-o+"px",this.element.style.width=r.right-r.left+"px",this.element.style.height=r.bottom-r.top+"px";}scheduleRemoval(e){clearTimeout(this.timeout),this.timeout=setTimeout(()=>this.setCursor(null),e);}dragover(e){if(!this.editorView.editable)return;let t=this.editorView.posAtCoords({left:e.clientX,top:e.clientY}),r=t&&t.inside>=0&&this.editorView.state.doc.nodeAt(t.inside),i=r&&r.type.spec.disableDropCursor,s=typeof i=="function"?i(this.editorView,t,e):i;if(t&&!s){let o=t.pos;if(this.editorView.dragging&&this.editorView.dragging.slice){let l=Yt(this.editorView.state.doc,o,this.editorView.dragging.slice);l!=null&&(o=l);}this.setCursor(o),this.scheduleRemoval(5e3);}}dragend(){this.scheduleRemoval(20);}drop(){this.scheduleRemoval(20);}dragleave(e){(e.target==this.editorView.dom||!this.editorView.dom.contains(e.relatedTarget))&&this.setCursor(null);}};var el=j.create({name:"dropCursor",addOptions(){return {color:"currentColor",width:1,class:void 0}},addProseMirrorPlugins(){return [Qo(this.options)]}});var K=class n extends C{constructor(e){super(e,e);}map(e,t){let r=e.resolve(t.map(this.head));return n.valid(r)?new n(r):C.near(r)}content(){return k.empty}eq(e){return e instanceof n&&e.head==this.head}toJSON(){return {type:"gapcursor",pos:this.head}}static fromJSON(e,t){if(typeof t.pos!="number")throw new RangeError("Invalid input for GapCursor.fromJSON");return new n(e.resolve(t.pos))}getBookmark(){return new ai(this.anchor)}static valid(e){let t=e.parent;if(t.isTextblock||!Uu(e)||!_u(e))return !1;let r=t.type.spec.allowGapCursor;if(r!=null)return r;let i=t.contentMatchAt(e.index()).defaultType;return i&&i.isTextblock}static findGapCursorFrom(e,t,r=!1){e:for(;;){if(!r&&n.valid(e))return e;let i=e.pos,s=null;for(let o=e.depth;;o--){let l=e.node(o);if(t>0?e.indexAfter(o)<l.childCount:e.index(o)>0){s=l.child(t>0?e.indexAfter(o):e.index(o)-1);break}else if(o==0)return null;i+=t;let a=e.doc.resolve(i);if(n.valid(a))return a}for(;;){let o=t>0?s.firstChild:s.lastChild;if(!o){if(s.isAtom&&!s.isText&&!M.isSelectable(s)){e=e.doc.resolve(i+s.nodeSize*t),r=!1;continue e}break}s=o,i+=t;let l=e.doc.resolve(i);if(n.valid(l))return l}return null}}};K.prototype.visible=!1;K.findFrom=K.findGapCursorFrom;C.jsonID("gapcursor",K);var ai=class n{constructor(e){this.pos=e;}map(e){return new n(e.map(this.pos))}resolve(e){let t=e.resolve(this.pos);return K.valid(t)?new K(t):C.near(t)}};function Uu(n){for(let e=n.depth;e>=0;e--){let t=n.index(e),r=n.node(e);if(t==0){if(r.type.spec.isolating)return !0;continue}for(let i=r.child(t-1);;i=i.lastChild){if(i.childCount==0&&!i.inlineContent||i.isAtom||i.type.spec.isolating)return !0;if(i.inlineContent)return !1}}return !0}function _u(n){for(let e=n.depth;e>=0;e--){let t=n.indexAfter(e),r=n.node(e);if(t==r.childCount){if(r.type.spec.isolating)return !0;continue}for(let i=r.child(t);;i=i.firstChild){if(i.childCount==0&&!i.inlineContent||i.isAtom||i.type.spec.isolating)return !0;if(i.inlineContent)return !1}}return !0}function tl(){return new P({props:{decorations:Zu,createSelectionBetween(n,e,t){return e.pos==t.pos&&K.valid(t)?new K(t):null},handleClick:Yu,handleKeyDown:Gu,handleDOMEvents:{beforeinput:Xu}}})}var Gu=Er({ArrowLeft:Tn("horiz",-1),ArrowRight:Tn("horiz",1),ArrowUp:Tn("vert",-1),ArrowDown:Tn("vert",1)});function Tn(n,e){let t=n=="vert"?e>0?"down":"up":e>0?"right":"left";return function(r,i,s){let o=r.selection,l=e>0?o.$to:o.$from,a=o.empty;if(o instanceof w){if(!s.endOfTextblock(t)||l.depth==0)return !1;a=!1,l=r.doc.resolve(e>0?l.after():l.before());}let c=K.findGapCursorFrom(l,e,a);return c?(i&&i(r.tr.setSelection(new K(c))),!0):!1}}function Yu(n,e,t){if(!n||!n.editable)return !1;let r=n.state.doc.resolve(e);if(!K.valid(r))return !1;let i=n.posAtCoords({left:t.clientX,top:t.clientY});return i&&i.inside>-1&&M.isSelectable(n.state.doc.nodeAt(i.inside))?!1:(n.dispatch(n.state.tr.setSelection(new K(r))),!0)}function Xu(n,e){if(e.inputType!="insertCompositionText"||!(n.state.selection instanceof K))return !1;let{$from:t}=n.state.selection,r=t.parent.contentMatchAt(t.index()).findWrapping(n.state.schema.nodes.text);if(!r)return !1;let i=b.empty;for(let o=r.length-1;o>=0;o--)i=b.from(r[o].createAndFill(null,i));let s=n.state.tr.replace(t.pos,t.pos,new k(i,0,0));return s.setSelection(w.near(s.doc.resolve(t.pos+1))),n.dispatch(s),!1}function Zu(n){if(!(n.selection instanceof K))return null;let e=document.createElement("div");return e.className="ProseMirror-gapcursor",Q.create(n.doc,[pe.widget(n.selection.head,e,{key:"gapcursor"})])}var nl=j.create({name:"gapCursor",addProseMirrorPlugins(){return [tl()]},extendNodeSchema(n){var e;let t={name:n.name,options:n.options,storage:n.storage};return {allowGapCursor:(e=O(S(n,"allowGapCursor",t)))!==null&&e!==void 0?e:null}}});var rl=v.create({name:"hardBreak",addOptions(){return {keepMarks:!0,HTMLAttributes:{}}},inline:!0,group:"inline",selectable:!1,parseHTML(){return [{tag:"br"}]},renderHTML({HTMLAttributes:n}){return ["br",N(this.options.HTMLAttributes,n)]},renderText(){return `
`},addCommands(){return {setHardBreak:()=>({commands:n,chain:e,state:t,editor:r})=>n.first([()=>n.exitCode(),()=>n.command(()=>{let{selection:i,storedMarks:s}=t;if(i.$from.parent.type.spec.isolating)return !1;let{keepMarks:o}=this.options,{splittableMarks:l}=r.extensionManager,a=s||i.$to.parentOffset&&i.$from.marks();return e().insertContent({type:this.name}).command(({tr:c,dispatch:d})=>{if(d&&a&&o){let u=a.filter(f=>l.includes(f.type.name));c.ensureMarks(u);}return !0}).run()})])}},addKeyboardShortcuts(){return {"Mod-Enter":()=>this.editor.commands.setHardBreak(),"Shift-Enter":()=>this.editor.commands.setHardBreak()}}});var il=v.create({name:"heading",addOptions(){return {levels:[1,2,3,4,5,6],HTMLAttributes:{}}},content:"inline*",group:"block",defining:!0,addAttributes(){return {level:{default:1,rendered:!1}}},parseHTML(){return this.options.levels.map(n=>({tag:`h${n}`,attrs:{level:n}}))},renderHTML({node:n,HTMLAttributes:e}){return [`h${this.options.levels.includes(n.attrs.level)?n.attrs.level:this.options.levels[0]}`,N(this.options.HTMLAttributes,e),0]},addCommands(){return {setHeading:n=>({commands:e})=>this.options.levels.includes(n.level)?e.setNode(this.name,n):!1,toggleHeading:n=>({commands:e})=>this.options.levels.includes(n.level)?e.toggleNode(this.name,"paragraph",n):!1}},addKeyboardShortcuts(){return this.options.levels.reduce((n,e)=>({...n,[`Mod-Alt-${e}`]:()=>this.editor.commands.toggleHeading({level:e})}),{})},addInputRules(){return this.options.levels.map(n=>Ft({find:new RegExp(`^(#{1,${n}})\\s$`),type:this.type,getAttributes:{level:n}}))}});var En=200,z=function(){};z.prototype.append=function(e){return e.length?(e=z.from(e),!this.length&&e||e.length<En&&this.leafAppend(e)||this.length<En&&e.leafPrepend(this)||this.appendInner(e)):this};z.prototype.prepend=function(e){return e.length?z.from(e).append(this):this};z.prototype.appendInner=function(e){return new Qu(this,e)};z.prototype.slice=function(e,t){return e===void 0&&(e=0),t===void 0&&(t=this.length),e>=t?z.empty:this.sliceInner(Math.max(0,e),Math.min(this.length,t))};z.prototype.get=function(e){if(!(e<0||e>=this.length))return this.getInner(e)};z.prototype.forEach=function(e,t,r){t===void 0&&(t=0),r===void 0&&(r=this.length),t<=r?this.forEachInner(e,t,r,0):this.forEachInvertedInner(e,t,r,0);};z.prototype.map=function(e,t,r){t===void 0&&(t=0),r===void 0&&(r=this.length);var i=[];return this.forEach(function(s,o){return i.push(e(s,o))},t,r),i};z.from=function(e){return e instanceof z?e:e&&e.length?new sl(e):z.empty};var sl=function(n){function e(r){n.call(this),this.values=r;}n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e;var t={length:{configurable:!0},depth:{configurable:!0}};return e.prototype.flatten=function(){return this.values},e.prototype.sliceInner=function(i,s){return i==0&&s==this.length?this:new e(this.values.slice(i,s))},e.prototype.getInner=function(i){return this.values[i]},e.prototype.forEachInner=function(i,s,o,l){for(var a=s;a<o;a++)if(i(this.values[a],l+a)===!1)return !1},e.prototype.forEachInvertedInner=function(i,s,o,l){for(var a=s-1;a>=o;a--)if(i(this.values[a],l+a)===!1)return !1},e.prototype.leafAppend=function(i){if(this.length+i.length<=En)return new e(this.values.concat(i.flatten()))},e.prototype.leafPrepend=function(i){if(this.length+i.length<=En)return new e(i.flatten().concat(this.values))},t.length.get=function(){return this.values.length},t.depth.get=function(){return 0},Object.defineProperties(e.prototype,t),e}(z);z.empty=new sl([]);var Qu=function(n){function e(t,r){n.call(this),this.left=t,this.right=r,this.length=t.length+r.length,this.depth=Math.max(t.depth,r.depth)+1;}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.flatten=function(){return this.left.flatten().concat(this.right.flatten())},e.prototype.getInner=function(r){return r<this.left.length?this.left.get(r):this.right.get(r-this.left.length)},e.prototype.forEachInner=function(r,i,s,o){var l=this.left.length;if(i<l&&this.left.forEachInner(r,i,Math.min(s,l),o)===!1||s>l&&this.right.forEachInner(r,Math.max(i-l,0),Math.min(this.length,s)-l,o+l)===!1)return !1},e.prototype.forEachInvertedInner=function(r,i,s,o){var l=this.left.length;if(i>l&&this.right.forEachInvertedInner(r,i-l,Math.max(s,l)-l,o+l)===!1||s<l&&this.left.forEachInvertedInner(r,Math.min(i,l),s,o)===!1)return !1},e.prototype.sliceInner=function(r,i){if(r==0&&i==this.length)return this;var s=this.left.length;return i<=s?this.left.slice(r,i):r>=s?this.right.slice(r-s,i-s):this.left.slice(r,s).append(this.right.slice(0,i-s))},e.prototype.leafAppend=function(r){var i=this.right.leafAppend(r);if(i)return new e(this.left,i)},e.prototype.leafPrepend=function(r){var i=this.left.leafPrepend(r);if(i)return new e(i,this.right)},e.prototype.appendInner=function(r){return this.left.depth>=Math.max(this.right.depth,r.depth)+1?new e(this.left,new e(this.right,r)):new e(this,r)},e}(z),ci=z;var ef=500,tt=class n{constructor(e,t){this.items=e,this.eventCount=t;}popEvent(e,t){if(this.eventCount==0)return null;let r=this.items.length;for(;;r--)if(this.items.get(r-1).selection){--r;break}let i,s;t&&(i=this.remapping(r,this.items.length),s=i.maps.length);let o=e.tr,l,a,c=[],d=[];return this.items.forEach((u,f)=>{if(!u.step){i||(i=this.remapping(r,f+1),s=i.maps.length),s--,d.push(u);return}if(i){d.push(new ye(u.map));let h=u.step.map(i.slice(s)),p;h&&o.maybeStep(h).doc&&(p=o.mapping.maps[o.mapping.maps.length-1],c.push(new ye(p,void 0,void 0,c.length+d.length))),s--,p&&i.appendMap(p,s);}else o.maybeStep(u.step);if(u.selection)return l=i?u.selection.map(i.slice(s)):u.selection,a=new n(this.items.slice(0,r).append(d.reverse().concat(c)),this.eventCount-1),!1},this.items.length,0),{remaining:a,transform:o,selection:l}}addTransform(e,t,r,i){let s=[],o=this.eventCount,l=this.items,a=!i&&l.length?l.get(l.length-1):null;for(let d=0;d<e.steps.length;d++){let u=e.steps[d].invert(e.docs[d]),f=new ye(e.mapping.maps[d],u,t),h;(h=a&&a.merge(f))&&(f=h,d?s.pop():l=l.slice(0,l.length-1)),s.push(f),t&&(o++,t=void 0),i||(a=f);}let c=o-r.depth;return c>nf&&(l=tf(l,c),o-=c),new n(l.append(s),o)}remapping(e,t){let r=new Ct;return this.items.forEach((i,s)=>{let o=i.mirrorOffset!=null&&s-i.mirrorOffset>=e?r.maps.length-i.mirrorOffset:void 0;r.appendMap(i.map,o);},e,t),r}addMaps(e){return this.eventCount==0?this:new n(this.items.append(e.map(t=>new ye(t))),this.eventCount)}rebased(e,t){if(!this.eventCount)return this;let r=[],i=Math.max(0,this.items.length-t),s=e.mapping,o=e.steps.length,l=this.eventCount;this.items.forEach(f=>{f.selection&&l--;},i);let a=t;this.items.forEach(f=>{let h=s.getMirror(--a);if(h==null)return;o=Math.min(o,h);let p=s.maps[h];if(f.step){let m=e.steps[h].invert(e.docs[h]),g=f.selection&&f.selection.map(s.slice(a+1,h));g&&l++,r.push(new ye(p,m,g));}else r.push(new ye(p));},i);let c=[];for(let f=t;f<o;f++)c.push(new ye(s.maps[f]));let d=this.items.slice(0,i).append(c).append(r),u=new n(d,l);return u.emptyItemCount()>ef&&(u=u.compress(this.items.length-r.length)),u}emptyItemCount(){let e=0;return this.items.forEach(t=>{t.step||e++;}),e}compress(e=this.items.length){let t=this.remapping(0,e),r=t.maps.length,i=[],s=0;return this.items.forEach((o,l)=>{if(l>=e)i.push(o),o.selection&&s++;else if(o.step){let a=o.step.map(t.slice(r)),c=a&&a.getMap();if(r--,c&&t.appendMap(c,r),a){let d=o.selection&&o.selection.map(t.slice(r));d&&s++;let u=new ye(c.invert(),a,d),f,h=i.length-1;(f=i.length&&i[h].merge(u))?i[h]=f:i.push(u);}}else o.map&&r--;},this.items.length,0),new n(ci.from(i.reverse()),s)}};tt.empty=new tt(ci.empty,0);function tf(n,e){let t;return n.forEach((r,i)=>{if(r.selection&&e--==0)return t=i,!1}),n.slice(t)}var ye=class n{constructor(e,t,r,i){this.map=e,this.step=t,this.selection=r,this.mirrorOffset=i;}merge(e){if(this.step&&e.step&&!e.selection){let t=e.step.merge(this.step);if(t)return new n(t.getMap().invert(),t,this.selection)}}},be=class{constructor(e,t,r,i,s){this.done=e,this.undone=t,this.prevRanges=r,this.prevTime=i,this.prevComposition=s;}},nf=20;function rf(n,e,t,r){let i=t.getMeta(Le),s;if(i)return i.historyState;t.getMeta(of)&&(n=new be(n.done,n.undone,null,0,-1));let o=t.getMeta("appendedTransaction");if(t.steps.length==0)return n;if(o&&o.getMeta(Le))return o.getMeta(Le).redo?new be(n.done.addTransform(t,void 0,r,Nn(e)),n.undone,ol(t.mapping.maps[t.steps.length-1]),n.prevTime,n.prevComposition):new be(n.done,n.undone.addTransform(t,void 0,r,Nn(e)),null,n.prevTime,n.prevComposition);if(t.getMeta("addToHistory")!==!1&&!(o&&o.getMeta("addToHistory")===!1)){let l=t.getMeta("composition"),a=n.prevTime==0||!o&&n.prevComposition!=l&&(n.prevTime<(t.time||0)-r.newGroupDelay||!sf(t,n.prevRanges)),c=o?di(n.prevRanges,t.mapping):ol(t.mapping.maps[t.steps.length-1]);return new be(n.done.addTransform(t,a?e.selection.getBookmark():void 0,r,Nn(e)),tt.empty,c,t.time,l??n.prevComposition)}else return (s=t.getMeta("rebased"))?new be(n.done.rebased(t,s),n.undone.rebased(t,s),di(n.prevRanges,t.mapping),n.prevTime,n.prevComposition):new be(n.done.addMaps(t.mapping.maps),n.undone.addMaps(t.mapping.maps),di(n.prevRanges,t.mapping),n.prevTime,n.prevComposition)}function sf(n,e){if(!e)return !1;if(!n.docChanged)return !0;let t=!1;return n.mapping.maps[0].forEach((r,i)=>{for(let s=0;s<e.length;s+=2)r<=e[s+1]&&i>=e[s]&&(t=!0);}),t}function ol(n){let e=[];return n.forEach((t,r,i,s)=>e.push(i,s)),e}function di(n,e){if(!n)return null;let t=[];for(let r=0;r<n.length;r+=2){let i=e.map(n[r],1),s=e.map(n[r+1],-1);i<=s&&t.push(i,s);}return t}function al(n,e,t,r){let i=Nn(e),s=Le.get(e).spec.config,o=(r?n.undone:n.done).popEvent(e,i);if(!o)return;let l=o.selection.resolve(o.transform.doc),a=(r?n.done:n.undone).addTransform(o.transform,e.selection.getBookmark(),s,i),c=new be(r?a:o.remaining,r?o.remaining:a,null,0,-1);t(o.transform.setSelection(l).setMeta(Le,{redo:r,historyState:c}).scrollIntoView());}var ui=!1,ll=null;function Nn(n){let e=n.plugins;if(ll!=e){ui=!1,ll=e;for(let t=0;t<e.length;t++)if(e[t].spec.historyPreserveItems){ui=!0;break}}return ui}var Le=new te("history"),of=new te("closeHistory");function cl(n={}){return n={depth:n.depth||100,newGroupDelay:n.newGroupDelay||500},new P({key:Le,state:{init(){return new be(tt.empty,tt.empty,null,0,-1)},apply(e,t,r){return rf(t,r,e,n)}},config:n,props:{handleDOMEvents:{beforeinput(e,t){let r=t.inputType,i=r=="historyUndo"?fi:r=="historyRedo"?hi:null;return i?(t.preventDefault(),i(e.state,e.dispatch)):!1}}}})}var fi=(n,e)=>{let t=Le.getState(n);return !t||t.done.eventCount==0?!1:(e&&al(t,n,e,!1),!0)},hi=(n,e)=>{let t=Le.getState(n);return !t||t.undone.eventCount==0?!1:(e&&al(t,n,e,!0),!0)};var dl=j.create({name:"history",addOptions(){return {depth:100,newGroupDelay:500}},addCommands(){return {undo:()=>({state:n,dispatch:e})=>fi(n,e),redo:()=>({state:n,dispatch:e})=>hi(n,e)}},addProseMirrorPlugins(){return [cl(this.options)]},addKeyboardShortcuts(){return {"Mod-z":()=>this.editor.commands.undo(),"Mod-Z":()=>this.editor.commands.undo(),"Mod-y":()=>this.editor.commands.redo(),"Mod-Y":()=>this.editor.commands.redo(),"Shift-Mod-z":()=>this.editor.commands.redo(),"Shift-Mod-Z":()=>this.editor.commands.redo(),"Mod-\u044F":()=>this.editor.commands.undo(),"Shift-Mod-\u044F":()=>this.editor.commands.redo()}}});var ul=v.create({name:"horizontalRule",addOptions(){return {HTMLAttributes:{}}},group:"block",parseHTML(){return [{tag:"hr"}]},renderHTML({HTMLAttributes:n}){return ["hr",N(this.options.HTMLAttributes,n)]},addCommands(){return {setHorizontalRule:()=>({chain:n,state:e})=>{let{$to:t}=e.selection,r=n();return t.parentOffset===0?r.insertContentAt(Math.max(t.pos-2,0),{type:this.name}):r.insertContent({type:this.name}),r.command(({tr:i,dispatch:s})=>{var o;if(s){let{$to:l}=i.selection,a=l.end();if(l.nodeAfter)l.nodeAfter.isTextblock?i.setSelection(w.create(i.doc,l.pos+1)):l.nodeAfter.isBlock?i.setSelection(M.create(i.doc,l.pos)):i.setSelection(w.create(i.doc,l.pos));else {let c=(o=l.parent.type.contentMatch.defaultType)===null||o===void 0?void 0:o.create();c&&(i.insert(a,c),i.setSelection(w.create(i.doc,a+1)));}i.scrollIntoView();}return !0}).run()}}},addInputRules(){return [On({find:/^(?:---|—-|___\s|\*\*\*\s)$/,type:this.type})]}});var lf=/(?:^|\s)((?:\*)((?:[^*]+))(?:\*))$/,af=/(?:^|\s)((?:\*)((?:[^*]+))(?:\*))/g,cf=/(?:^|\s)((?:_)((?:[^_]+))(?:_))$/,df=/(?:^|\s)((?:_)((?:[^_]+))(?:_))/g,fl=Y.create({name:"italic",addOptions(){return {HTMLAttributes:{}}},parseHTML(){return [{tag:"em"},{tag:"i",getAttrs:n=>n.style.fontStyle!=="normal"&&null},{style:"font-style=italic"}]},renderHTML({HTMLAttributes:n}){return ["em",N(this.options.HTMLAttributes,n),0]},addCommands(){return {setItalic:()=>({commands:n})=>n.setMark(this.name),toggleItalic:()=>({commands:n})=>n.toggleMark(this.name),unsetItalic:()=>({commands:n})=>n.unsetMark(this.name)}},addKeyboardShortcuts(){return {"Mod-i":()=>this.editor.commands.toggleItalic(),"Mod-I":()=>this.editor.commands.toggleItalic()}},addInputRules(){return [me({find:lf,type:this.type}),me({find:cf,type:this.type})]},addPasteRules(){return [ge({find:af,type:this.type}),ge({find:df,type:this.type})]}});var hl=v.create({name:"listItem",addOptions(){return {HTMLAttributes:{},bulletListTypeName:"bulletList",orderedListTypeName:"orderedList"}},content:"paragraph block*",defining:!0,parseHTML(){return [{tag:"li"}]},renderHTML({HTMLAttributes:n}){return ["li",N(this.options.HTMLAttributes,n),0]},addKeyboardShortcuts(){return {Enter:()=>this.editor.commands.splitListItem(this.name),Tab:()=>this.editor.commands.sinkListItem(this.name),"Shift-Tab":()=>this.editor.commands.liftListItem(this.name)}}});var uf=v.create({name:"listItem",addOptions(){return {HTMLAttributes:{},bulletListTypeName:"bulletList",orderedListTypeName:"orderedList"}},content:"paragraph block*",defining:!0,parseHTML(){return [{tag:"li"}]},renderHTML({HTMLAttributes:n}){return ["li",N(this.options.HTMLAttributes,n),0]},addKeyboardShortcuts(){return {Enter:()=>this.editor.commands.splitListItem(this.name),Tab:()=>this.editor.commands.sinkListItem(this.name),"Shift-Tab":()=>this.editor.commands.liftListItem(this.name)}}}),pl=Y.create({name:"textStyle",addOptions(){return {HTMLAttributes:{}}},parseHTML(){return [{tag:"span",getAttrs:n=>n.hasAttribute("style")?{}:!1}]},renderHTML({HTMLAttributes:n}){return ["span",N(this.options.HTMLAttributes,n),0]},addCommands(){return {removeEmptyTextStyle:()=>({state:n,commands:e})=>{let t=gt(n,this.type);return Object.entries(t).some(([,i])=>!!i)?!0:e.unsetMark(this.name)}}}}),ml=/^(\d+)\.\s$/,gl=v.create({name:"orderedList",addOptions(){return {itemTypeName:"listItem",HTMLAttributes:{},keepMarks:!1,keepAttributes:!1}},group:"block list",content(){return `${this.options.itemTypeName}+`},addAttributes(){return {start:{default:1,parseHTML:n=>n.hasAttribute("start")?parseInt(n.getAttribute("start")||"",10):1}}},parseHTML(){return [{tag:"ol"}]},renderHTML({HTMLAttributes:n}){let{start:e,...t}=n;return e===1?["ol",N(this.options.HTMLAttributes,t),0]:["ol",N(this.options.HTMLAttributes,n),0]},addCommands(){return {toggleOrderedList:()=>({commands:n,chain:e})=>this.options.keepAttributes?e().toggleList(this.name,this.options.itemTypeName,this.options.keepMarks).updateAttributes(uf.name,this.editor.getAttributes(pl.name)).run():n.toggleList(this.name,this.options.itemTypeName,this.options.keepMarks)}},addKeyboardShortcuts(){return {"Mod-Shift-7":()=>this.editor.commands.toggleOrderedList()}},addInputRules(){let n=Pe({find:ml,type:this.type,getAttributes:e=>({start:+e[1]}),joinPredicate:(e,t)=>t.childCount+t.attrs.start===+e[1]});return (this.options.keepMarks||this.options.keepAttributes)&&(n=Pe({find:ml,type:this.type,keepMarks:this.options.keepMarks,keepAttributes:this.options.keepAttributes,getAttributes:e=>({start:+e[1],...this.editor.getAttributes(pl.name)}),joinPredicate:(e,t)=>t.childCount+t.attrs.start===+e[1],editor:this.editor})),[n]}});var yl=v.create({name:"paragraph",priority:1e3,addOptions(){return {HTMLAttributes:{}}},group:"block",content:"inline*",parseHTML(){return [{tag:"p"}]},renderHTML({HTMLAttributes:n}){return ["p",N(this.options.HTMLAttributes,n),0]},addCommands(){return {setParagraph:()=>({commands:n})=>n.setNode(this.name)}},addKeyboardShortcuts(){return {"Mod-Alt-0":()=>this.editor.commands.setParagraph()}}});var ff=/(?:^|\s)((?:~~)((?:[^~]+))(?:~~))$/,hf=/(?:^|\s)((?:~~)((?:[^~]+))(?:~~))/g,bl=Y.create({name:"strike",addOptions(){return {HTMLAttributes:{}}},parseHTML(){return [{tag:"s"},{tag:"del"},{tag:"strike"},{style:"text-decoration",consuming:!1,getAttrs:n=>n.includes("line-through")?{}:!1}]},renderHTML({HTMLAttributes:n}){return ["s",N(this.options.HTMLAttributes,n),0]},addCommands(){return {setStrike:()=>({commands:n})=>n.setMark(this.name),toggleStrike:()=>({commands:n})=>n.toggleMark(this.name),unsetStrike:()=>({commands:n})=>n.unsetMark(this.name)}},addKeyboardShortcuts(){let n={};return Cn()?n["Mod-Shift-s"]=()=>this.editor.commands.toggleStrike():n["Ctrl-Shift-s"]=()=>this.editor.commands.toggleStrike(),n},addInputRules(){return [me({find:ff,type:this.type})]},addPasteRules(){return [ge({find:hf,type:this.type})]}});var kl=v.create({name:"text",group:"inline"});var Sl=j.create({name:"starterKit",addExtensions(){var n,e,t,r,i,s,o,l,a,c,d,u,f,h,p,m,g,y;let x=[];return this.options.blockquote!==!1&&x.push(Ko.configure((n=this.options)===null||n===void 0?void 0:n.blockquote)),this.options.bold!==!1&&x.push(qo.configure((e=this.options)===null||e===void 0?void 0:e.bold)),this.options.bulletList!==!1&&x.push(Go.configure((t=this.options)===null||t===void 0?void 0:t.bulletList)),this.options.code!==!1&&x.push(Yo.configure((r=this.options)===null||r===void 0?void 0:r.code)),this.options.codeBlock!==!1&&x.push(Xo.configure((i=this.options)===null||i===void 0?void 0:i.codeBlock)),this.options.document!==!1&&x.push(Zo.configure((s=this.options)===null||s===void 0?void 0:s.document)),this.options.dropcursor!==!1&&x.push(el.configure((o=this.options)===null||o===void 0?void 0:o.dropcursor)),this.options.gapcursor!==!1&&x.push(nl.configure((l=this.options)===null||l===void 0?void 0:l.gapcursor)),this.options.hardBreak!==!1&&x.push(rl.configure((a=this.options)===null||a===void 0?void 0:a.hardBreak)),this.options.heading!==!1&&x.push(il.configure((c=this.options)===null||c===void 0?void 0:c.heading)),this.options.history!==!1&&x.push(dl.configure((d=this.options)===null||d===void 0?void 0:d.history)),this.options.horizontalRule!==!1&&x.push(ul.configure((u=this.options)===null||u===void 0?void 0:u.horizontalRule)),this.options.italic!==!1&&x.push(fl.configure((f=this.options)===null||f===void 0?void 0:f.italic)),this.options.listItem!==!1&&x.push(hl.configure((h=this.options)===null||h===void 0?void 0:h.listItem)),this.options.orderedList!==!1&&x.push(gl.configure((p=this.options)===null||p===void 0?void 0:p.orderedList)),this.options.paragraph!==!1&&x.push(yl.configure((m=this.options)===null||m===void 0?void 0:m.paragraph)),this.options.strike!==!1&&x.push(bl.configure((g=this.options)===null||g===void 0?void 0:g.strike)),this.options.text!==!1&&x.push(kl.configure((y=this.options)===null||y===void 0?void 0:y.text)),x}});var pf=/(?:^|\s)(!\[(.+|:?)]\((\S+)(?:(?:\s+)["'](\S+)["'])?\))$/,xl=v.create({name:"image",addOptions(){return {inline:!1,allowBase64:!1,HTMLAttributes:{}}},inline(){return this.options.inline},group(){return this.options.inline?"inline":"block"},draggable:!0,addAttributes(){return {src:{default:null},alt:{default:null},title:{default:null}}},parseHTML(){return [{tag:this.options.allowBase64?"img[src]":'img[src]:not([src^="data:"])'}]},renderHTML({HTMLAttributes:n}){return ["img",N(this.options.HTMLAttributes,n)]},addCommands(){return {setImage:n=>({commands:e})=>e.insertContent({type:this.name,attrs:n})}},addInputRules(){return [On({find:pf,type:this.type,getAttributes:n=>{let[,,e,t,r]=n;return {src:t,alt:e,title:r}}})]}});var gf=[Sl,xl],yf=({content:n})=>{let e=jo({extensions:gf,content:n,editable:!1});return re__default.default.createElement(Wo,{editor:e})};

exports.ContentRenderer = yf;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,